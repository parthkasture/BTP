from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers


import pybindgen.settings
import warnings

class ErrorHandler(pybindgen.settings.ErrorHandler):
    def handle_error(self, wrapper, exception, traceback_):
        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
        return True
pybindgen.settings.error_handler = ErrorHandler()


import sys

def module_init():
    root_module = Module('ns.psc', cpp_namespace='::ns3')
    return root_module

def register_types(module):
    root_module = module.get_root()
    
    ## log.h (module 'core'): ns3::LogLevel [enumeration]
    module.add_enum('LogLevel', ['LOG_NONE', 'LOG_ERROR', 'LOG_LEVEL_ERROR', 'LOG_WARN', 'LOG_LEVEL_WARN', 'LOG_DEBUG', 'LOG_LEVEL_DEBUG', 'LOG_INFO', 'LOG_LEVEL_INFO', 'LOG_FUNCTION', 'LOG_LEVEL_FUNCTION', 'LOG_LOGIC', 'LOG_LEVEL_LOGIC', 'LOG_ALL', 'LOG_LEVEL_ALL', 'LOG_PREFIX_FUNC', 'LOG_PREFIX_TIME', 'LOG_PREFIX_NODE', 'LOG_PREFIX_LEVEL', 'LOG_PREFIX_ALL'], import_from_module='ns.core')
    ## address.h (module 'network'): ns3::Address [class]
    module.add_class('Address', import_from_module='ns.network')
    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
    ## application-container.h (module 'network'): ns3::ApplicationContainer [class]
    module.add_class('ApplicationContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator', 'ns3::ApplicationContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator*', 'ns3::ApplicationContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Application > > const_iterator&', 'ns3::ApplicationContainer::Iterator&')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
    module.add_class('AttributeConstructionList', import_from_module='ns.core')
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
    ## buffer.h (module 'network'): ns3::Buffer [class]
    module.add_class('Buffer', import_from_module='ns.network')
    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
    module.add_class('ByteTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
    module.add_class('ByteTagList', import_from_module='ns.network')
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
    ## callback.h (module 'core'): ns3::CallbackBase [class]
    module.add_class('CallbackBase', import_from_module='ns.core')
    ## data-rate.h (module 'network'): ns3::DataRate [class]
    module.add_class('DataRate', import_from_module='ns.network')
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachineGrpBasicState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallMachinePrivateState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> [struct]
    module.add_class('DefaultDeleter', template_parameters=['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer [class]
    module.add_class('DeviceEnergyModelContainer', import_from_module='ns.energy')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator', 'ns3::DeviceEnergyModelContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator*', 'ns3::DeviceEnergyModelContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::DeviceEnergyModel > > const_iterator&', 'ns3::DeviceEnergyModelContainer::Iterator&')
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper [class]
    module.add_class('DeviceEnergyModelHelper', allow_subclassing=True, import_from_module='ns.energy')
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper [class]
    module.add_class('EnergySourceHelper', allow_subclassing=True, import_from_module='ns.energy')
    ## event-id.h (module 'core'): ns3::EventId [class]
    module.add_class('EventId', import_from_module='ns.core')
    ## hash.h (module 'core'): ns3::Hasher [class]
    module.add_class('Hasher', import_from_module='ns.core')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    module.add_class('InetSocketAddress', import_from_module='ns.network')
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
    ## int-to-type.h (module 'core'): ns3::IntToType<0> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['0'])
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 0 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<1> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['1'])
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 1 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<2> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['2'])
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 2 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<3> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['3'])
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 3 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<4> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['4'])
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 4 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<5> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['5'])
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 5 >'], import_from_module='ns.core')
    ## int-to-type.h (module 'core'): ns3::IntToType<6> [struct]
    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['6'])
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::v_e [enumeration]
    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 6 >'], import_from_module='ns.core')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    module.add_class('Ipv4Address', import_from_module='ns.network')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash [class]
    module.add_class('Ipv4AddressHash', import_from_module='ns.network')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
    module.add_class('Ipv4Mask', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    module.add_class('Ipv6Address', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash [class]
    module.add_class('Ipv6AddressHash', import_from_module='ns.network')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
    module.add_class('Ipv6Prefix', import_from_module='ns.network')
    ## log.h (module 'core'): ns3::LogComponent [class]
    module.add_class('LogComponent', import_from_module='ns.core')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >', 'ns3::LogComponent::ComponentList')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >*', 'ns3::LogComponent::ComponentList*')
    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >&', 'ns3::LogComponent::ComponentList&')
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    module.add_class('Mac48Address', import_from_module='ns.network')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
    module.add_class('Mac8Address', import_from_module='ns.network')
    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer [class]
    module.add_class('NetDeviceContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
    ## node-container.h (module 'network'): ns3::NodeContainer [class]
    module.add_class('NodeContainer', import_from_module='ns.network')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
    ## object-base.h (module 'core'): ns3::ObjectBase [class]
    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
    module.add_class('ObjectDeleter', import_from_module='ns.core')
    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
    module.add_class('ObjectFactory', import_from_module='ns.core')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
    module.add_class('PacketMetadata', import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
    module.add_class('PacketTagIterator', import_from_module='ns.network')
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
    module.add_class('PacketTagList', import_from_module='ns.network')
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
    ## log.h (module 'core'): ns3::ParameterLogger [class]
    module.add_class('ParameterLogger', import_from_module='ns.core')
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
    ## simulator.h (module 'core'): ns3::Simulator [class]
    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
    ## tag.h (module 'network'): ns3::Tag [class]
    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
    module.add_class('TagBuffer', import_from_module='ns.network')
    ## nstime.h (module 'core'): ns3::Time [class]
    module.add_class('Time', import_from_module='ns.core')
    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST', 'AUTO'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
    module.add_class('TimeWithUnit', import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer [class]
    module.add_class('Timer', import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer::DestroyPolicy [enumeration]
    module.add_enum('DestroyPolicy', ['CANCEL_ON_DESTROY', 'REMOVE_ON_DESTROY', 'CHECK_ON_DESTROY'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
    ## timer.h (module 'core'): ns3::Timer::State [enumeration]
    module.add_enum('State', ['RUNNING', 'EXPIRED', 'SUSPENDED'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
    ## timer-impl.h (module 'core'): ns3::TimerImpl [class]
    module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
    ## traced-value.h (module 'core'): ns3::TracedValue<bool> [class]
    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['bool'])
    ## traced-value.h (module 'core'): ns3::TracedValue<double> [class]
    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['double'])
    ## type-id.h (module 'core'): ns3::TypeId [class]
    module.add_class('TypeId', import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
    typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
    typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
    typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
    ## vector.h (module 'core'): ns3::Vector2D [class]
    module.add_class('Vector2D', import_from_module='ns.core')
    ## vector.h (module 'core'): ns3::Vector3D [class]
    module.add_class('Vector3D', import_from_module='ns.core')
    ## empty.h (module 'core'): ns3::empty [class]
    module.add_class('empty', import_from_module='ns.core')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
    module.add_class('int64x64_t', import_from_module='ns.core')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
    ## chunk.h (module 'network'): ns3::Chunk [class]
    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
    ## header.h (module 'network'): ns3::Header [class]
    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## object.h (module 'core'): ns3::Object [class]
    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream [class]
    module.add_class('RandomVariableStream', import_from_module='ns.core', parent=root_module['ns3::Object'])
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable [class]
    module.add_class('SequentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachineGrpBasicState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachineGrpBroadcastState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallMachinePrivateState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttCallTypeMachinePrivateState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOffNetworkFloorParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkCallMachineClientState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorArbitratorState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorDualControlState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttOnNetworkFloorTowardsParticipantState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>'])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> > [class]
    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::psc::McpttServerCallMachineGroupPrearrangedState', 'ns3::empty', 'ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>'])
    ## socket.h (module 'network'): ns3::Socket [class]
    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    ## trailer.h (module 'network'): ns3::Trailer [class]
    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable [class]
    module.add_class('TriangularRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable [class]
    module.add_class('UniformRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable [class]
    module.add_class('WeibullRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable [class]
    module.add_class('ZetaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable [class]
    module.add_class('ZipfRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## application.h (module 'network'): ns3::Application [class]
    module.add_class('Application', import_from_module='ns.network', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )', 'ns3::Application::DelayAddressCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )*', 'ns3::Application::DelayAddressCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time const &, ns3::Address const & )&', 'ns3::Application::DelayAddressCallback&')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )', 'ns3::Application::StateTransitionCallback')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )*', 'ns3::Application::StateTransitionCallback*')
    typehandlers.add_type_alias('void ( * ) ( std::string const &, std::string const & )&', 'ns3::Application::StateTransitionCallback&')
    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    ## attribute.h (module 'core'): ns3::AttributeValue [class]
    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    ## boolean.h (module 'core'): ns3::BooleanChecker [class]
    module.add_class('BooleanChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## boolean.h (module 'core'): ns3::BooleanValue [class]
    module.add_class('BooleanValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## callback.h (module 'core'): ns3::CallbackChecker [class]
    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    ## callback.h (module 'core'): ns3::CallbackValue [class]
    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable [class]
    module.add_class('ConstantRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
    module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## data-rate.h (module 'network'): ns3::DataRateValue [class]
    module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable [class]
    module.add_class('DeterministicRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel [class]
    module.add_class('DeviceEnergyModel', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::DeviceEnergyModel::ChangeStateCallback')
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::DeviceEnergyModel::ChangeStateCallback*')
    typehandlers.add_type_alias('ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::DeviceEnergyModel::ChangeStateCallback&')
    ## double.h (module 'core'): ns3::DoubleValue [class]
    module.add_class('DoubleValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable [class]
    module.add_class('EmpiricalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester [class]
    module.add_class('EnergyHarvester', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    ## energy-source.h (module 'energy'): ns3::EnergySource [class]
    module.add_class('EnergySource', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer [class]
    module.add_class('EnergySourceContainer', import_from_module='ns.energy', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator', 'ns3::EnergySourceContainer::Iterator')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator*', 'ns3::EnergySourceContainer::Iterator*')
    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::EnergySource > > const_iterator&', 'ns3::EnergySourceContainer::Iterator&')
    ## enum.h (module 'core'): ns3::EnumChecker [class]
    module.add_class('EnumChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## enum.h (module 'core'): ns3::EnumValue [class]
    module.add_class('EnumValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable [class]
    module.add_class('ErlangRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## event-impl.h (module 'core'): ns3::EventImpl [class]
    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable [class]
    module.add_class('ExponentialRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable [class]
    module.add_class('GammaRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## integer.h (module 'core'): ns3::IntegerValue [class]
    module.add_class('IntegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable [class]
    module.add_class('LogNormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
    module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
    ## net-device.h (module 'network'): ns3::NetDevice [class]
    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
    ## nix-vector.h (module 'network'): ns3::NixVector [class]
    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    ## node.h (module 'network'): ns3::Node [class]
    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable [class]
    module.add_class('NormalRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
    ## packet.h (module 'network'): ns3::Packet [class]
    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable [class]
    module.add_class('ParetoRandomVariable', import_from_module='ns.core', parent=root_module['ns3::RandomVariableStream'])
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::PointToPointNetDevice [class]
    module.add_class('PointToPointNetDevice', import_from_module='ns.point_to_point', parent=root_module['ns3::NetDevice'])
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel [class]
    module.add_class('SimpleDeviceEnergyModel', import_from_module='ns.energy', parent=root_module['ns3::DeviceEnergyModel'])
    ## string.h (module 'core'): ns3::StringChecker [class]
    module.add_class('StringChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## string.h (module 'core'): ns3::StringValue [class]
    module.add_class('StringValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## nstime.h (module 'core'): ns3::TimeValue [class]
    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## uinteger.h (module 'core'): ns3::UintegerValue [class]
    module.add_class('UintegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## vector.h (module 'core'): ns3::Vector2DChecker [class]
    module.add_class('Vector2DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector2DValue [class]
    module.add_class('Vector2DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## vector.h (module 'core'): ns3::Vector3DChecker [class]
    module.add_class('Vector3DChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
    ## vector.h (module 'core'): ns3::Vector3DValue [class]
    module.add_class('Vector3DValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
    ## address.h (module 'network'): ns3::AddressChecker [class]
    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
    ## address.h (module 'network'): ns3::AddressValue [class]
    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'bool', 'bool', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'bool', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const char *', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Time &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::psc::McpttEntityId &', 'const ns3::psc::McpttEntityId &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::Vector3D', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Application>', 'unsigned short', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TypeId &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::Address &', 'const ns3::sip::SipHeader &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::sip::SipHeader &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::sip::SipHeader &', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Address', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::psc::McpttCall>', 'ns3::Ptr<ns3::psc::McpttCall>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::psc::UavMobilityEnergyModel::State', 'ns3::psc::UavMobilityEnergyModel::State', 'ns3::Vector3D', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned short', 'const std::basic_string<char> &', 'const char *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned short', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'const std::basic_string<char> &', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned int', 'unsigned int', 'ns3::sip::SipElement::DialogState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned short', 'unsigned int', 'unsigned int', 'ns3::sip::SipElement::TransactionState', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
    module.add_container('std::map< std::string, ns3::LogComponent * >', ('std::string', 'ns3::LogComponent *'), container_type='map')
    module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
    typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
    typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
    typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
    module.add_typedef(root_module['ns3::Vector3D'], 'Vector')
    typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
    typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
    typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
    module.add_typedef(root_module['ns3::Vector3DValue'], 'VectorValue')
    typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
    typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
    typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
    module.add_typedef(root_module['ns3::Vector3DChecker'], 'VectorChecker')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::TimePrinter')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::TimePrinter*')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::TimePrinter&')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::NodePrinter')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::NodePrinter*')
    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::NodePrinter&')
    
    ## Register a nested module for the namespace FatalImpl
    
    nested_module = module.add_cpp_namespace('FatalImpl')
    register_types_ns3_FatalImpl(nested_module)
    
    
    ## Register a nested module for the namespace Hash
    
    nested_module = module.add_cpp_namespace('Hash')
    register_types_ns3_Hash(nested_module)
    
    
    ## Register a nested module for the namespace TracedValueCallback
    
    nested_module = module.add_cpp_namespace('TracedValueCallback')
    register_types_ns3_TracedValueCallback(nested_module)
    
    
    ## Register a nested module for the namespace internal
    
    nested_module = module.add_cpp_namespace('internal')
    register_types_ns3_internal(nested_module)
    
    
    ## Register a nested module for the namespace psc
    
    nested_module = module.add_cpp_namespace('psc')
    register_types_ns3_psc(nested_module)
    
    
    ## Register a nested module for the namespace sip
    
    nested_module = module.add_cpp_namespace('sip')
    register_types_ns3_sip(nested_module)
    

def register_types_ns3_FatalImpl(module):
    root_module = module.get_root()
    

def register_types_ns3_Hash(module):
    root_module = module.get_root()
    
    ## hash-function.h (module 'core'): ns3::Hash::Implementation [class]
    module.add_class('Implementation', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
    
    ## Register a nested module for the namespace Function
    
    nested_module = module.add_cpp_namespace('Function')
    register_types_ns3_Hash_Function(nested_module)
    

def register_types_ns3_Hash_Function(module):
    root_module = module.get_root()
    
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a [class]
    module.add_class('Fnv1a', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]
    module.add_class('Hash32', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]
    module.add_class('Hash64', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3 [class]
    module.add_class('Murmur3', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])

def register_types_ns3_TracedValueCallback(module):
    root_module = module.get_root()
    
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
    typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
    typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
    typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
    typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
    typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )', 'ns3::TracedValueCallback::Int64')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )*', 'ns3::TracedValueCallback::Int64*')
    typehandlers.add_type_alias('void ( * ) ( int64_t, int64_t )&', 'ns3::TracedValueCallback::Int64&')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )', 'ns3::TracedValueCallback::Uint64')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )*', 'ns3::TracedValueCallback::Uint64*')
    typehandlers.add_type_alias('void ( * ) ( uint64_t, uint64_t )&', 'ns3::TracedValueCallback::Uint64&')
    typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
    typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
    typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )', 'ns3::TracedValueCallback::DataRate')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )*', 'ns3::TracedValueCallback::DataRate*')
    typehandlers.add_type_alias('void ( * ) ( ns3::DataRate, ns3::DataRate )&', 'ns3::TracedValueCallback::DataRate&')

def register_types_ns3_internal(module):
    root_module = module.get_root()
    

def register_types_ns3_psc(module):
    root_module = module.get_root()
    
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper [class]
    module.add_class('ImsHelper', parent=root_module['ns3::Object'])
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient [class]
    module.add_class('IntelHttpClient', parent=root_module['ns3::Application'])
    typehandlers.add_type_alias('void ( * ) ( uint16_t )', 'ns3::psc::IntelHttpClient::CacheCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t )*', 'ns3::psc::IntelHttpClient::CacheCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t )&', 'ns3::psc::IntelHttpClient::CacheCallback&')
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper [class]
    module.add_class('IntelHttpClientHelper')
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader [class]
    module.add_class('IntelHttpHeader', parent=root_module['ns3::Header'])
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::Type [enumeration]
    module.add_enum('Type', ['Main', 'Embedded'], outer_class=root_module['ns3::psc::IntelHttpHeader'])
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer [class]
    module.add_class('IntelHttpServer', parent=root_module['ns3::Application'])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper [class]
    module.add_class('IntelHttpServerHelper')
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall [class]
    module.add_class('McpttCall', parent=root_module['ns3::Object'])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::NetworkCallType [enumeration]
    module.add_enum('NetworkCallType', ['ON_NETWORK', 'OFF_NETWORK', 'INVALID'], outer_class=root_module['ns3::psc::McpttCall'])
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper [class]
    module.add_class('McpttCallHelper', allow_subclassing=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine [class]
    module.add_class('McpttCallMachine', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttCallMachine::StateChangeTracedCallback&')
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp [class]
    module.add_class('McpttCallMachineGrp', parent=root_module['ns3::psc::McpttCallMachine'])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic [class]
    module.add_class('McpttCallMachineGrpBasic', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState [class]
    module.add_class('McpttCallMachineGrpBasicState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1 [class]
    module.add_class('McpttCallMachineGrpBasicStateS1', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2 [class]
    module.add_class('McpttCallMachineGrpBasicStateS2', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3 [class]
    module.add_class('McpttCallMachineGrpBasicStateS3', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4 [class]
    module.add_class('McpttCallMachineGrpBasicStateS4', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5 [class]
    module.add_class('McpttCallMachineGrpBasicStateS5', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6 [class]
    module.add_class('McpttCallMachineGrpBasicStateS6', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7 [class]
    module.add_class('McpttCallMachineGrpBasicStateS7', parent=root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast [class]
    module.add_class('McpttCallMachineGrpBroadcast', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState [class]
    module.add_class('McpttCallMachineGrpBroadcastState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB1', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB2', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB3', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4 [class]
    module.add_class('McpttCallMachineGrpBroadcastStateB4', parent=root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull [class]
    module.add_class('McpttCallMachineNull', parent=root_module['ns3::psc::McpttCallMachine'])
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate [class]
    module.add_class('McpttCallMachinePrivate', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState [class]
    module.add_class('McpttCallMachinePrivateState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0 [class]
    module.add_class('McpttCallMachinePrivateStateP0', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1 [class]
    module.add_class('McpttCallMachinePrivateStateP1', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2 [class]
    module.add_class('McpttCallMachinePrivateStateP2', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3 [class]
    module.add_class('McpttCallMachinePrivateStateP3', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4 [class]
    module.add_class('McpttCallMachinePrivateStateP4', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5 [class]
    module.add_class('McpttCallMachinePrivateStateP5', parent=root_module['ns3::psc::McpttCallMachinePrivateState'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField [class]
    module.add_class('McpttCallMsgField', parent=root_module['ns3::ObjectBase'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId [class]
    module.add_class('McpttCallMsgFieldCallId', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType [class]
    module.add_class('McpttCallMsgFieldCallType', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode [class]
    module.add_class('McpttCallMsgFieldCommMode', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode [class]
    module.add_class('McpttCallMsgFieldConfirmMode', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime [class]
    module.add_class('McpttCallMsgFieldLastChgTime', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType [class]
    module.add_class('McpttCallMsgFieldMsgType', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp [class]
    module.add_class('McpttCallMsgFieldProbeResp', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason [class]
    module.add_class('McpttCallMsgFieldReason', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval [class]
    module.add_class('McpttCallMsgFieldRefreshInterval', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime [class]
    module.add_class('McpttCallMsgFieldStartTime', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6 [class]
    module.add_class('McpttCallMsgFieldType6', parent=root_module['ns3::psc::McpttCallMsgField'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId [class]
    module.add_class('McpttCallMsgFieldUserId', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc [class]
    module.add_class('McpttCallMsgFieldUserLoc', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine [class]
    module.add_class('McpttCallTypeMachine', parent=root_module['ns3::Object'])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic [class]
    module.add_class('McpttCallTypeMachineGrpBasic', parent=root_module['ns3::psc::McpttCallTypeMachine'])
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate [class]
    module.add_class('McpttCallTypeMachinePrivate', parent=root_module['ns3::psc::McpttCallTypeMachine'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState [class]
    module.add_class('McpttCallTypeMachinePrivateState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ0', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ1', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2 [class]
    module.add_class('McpttCallTypeMachinePrivateStateQ2', parent=root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel [class]
    module.add_class('McpttChannel', parent=root_module['ns3::Object'])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter [class]
    module.add_class('McpttCounter', parent=root_module['ns3::Object'])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine [class]
    module.add_class('McpttEmergAlertMachine', parent=root_module['ns3::Object'])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic [class]
    module.add_class('McpttEmergAlertMachineBasic', parent=root_module['ns3::psc::McpttEmergAlertMachine'])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser [struct]
    module.add_class('EmergUser', outer_class=root_module['ns3::psc::McpttEmergAlertMachineBasic'])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull [class]
    module.add_class('McpttEmergAlertMachineNull', parent=root_module['ns3::psc::McpttEmergAlertMachine'])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId [class]
    module.add_class('McpttEntityId', allow_subclassing=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField [class]
    module.add_class('McpttFloorMsgField', parent=root_module['ns3::ObjectBase'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration [class]
    module.add_class('McpttFloorMsgFieldDuration', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId [class]
    module.add_class('McpttFloorMsgFieldGrantedPartyId', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic [class]
    module.add_class('McpttFloorMsgFieldIndic', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq [class]
    module.add_class('McpttFloorMsgFieldPermToReq', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority [class]
    module.add_class('McpttFloorMsgFieldPriority', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo [class]
    module.add_class('McpttFloorMsgFieldQueuePositionInfo', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize [class]
    module.add_class('McpttFloorMsgFieldQueueSize', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause [class]
    module.add_class('McpttFloorMsgFieldRejectCause', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum [class]
    module.add_class('McpttFloorMsgFieldSeqNum', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource [class]
    module.add_class('McpttFloorMsgFieldSource', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc [class]
    module.add_class('McpttFloorMsgFieldSsrc', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo [class]
    module.add_class('McpttFloorMsgFieldTrackInfo', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType [class]
    module.add_class('McpttFloorMsgFieldType', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId [class]
    module.add_class('McpttFloorMsgFieldUserId', parent=root_module['ns3::psc::McpttFloorMsgField'])
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink [class]
    module.add_class('McpttFloorMsgSink', allow_subclassing=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant [class]
    module.add_class('McpttFloorParticipant', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttFloorParticipant::StateChangeTracedCallback&')
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull [class]
    module.add_class('McpttFloorParticipantNull', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue [class]
    module.add_class('McpttFloorQueue', parent=root_module['ns3::Object'])
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper [class]
    module.add_class('McpttHelper', allow_subclassing=True)
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink [class]
    module.add_class('McpttMediaSink', allow_subclassing=True)
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc [class]
    module.add_class('McpttMediaSrc', parent=root_module['ns3::Object'])
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg [class]
    module.add_class('McpttMsg', parent=root_module['ns3::Header'])
    ## mcptt-msg-stats.h (module 'psc'): ns3::psc::McpttMsgStats [class]
    module.add_class('McpttMsgStats', parent=root_module['ns3::Object'])
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant [class]
    module.add_class('McpttOffNetworkFloorParticipant', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState [class]
    module.add_class('McpttOffNetworkFloorParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm [class]
    module.add_class('McpttOffNetworkFloorParticipantStateHasPerm', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm [class]
    module.add_class('McpttOffNetworkFloorParticipantStateNoPerm', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant [class]
    module.add_class('McpttOffNetworkFloorParticipantStatePendGrant', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq [class]
    module.add_class('McpttOffNetworkFloorParticipantStatePendReq', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued [class]
    module.add_class('McpttOffNetworkFloorParticipantStateQueued', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence [class]
    module.add_class('McpttOffNetworkFloorParticipantStateSilence', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop [class]
    module.add_class('McpttOffNetworkFloorParticipantStateStartStop', parent=root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient [class]
    module.add_class('McpttOnNetworkCallMachineClient', parent=root_module['ns3::psc::McpttCallMachineGrp'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState [class]
    module.add_class('McpttOnNetworkCallMachineClientState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS1', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS2', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS3', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4 [class]
    module.add_class('McpttOnNetworkCallMachineClientStateS4', parent=root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator [class]
    module.add_class('McpttOnNetworkFloorArbitrator', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttOnNetworkFloorArbitrator::StateChangeTracedCallback&')
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState [class]
    module.add_class('McpttOnNetworkFloorArbitratorState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateIdle', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateInitialising', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateRevoke', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken [class]
    module.add_class('McpttOnNetworkFloorArbitratorStateTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl [class]
    module.add_class('McpttOnNetworkFloorDualControl', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState [class]
    module.add_class('McpttOnNetworkFloorDualControlState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing [class]
    module.add_class('McpttOnNetworkFloorDualControlStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop [class]
    module.add_class('McpttOnNetworkFloorDualControlStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken [class]
    module.add_class('McpttOnNetworkFloorDualControlStateTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant [class]
    module.add_class('McpttOnNetworkFloorParticipant', parent=root_module['ns3::psc::McpttFloorParticipant'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState [class]
    module.add_class('McpttOnNetworkFloorParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission [class]
    module.add_class('McpttOnNetworkFloorParticipantStateHasNoPermission', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission [class]
    module.add_class('McpttOnNetworkFloorParticipantStateHasPermission', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease [class]
    module.add_class('McpttOnNetworkFloorParticipantStatePendingRelease', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest [class]
    module.add_class('McpttOnNetworkFloorParticipantStatePendingRequest', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued [class]
    module.add_class('McpttOnNetworkFloorParticipantStateQueued', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing [class]
    module.add_class('McpttOnNetworkFloorParticipantStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop [class]
    module.add_class('McpttOnNetworkFloorParticipantStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipant', parent=[root_module['ns3::Object'], root_module['ns3::psc::McpttFloorMsgSink']])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStatePendingRevoke', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStatePermitted', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateReleasing', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop [class]
    module.add_class('McpttOnNetworkFloorTowardsParticipantStateStartStop', parent=root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp [class]
    module.add_class('McpttPttApp', parent=[root_module['ns3::Application'], root_module['ns3::psc::McpttMediaSink']])
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher [class]
    module.add_class('McpttPusher', parent=root_module['ns3::Object'])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface [class]
    module.add_class('McpttPusherOrchestratorInterface', parent=root_module['ns3::Object'])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf [class]
    module.add_class('McpttPusherOrchestratorSessionCdf', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf [class]
    module.add_class('McpttPusherOrchestratorSpurtCdf', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo [class]
    module.add_class('McpttQueuedUserInfo', parent=root_module['ns3::ObjectBase'])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader [class]
    module.add_class('McpttRtpHeader', parent=root_module['ns3::Header'])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader [class]
    module.add_class('McpttSdpFmtpHeader', parent=root_module['ns3::Header'])
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp [class]
    module.add_class('McpttServerApp', parent=root_module['ns3::Application'])
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall [class]
    module.add_class('McpttServerCall', parent=root_module['ns3::Object'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine [class]
    module.add_class('McpttServerCallMachine', parent=root_module['ns3::Object'])
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )*', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint16_t, std::string const &, std::string const &, std::string const &, std::string const & )&', 'ns3::psc::McpttServerCallMachine::StateChangeTracedCallback&')
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedState', parent=root_module['ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS1', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS2', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS3', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 [class]
    module.add_class('McpttServerCallMachineGroupPrearrangedStateS4', parent=root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp [class]
    module.add_class('McpttServerCallMachineGrp', parent=root_module['ns3::psc::McpttServerCallMachine'])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull [class]
    module.add_class('McpttServerCallMachineNull', parent=root_module['ns3::psc::McpttServerCallMachine'])
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper [class]
    module.add_class('McpttServerHelper')
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::psc::McpttStateMachineStats [class]
    module.add_class('McpttStateMachineStats', parent=root_module['ns3::Object'])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer [class]
    module.add_class('McpttTimer', parent=root_module['ns3::Object'])
    ## mcptt-trace-helper.h (module 'psc'): ns3::psc::McpttTraceHelper [class]
    module.add_class('McpttTraceHelper', allow_subclassing=True)
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming [class]
    module.add_class('PscVideoStreaming', parent=root_module['ns3::Application'])
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions [class]
    module.add_class('PscVideoStreamingDistributions')
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel [class]
    module.add_class('UavMobilityEnergyModel', parent=root_module['ns3::DeviceEnergyModel'])
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::State [enumeration]
    module.add_enum('State', ['ASCEND', 'DESCEND', 'HOVER', 'MOVE', 'STOP'], outer_class=root_module['ns3::psc::UavMobilityEnergyModel'])
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )', 'ns3::psc::UavMobilityEnergyModel::BasicCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )*', 'ns3::psc::UavMobilityEnergyModel::BasicCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::psc::UavMobilityEnergyModel const > )&', 'ns3::psc::UavMobilityEnergyModel::BasicCallback&')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )*', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector )&', 'ns3::psc::UavMobilityEnergyModel::StateChangedCallback&')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )*', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback*')
    typehandlers.add_type_alias('void ( * ) ( double, double, ns3::Vector )&', 'ns3::psc::UavMobilityEnergyModel::CurrentChangedCallback&')
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper [class]
    module.add_class('UavMobilityEnergyModelHelper')
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient [struct]
    module.add_class('UdpGroupEchoClient')
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer [class]
    module.add_class('UdpGroupEchoServer', parent=root_module['ns3::Application'])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::Mode_t [enumeration]
    module.add_enum('Mode_t', ['INF_SESSION', 'NO_GROUP_SESSION', 'TIMEOUT_LIMITED'], outer_class=root_module['ns3::psc::UdpGroupEchoServer'])
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t', 'ns3::psc::UdpGroupEchoServer::Mode_t')
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t*', 'ns3::psc::UdpGroupEchoServer::Mode_t*')
    typehandlers.add_type_alias('ns3::psc::UdpGroupEchoServer::Mode_t&', 'ns3::psc::UdpGroupEchoServer::Mode_t&')
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper [class]
    module.add_class('UdpGroupEchoServerHelper')
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg [class]
    module.add_class('McpttCallMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId [class]
    module.add_class('McpttCallMsgFieldGrpId', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName [class]
    module.add_class('McpttCallMsgFieldOrgName', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp [class]
    module.add_class('McpttCallMsgFieldSdp', parent=root_module['ns3::psc::McpttCallMsgFieldType6'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept [class]
    module.add_class('McpttCallMsgGrpAccept', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun [class]
    module.add_class('McpttCallMsgGrpAnnoun', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast [class]
    module.add_class('McpttCallMsgGrpBroadcast', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd [class]
    module.add_class('McpttCallMsgGrpBroadcastEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert [class]
    module.add_class('McpttCallMsgGrpEmergAlert', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck [class]
    module.add_class('McpttCallMsgGrpEmergAlertAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel [class]
    module.add_class('McpttCallMsgGrpEmergAlertCancel', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck [class]
    module.add_class('McpttCallMsgGrpEmergAlertCancelAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd [class]
    module.add_class('McpttCallMsgGrpEmergEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd [class]
    module.add_class('McpttCallMsgGrpImmPerilEnd', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe [class]
    module.add_class('McpttCallMsgGrpProbe', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept [class]
    module.add_class('McpttCallMsgPrivateAccept', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck [class]
    module.add_class('McpttCallMsgPrivateAcceptAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel [class]
    module.add_class('McpttCallMsgPrivateEmergCancel', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck [class]
    module.add_class('McpttCallMsgPrivateEmergCancelAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject [class]
    module.add_class('McpttCallMsgPrivateReject', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease [class]
    module.add_class('McpttCallMsgPrivateRelease', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck [class]
    module.add_class('McpttCallMsgPrivateReleaseAck', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging [class]
    module.add_class('McpttCallMsgPrivateRinging', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq [class]
    module.add_class('McpttCallMsgPrivateSetupReq', parent=root_module['ns3::psc::McpttCallMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg [class]
    module.add_class('McpttFloorMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck [class]
    module.add_class('McpttFloorMsgAck', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny [class]
    module.add_class('McpttFloorMsgDeny', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId [class]
    module.add_class('McpttFloorMsgFieldQueuedUserId', parent=root_module['ns3::psc::McpttFloorMsgFieldUserId'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted [class]
    module.add_class('McpttFloorMsgGranted', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle [class]
    module.add_class('McpttFloorMsgIdle', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo [class]
    module.add_class('McpttFloorMsgQueuePositionInfo', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest [class]
    module.add_class('McpttFloorMsgQueuePositionRequest', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease [class]
    module.add_class('McpttFloorMsgRelease', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest [class]
    module.add_class('McpttFloorMsgRequest', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke [class]
    module.add_class('McpttFloorMsgRevoke', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken [class]
    module.add_class('McpttFloorMsgTaken', parent=root_module['ns3::psc::McpttFloorMsg'])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg [class]
    module.add_class('McpttMediaMsg', parent=root_module['ns3::psc::McpttMsg'])
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator [class]
    module.add_class('McpttPusherOrchestrator', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention [class]
    module.add_class('McpttPusherOrchestratorContention', parent=root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged [class]
    module.add_class('McpttServerCallMachineGroupPrearranged', parent=root_module['ns3::psc::McpttServerCallMachineGrp'])
    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
    module.add_container('std::list< ns3::psc::McpttQueuedUserInfo >', 'ns3::psc::McpttQueuedUserInfo', container_type='list')
    module.add_container('std::map< unsigned short, ns3::Ptr< ns3::psc::McpttCall > >', ('short unsigned int', 'ns3::Ptr< ns3::psc::McpttCall >'), container_type='map')
    module.add_container('std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 'ns3::Ptr< ns3::psc::McpttPusher >', container_type='vector')
    module.add_container('std::vector< std::pair< double, double > >', 'std::pair< double, double >', container_type='vector')
    module.add_container('std::map< double, unsigned int >', ('double', 'unsigned int'), container_type='map')
    module.add_container('std::map< double, double >', ('double', 'double'), container_type='map')

def register_types_ns3_sip(module):
    root_module = module.get_root()
    
    ## sip-element.h (module 'sip'): ns3::sip::SipElement [class]
    module.add_class('SipElement', import_from_module='ns.sip', parent=root_module['ns3::Object'])
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TransactionState [enumeration]
    module.add_enum('TransactionState', ['TRANSACTION_IDLE', 'TRANSACTION_CALLING', 'TRANSACTION_TRYING', 'TRANSACTION_PROCEEDING', 'TRANSACTION_COMPLETED', 'TRANSACTION_CONFIRMED', 'TRANSACTION_TERMINATED', 'TRANSACTION_FAILED'], outer_class=root_module['ns3::sip::SipElement'], import_from_module='ns.sip')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::DialogState [enumeration]
    module.add_enum('DialogState', ['DIALOG_UNINITIALIZED', 'DIALOG_TRYING', 'DIALOG_PROCEEDING', 'DIALOG_EARLY', 'DIALOG_CONFIRMED', 'DIALOG_TERMINATED'], outer_class=root_module['ns3::sip::SipElement'], import_from_module='ns.sip')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )', 'ns3::sip::SipElement::TxRxTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )*', 'ns3::sip::SipElement::TxRxTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const & )&', 'ns3::sip::SipElement::TxRxTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )', 'ns3::sip::SipElement::DialogStateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )*', 'ns3::sip::SipElement::DialogStateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::DialogState )&', 'ns3::sip::SipElement::DialogStateTracedCallback&')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )', 'ns3::sip::SipElement::TransactionStateTracedCallback')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )*', 'ns3::sip::SipElement::TransactionStateTracedCallback*')
    typehandlers.add_type_alias('void ( * ) ( uint16_t, uint32_t, uint32_t, ns3::sip::SipElement::TransactionState )&', 'ns3::sip::SipElement::TransactionStateTracedCallback&')
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader [class]
    module.add_class('SipHeader', import_from_module='ns.sip', parent=root_module['ns3::Header'])
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMessageType [enumeration]
    module.add_enum('SipMessageType', ['SIP_REQUEST', 'SIP_RESPONSE', 'SIP_INVALID'], outer_class=root_module['ns3::sip::SipHeader'], import_from_module='ns.sip')
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMethod [enumeration]
    module.add_enum('SipMethod', ['INVITE', 'BYE', 'ACK', 'CANCEL', 'INVALID_METHOD'], outer_class=root_module['ns3::sip::SipHeader'], import_from_module='ns.sip')
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy [class]
    module.add_class('SipProxy', import_from_module='ns.sip', parent=root_module['ns3::sip::SipElement'])
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent [class]
    module.add_class('SipAgent', import_from_module='ns.sip', parent=root_module['ns3::sip::SipElement'])

def register_methods(root_module):
    register_Ns3Address_methods(root_module, root_module['ns3::Address'])
    register_Ns3ApplicationContainer_methods(root_module, root_module['ns3::ApplicationContainer'])
    register_Ns3AttributeConstructionList_methods(root_module, root_module['ns3::AttributeConstructionList'])
    register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])
    register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
    register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
    register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
    register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
    register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
    register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
    register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
    register_Ns3CallbackBase_methods(root_module, root_module['ns3::CallbackBase'])
    register_Ns3DataRate_methods(root_module, root_module['ns3::DataRate'])
    register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
    register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
    register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
    register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
    register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
    register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
    register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
    register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
    register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallMachinePrivateState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >'])
    register_Ns3DefaultDeleter__Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, root_module['ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState >'])
    register_Ns3DeviceEnergyModelContainer_methods(root_module, root_module['ns3::DeviceEnergyModelContainer'])
    register_Ns3DeviceEnergyModelHelper_methods(root_module, root_module['ns3::DeviceEnergyModelHelper'])
    register_Ns3EnergySourceHelper_methods(root_module, root_module['ns3::EnergySourceHelper'])
    register_Ns3EventId_methods(root_module, root_module['ns3::EventId'])
    register_Ns3Hasher_methods(root_module, root_module['ns3::Hasher'])
    register_Ns3Inet6SocketAddress_methods(root_module, root_module['ns3::Inet6SocketAddress'])
    register_Ns3InetSocketAddress_methods(root_module, root_module['ns3::InetSocketAddress'])
    register_Ns3IntToType__0_methods(root_module, root_module['ns3::IntToType< 0 >'])
    register_Ns3IntToType__1_methods(root_module, root_module['ns3::IntToType< 1 >'])
    register_Ns3IntToType__2_methods(root_module, root_module['ns3::IntToType< 2 >'])
    register_Ns3IntToType__3_methods(root_module, root_module['ns3::IntToType< 3 >'])
    register_Ns3IntToType__4_methods(root_module, root_module['ns3::IntToType< 4 >'])
    register_Ns3IntToType__5_methods(root_module, root_module['ns3::IntToType< 5 >'])
    register_Ns3IntToType__6_methods(root_module, root_module['ns3::IntToType< 6 >'])
    register_Ns3Ipv4Address_methods(root_module, root_module['ns3::Ipv4Address'])
    register_Ns3Ipv4AddressHash_methods(root_module, root_module['ns3::Ipv4AddressHash'])
    register_Ns3Ipv4Mask_methods(root_module, root_module['ns3::Ipv4Mask'])
    register_Ns3Ipv6Address_methods(root_module, root_module['ns3::Ipv6Address'])
    register_Ns3Ipv6AddressHash_methods(root_module, root_module['ns3::Ipv6AddressHash'])
    register_Ns3Ipv6Prefix_methods(root_module, root_module['ns3::Ipv6Prefix'])
    register_Ns3LogComponent_methods(root_module, root_module['ns3::LogComponent'])
    register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
    register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
    register_Ns3NetDeviceContainer_methods(root_module, root_module['ns3::NetDeviceContainer'])
    register_Ns3NodeContainer_methods(root_module, root_module['ns3::NodeContainer'])
    register_Ns3ObjectBase_methods(root_module, root_module['ns3::ObjectBase'])
    register_Ns3ObjectDeleter_methods(root_module, root_module['ns3::ObjectDeleter'])
    register_Ns3ObjectFactory_methods(root_module, root_module['ns3::ObjectFactory'])
    register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
    register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
    register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
    register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
    register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
    register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
    register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
    register_Ns3ParameterLogger_methods(root_module, root_module['ns3::ParameterLogger'])
    register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
    register_Ns3Simulator_methods(root_module, root_module['ns3::Simulator'])
    register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
    register_Ns3TagBuffer_methods(root_module, root_module['ns3::TagBuffer'])
    register_Ns3Time_methods(root_module, root_module['ns3::Time'])
    register_Ns3TimeWithUnit_methods(root_module, root_module['ns3::TimeWithUnit'])
    register_Ns3Timer_methods(root_module, root_module['ns3::Timer'])
    register_Ns3TimerImpl_methods(root_module, root_module['ns3::TimerImpl'])
    register_Ns3TracedValue__Bool_methods(root_module, root_module['ns3::TracedValue< bool >'])
    register_Ns3TracedValue__Double_methods(root_module, root_module['ns3::TracedValue< double >'])
    register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])
    register_Ns3TypeIdAttributeInformation_methods(root_module, root_module['ns3::TypeId::AttributeInformation'])
    register_Ns3TypeIdTraceSourceInformation_methods(root_module, root_module['ns3::TypeId::TraceSourceInformation'])
    register_Ns3Vector2D_methods(root_module, root_module['ns3::Vector2D'])
    register_Ns3Vector3D_methods(root_module, root_module['ns3::Vector3D'])
    register_Ns3Empty_methods(root_module, root_module['ns3::empty'])
    register_Ns3Int64x64_t_methods(root_module, root_module['ns3::int64x64_t'])
    register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
    register_Ns3Header_methods(root_module, root_module['ns3::Header'])
    register_Ns3Object_methods(root_module, root_module['ns3::Object'])
    register_Ns3ObjectAggregateIterator_methods(root_module, root_module['ns3::Object::AggregateIterator'])
    register_Ns3RandomVariableStream_methods(root_module, root_module['ns3::RandomVariableStream'])
    register_Ns3SequentialRandomVariable_methods(root_module, root_module['ns3::SequentialRandomVariable'])
    register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
    register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
    register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
    register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
    register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
    register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
    register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
    register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
    register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
    register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBasicState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBasicState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBroadcastState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBroadcastState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachinePrivateState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttCallTypeMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallTypeMachinePrivateState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOffNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOffNetworkFloorParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkCallMachineClientState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkCallMachineClientState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorArbitratorState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorArbitratorState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorDualControlState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorDualControlState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorTowardsParticipantState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >'])
    register_Ns3SimpleRefCount__Ns3PscMcpttServerCallMachineGroupPrearrangedState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttServerCallMachineGroupPrearrangedState__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >'])
    register_Ns3Socket_methods(root_module, root_module['ns3::Socket'])
    register_Ns3SocketIpTosTag_methods(root_module, root_module['ns3::SocketIpTosTag'])
    register_Ns3SocketIpTtlTag_methods(root_module, root_module['ns3::SocketIpTtlTag'])
    register_Ns3SocketIpv6HopLimitTag_methods(root_module, root_module['ns3::SocketIpv6HopLimitTag'])
    register_Ns3SocketIpv6TclassTag_methods(root_module, root_module['ns3::SocketIpv6TclassTag'])
    register_Ns3SocketPriorityTag_methods(root_module, root_module['ns3::SocketPriorityTag'])
    register_Ns3SocketSetDontFragmentTag_methods(root_module, root_module['ns3::SocketSetDontFragmentTag'])
    register_Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::TraceSourceAccessor'])
    register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
    register_Ns3TriangularRandomVariable_methods(root_module, root_module['ns3::TriangularRandomVariable'])
    register_Ns3UniformRandomVariable_methods(root_module, root_module['ns3::UniformRandomVariable'])
    register_Ns3WeibullRandomVariable_methods(root_module, root_module['ns3::WeibullRandomVariable'])
    register_Ns3ZetaRandomVariable_methods(root_module, root_module['ns3::ZetaRandomVariable'])
    register_Ns3ZipfRandomVariable_methods(root_module, root_module['ns3::ZipfRandomVariable'])
    register_Ns3Application_methods(root_module, root_module['ns3::Application'])
    register_Ns3AttributeAccessor_methods(root_module, root_module['ns3::AttributeAccessor'])
    register_Ns3AttributeChecker_methods(root_module, root_module['ns3::AttributeChecker'])
    register_Ns3AttributeValue_methods(root_module, root_module['ns3::AttributeValue'])
    register_Ns3BooleanChecker_methods(root_module, root_module['ns3::BooleanChecker'])
    register_Ns3BooleanValue_methods(root_module, root_module['ns3::BooleanValue'])
    register_Ns3CallbackChecker_methods(root_module, root_module['ns3::CallbackChecker'])
    register_Ns3CallbackImplBase_methods(root_module, root_module['ns3::CallbackImplBase'])
    register_Ns3CallbackValue_methods(root_module, root_module['ns3::CallbackValue'])
    register_Ns3ConstantRandomVariable_methods(root_module, root_module['ns3::ConstantRandomVariable'])
    register_Ns3DataRateChecker_methods(root_module, root_module['ns3::DataRateChecker'])
    register_Ns3DataRateValue_methods(root_module, root_module['ns3::DataRateValue'])
    register_Ns3DeterministicRandomVariable_methods(root_module, root_module['ns3::DeterministicRandomVariable'])
    register_Ns3DeviceEnergyModel_methods(root_module, root_module['ns3::DeviceEnergyModel'])
    register_Ns3DoubleValue_methods(root_module, root_module['ns3::DoubleValue'])
    register_Ns3EmpiricalRandomVariable_methods(root_module, root_module['ns3::EmpiricalRandomVariable'])
    register_Ns3EmptyAttributeAccessor_methods(root_module, root_module['ns3::EmptyAttributeAccessor'])
    register_Ns3EmptyAttributeChecker_methods(root_module, root_module['ns3::EmptyAttributeChecker'])
    register_Ns3EmptyAttributeValue_methods(root_module, root_module['ns3::EmptyAttributeValue'])
    register_Ns3EnergyHarvester_methods(root_module, root_module['ns3::EnergyHarvester'])
    register_Ns3EnergySource_methods(root_module, root_module['ns3::EnergySource'])
    register_Ns3EnergySourceContainer_methods(root_module, root_module['ns3::EnergySourceContainer'])
    register_Ns3EnumChecker_methods(root_module, root_module['ns3::EnumChecker'])
    register_Ns3EnumValue_methods(root_module, root_module['ns3::EnumValue'])
    register_Ns3ErlangRandomVariable_methods(root_module, root_module['ns3::ErlangRandomVariable'])
    register_Ns3EventImpl_methods(root_module, root_module['ns3::EventImpl'])
    register_Ns3ExponentialRandomVariable_methods(root_module, root_module['ns3::ExponentialRandomVariable'])
    register_Ns3GammaRandomVariable_methods(root_module, root_module['ns3::GammaRandomVariable'])
    register_Ns3IntegerValue_methods(root_module, root_module['ns3::IntegerValue'])
    register_Ns3Ipv4AddressChecker_methods(root_module, root_module['ns3::Ipv4AddressChecker'])
    register_Ns3Ipv4AddressValue_methods(root_module, root_module['ns3::Ipv4AddressValue'])
    register_Ns3Ipv4MaskChecker_methods(root_module, root_module['ns3::Ipv4MaskChecker'])
    register_Ns3Ipv4MaskValue_methods(root_module, root_module['ns3::Ipv4MaskValue'])
    register_Ns3Ipv6AddressChecker_methods(root_module, root_module['ns3::Ipv6AddressChecker'])
    register_Ns3Ipv6AddressValue_methods(root_module, root_module['ns3::Ipv6AddressValue'])
    register_Ns3Ipv6PrefixChecker_methods(root_module, root_module['ns3::Ipv6PrefixChecker'])
    register_Ns3Ipv6PrefixValue_methods(root_module, root_module['ns3::Ipv6PrefixValue'])
    register_Ns3LogNormalRandomVariable_methods(root_module, root_module['ns3::LogNormalRandomVariable'])
    register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
    register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
    register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
    register_Ns3NetDevice_methods(root_module, root_module['ns3::NetDevice'])
    register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
    register_Ns3Node_methods(root_module, root_module['ns3::Node'])
    register_Ns3NormalRandomVariable_methods(root_module, root_module['ns3::NormalRandomVariable'])
    register_Ns3ObjectFactoryChecker_methods(root_module, root_module['ns3::ObjectFactoryChecker'])
    register_Ns3ObjectFactoryValue_methods(root_module, root_module['ns3::ObjectFactoryValue'])
    register_Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::OutputStreamWrapper'])
    register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
    register_Ns3ParetoRandomVariable_methods(root_module, root_module['ns3::ParetoRandomVariable'])
    register_Ns3PointToPointNetDevice_methods(root_module, root_module['ns3::PointToPointNetDevice'])
    register_Ns3SimpleDeviceEnergyModel_methods(root_module, root_module['ns3::SimpleDeviceEnergyModel'])
    register_Ns3StringChecker_methods(root_module, root_module['ns3::StringChecker'])
    register_Ns3StringValue_methods(root_module, root_module['ns3::StringValue'])
    register_Ns3TimeValue_methods(root_module, root_module['ns3::TimeValue'])
    register_Ns3TypeIdChecker_methods(root_module, root_module['ns3::TypeIdChecker'])
    register_Ns3TypeIdValue_methods(root_module, root_module['ns3::TypeIdValue'])
    register_Ns3UintegerValue_methods(root_module, root_module['ns3::UintegerValue'])
    register_Ns3Vector2DChecker_methods(root_module, root_module['ns3::Vector2DChecker'])
    register_Ns3Vector2DValue_methods(root_module, root_module['ns3::Vector2DValue'])
    register_Ns3Vector3DChecker_methods(root_module, root_module['ns3::Vector3DChecker'])
    register_Ns3Vector3DValue_methods(root_module, root_module['ns3::Vector3DValue'])
    register_Ns3AddressChecker_methods(root_module, root_module['ns3::AddressChecker'])
    register_Ns3AddressValue_methods(root_module, root_module['ns3::AddressValue'])
    register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_char___star___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_ns3Time___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Const_ns3PscMcpttEntityId___amp___Const_ns3PscMcpttEntityId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Double_Double_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Application__gt___Unsigned_short_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TypeId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PscUavMobilityEnergyModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3Address___amp___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Ns3PscUavMobilityEnergyModelState_Ns3PscUavMobilityEnergyModelState_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementDialogState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
    register_Ns3HashImplementation_methods(root_module, root_module['ns3::Hash::Implementation'])
    register_Ns3HashFunctionFnv1a_methods(root_module, root_module['ns3::Hash::Function::Fnv1a'])
    register_Ns3HashFunctionHash32_methods(root_module, root_module['ns3::Hash::Function::Hash32'])
    register_Ns3HashFunctionHash64_methods(root_module, root_module['ns3::Hash::Function::Hash64'])
    register_Ns3HashFunctionMurmur3_methods(root_module, root_module['ns3::Hash::Function::Murmur3'])
    register_Ns3PscImsHelper_methods(root_module, root_module['ns3::psc::ImsHelper'])
    register_Ns3PscIntelHttpClient_methods(root_module, root_module['ns3::psc::IntelHttpClient'])
    register_Ns3PscIntelHttpClientHelper_methods(root_module, root_module['ns3::psc::IntelHttpClientHelper'])
    register_Ns3PscIntelHttpHeader_methods(root_module, root_module['ns3::psc::IntelHttpHeader'])
    register_Ns3PscIntelHttpServer_methods(root_module, root_module['ns3::psc::IntelHttpServer'])
    register_Ns3PscIntelHttpServerHelper_methods(root_module, root_module['ns3::psc::IntelHttpServerHelper'])
    register_Ns3PscMcpttCall_methods(root_module, root_module['ns3::psc::McpttCall'])
    register_Ns3PscMcpttCallHelper_methods(root_module, root_module['ns3::psc::McpttCallHelper'])
    register_Ns3PscMcpttCallMachine_methods(root_module, root_module['ns3::psc::McpttCallMachine'])
    register_Ns3PscMcpttCallMachineGrp_methods(root_module, root_module['ns3::psc::McpttCallMachineGrp'])
    register_Ns3PscMcpttCallMachineGrpBasic_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasic'])
    register_Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicState'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS1_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS1'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS2_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS2'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS3_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS3'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS4_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS4'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS5_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS5'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS6_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS6'])
    register_Ns3PscMcpttCallMachineGrpBasicStateS7_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBasicStateS7'])
    register_Ns3PscMcpttCallMachineGrpBroadcast_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcast'])
    register_Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastState'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB1_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB1'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB2_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB2'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB3_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB3'])
    register_Ns3PscMcpttCallMachineGrpBroadcastStateB4_methods(root_module, root_module['ns3::psc::McpttCallMachineGrpBroadcastStateB4'])
    register_Ns3PscMcpttCallMachineNull_methods(root_module, root_module['ns3::psc::McpttCallMachineNull'])
    register_Ns3PscMcpttCallMachinePrivate_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivate'])
    register_Ns3PscMcpttCallMachinePrivateState_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateState'])
    register_Ns3PscMcpttCallMachinePrivateStateP0_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP0'])
    register_Ns3PscMcpttCallMachinePrivateStateP1_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP1'])
    register_Ns3PscMcpttCallMachinePrivateStateP2_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP2'])
    register_Ns3PscMcpttCallMachinePrivateStateP3_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP3'])
    register_Ns3PscMcpttCallMachinePrivateStateP4_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP4'])
    register_Ns3PscMcpttCallMachinePrivateStateP5_methods(root_module, root_module['ns3::psc::McpttCallMachinePrivateStateP5'])
    register_Ns3PscMcpttCallMsgField_methods(root_module, root_module['ns3::psc::McpttCallMsgField'])
    register_Ns3PscMcpttCallMsgFieldCallId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCallId'])
    register_Ns3PscMcpttCallMsgFieldCallType_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCallType'])
    register_Ns3PscMcpttCallMsgFieldCommMode_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldCommMode'])
    register_Ns3PscMcpttCallMsgFieldConfirmMode_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldConfirmMode'])
    register_Ns3PscMcpttCallMsgFieldLastChgTime_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldLastChgTime'])
    register_Ns3PscMcpttCallMsgFieldMsgType_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldMsgType'])
    register_Ns3PscMcpttCallMsgFieldProbeResp_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldProbeResp'])
    register_Ns3PscMcpttCallMsgFieldReason_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldReason'])
    register_Ns3PscMcpttCallMsgFieldRefreshInterval_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldRefreshInterval'])
    register_Ns3PscMcpttCallMsgFieldStartTime_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldStartTime'])
    register_Ns3PscMcpttCallMsgFieldType6_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldType6'])
    register_Ns3PscMcpttCallMsgFieldUserId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldUserId'])
    register_Ns3PscMcpttCallMsgFieldUserLoc_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldUserLoc'])
    register_Ns3PscMcpttCallTypeMachine_methods(root_module, root_module['ns3::psc::McpttCallTypeMachine'])
    register_Ns3PscMcpttCallTypeMachineGrpBasic_methods(root_module, root_module['ns3::psc::McpttCallTypeMachineGrpBasic'])
    register_Ns3PscMcpttCallTypeMachinePrivate_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivate'])
    register_Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateState'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ0_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ0'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ1_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ1'])
    register_Ns3PscMcpttCallTypeMachinePrivateStateQ2_methods(root_module, root_module['ns3::psc::McpttCallTypeMachinePrivateStateQ2'])
    register_Ns3PscMcpttChannel_methods(root_module, root_module['ns3::psc::McpttChannel'])
    register_Ns3PscMcpttCounter_methods(root_module, root_module['ns3::psc::McpttCounter'])
    register_Ns3PscMcpttEmergAlertMachine_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachine'])
    register_Ns3PscMcpttEmergAlertMachineBasic_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineBasic'])
    register_Ns3PscMcpttEmergAlertMachineBasicEmergUser_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineBasic::EmergUser'])
    register_Ns3PscMcpttEmergAlertMachineNull_methods(root_module, root_module['ns3::psc::McpttEmergAlertMachineNull'])
    register_Ns3PscMcpttEntityId_methods(root_module, root_module['ns3::psc::McpttEntityId'])
    register_Ns3PscMcpttFloorMsgField_methods(root_module, root_module['ns3::psc::McpttFloorMsgField'])
    register_Ns3PscMcpttFloorMsgFieldDuration_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldDuration'])
    register_Ns3PscMcpttFloorMsgFieldGrantedPartyId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldGrantedPartyId'])
    register_Ns3PscMcpttFloorMsgFieldIndic_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldIndic'])
    register_Ns3PscMcpttFloorMsgFieldPermToReq_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldPermToReq'])
    register_Ns3PscMcpttFloorMsgFieldPriority_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldPriority'])
    register_Ns3PscMcpttFloorMsgFieldQueuePositionInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueuePositionInfo'])
    register_Ns3PscMcpttFloorMsgFieldQueueSize_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueueSize'])
    register_Ns3PscMcpttFloorMsgFieldRejectCause_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldRejectCause'])
    register_Ns3PscMcpttFloorMsgFieldSeqNum_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSeqNum'])
    register_Ns3PscMcpttFloorMsgFieldSource_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSource'])
    register_Ns3PscMcpttFloorMsgFieldSsrc_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldSsrc'])
    register_Ns3PscMcpttFloorMsgFieldTrackInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldTrackInfo'])
    register_Ns3PscMcpttFloorMsgFieldType_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldType'])
    register_Ns3PscMcpttFloorMsgFieldUserId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldUserId'])
    register_Ns3PscMcpttFloorMsgSink_methods(root_module, root_module['ns3::psc::McpttFloorMsgSink'])
    register_Ns3PscMcpttFloorParticipant_methods(root_module, root_module['ns3::psc::McpttFloorParticipant'])
    register_Ns3PscMcpttFloorParticipantNull_methods(root_module, root_module['ns3::psc::McpttFloorParticipantNull'])
    register_Ns3PscMcpttFloorQueue_methods(root_module, root_module['ns3::psc::McpttFloorQueue'])
    register_Ns3PscMcpttHelper_methods(root_module, root_module['ns3::psc::McpttHelper'])
    register_Ns3PscMcpttMediaSink_methods(root_module, root_module['ns3::psc::McpttMediaSink'])
    register_Ns3PscMcpttMediaSrc_methods(root_module, root_module['ns3::psc::McpttMediaSrc'])
    register_Ns3PscMcpttMsg_methods(root_module, root_module['ns3::psc::McpttMsg'])
    register_Ns3PscMcpttMsgStats_methods(root_module, root_module['ns3::psc::McpttMsgStats'])
    register_Ns3PscMcpttOffNetworkFloorParticipant_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipant'])
    register_Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantState'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateHasPerm_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateNoPerm_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStatePendGrant_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStatePendReq_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStatePendReq'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateQueued_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateQueued'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateSilence_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateSilence'])
    register_Ns3PscMcpttOffNetworkFloorParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOffNetworkFloorParticipantStateStartStop'])
    register_Ns3PscMcpttOnNetworkCallMachineClient_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClient'])
    register_Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientState'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS1_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS1'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS2_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS2'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS3_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS3'])
    register_Ns3PscMcpttOnNetworkCallMachineClientStateS4_methods(root_module, root_module['ns3::psc::McpttOnNetworkCallMachineClientStateS4'])
    register_Ns3PscMcpttOnNetworkFloorArbitrator_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitrator'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorState'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateIdle_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateIdle'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateInitialising_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateRevoke_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorArbitratorStateTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorArbitratorStateTaken'])
    register_Ns3PscMcpttOnNetworkFloorDualControl_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControl'])
    register_Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlState'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorDualControlStateTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorDualControlStateTaken'])
    register_Ns3PscMcpttOnNetworkFloorParticipant_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipant'])
    register_Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantState'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateHasNoPermission_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateHasPermission_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRelease_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRequest_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateQueued_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateQueued'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorParticipantStateStartStop'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipant_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipant'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantState'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePendingRevoke_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePermitted_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateReleasing_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing'])
    register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateStartStop_methods(root_module, root_module['ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop'])
    register_Ns3PscMcpttPttApp_methods(root_module, root_module['ns3::psc::McpttPttApp'])
    register_Ns3PscMcpttPusher_methods(root_module, root_module['ns3::psc::McpttPusher'])
    register_Ns3PscMcpttPusherOrchestratorInterface_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorInterface'])
    register_Ns3PscMcpttPusherOrchestratorSessionCdf_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorSessionCdf'])
    register_Ns3PscMcpttPusherOrchestratorSpurtCdf_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorSpurtCdf'])
    register_Ns3PscMcpttQueuedUserInfo_methods(root_module, root_module['ns3::psc::McpttQueuedUserInfo'])
    register_Ns3PscMcpttRtpHeader_methods(root_module, root_module['ns3::psc::McpttRtpHeader'])
    register_Ns3PscMcpttSdpFmtpHeader_methods(root_module, root_module['ns3::psc::McpttSdpFmtpHeader'])
    register_Ns3PscMcpttServerApp_methods(root_module, root_module['ns3::psc::McpttServerApp'])
    register_Ns3PscMcpttServerCall_methods(root_module, root_module['ns3::psc::McpttServerCall'])
    register_Ns3PscMcpttServerCallMachine_methods(root_module, root_module['ns3::psc::McpttServerCallMachine'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedState'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS1_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS2_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS3_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3'])
    register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS4_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4'])
    register_Ns3PscMcpttServerCallMachineGrp_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGrp'])
    register_Ns3PscMcpttServerCallMachineNull_methods(root_module, root_module['ns3::psc::McpttServerCallMachineNull'])
    register_Ns3PscMcpttServerHelper_methods(root_module, root_module['ns3::psc::McpttServerHelper'])
    register_Ns3PscMcpttStateMachineStats_methods(root_module, root_module['ns3::psc::McpttStateMachineStats'])
    register_Ns3PscMcpttTimer_methods(root_module, root_module['ns3::psc::McpttTimer'])
    register_Ns3PscMcpttTraceHelper_methods(root_module, root_module['ns3::psc::McpttTraceHelper'])
    register_Ns3PscPscVideoStreaming_methods(root_module, root_module['ns3::psc::PscVideoStreaming'])
    register_Ns3PscPscVideoStreamingDistributions_methods(root_module, root_module['ns3::psc::PscVideoStreamingDistributions'])
    register_Ns3PscUavMobilityEnergyModel_methods(root_module, root_module['ns3::psc::UavMobilityEnergyModel'])
    register_Ns3PscUavMobilityEnergyModelHelper_methods(root_module, root_module['ns3::psc::UavMobilityEnergyModelHelper'])
    register_Ns3PscUdpGroupEchoClient_methods(root_module, root_module['ns3::psc::UdpGroupEchoClient'])
    register_Ns3PscUdpGroupEchoServer_methods(root_module, root_module['ns3::psc::UdpGroupEchoServer'])
    register_Ns3PscUdpGroupEchoServerHelper_methods(root_module, root_module['ns3::psc::UdpGroupEchoServerHelper'])
    register_Ns3PscMcpttCallMsg_methods(root_module, root_module['ns3::psc::McpttCallMsg'])
    register_Ns3PscMcpttCallMsgFieldGrpId_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldGrpId'])
    register_Ns3PscMcpttCallMsgFieldOrgName_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldOrgName'])
    register_Ns3PscMcpttCallMsgFieldSdp_methods(root_module, root_module['ns3::psc::McpttCallMsgFieldSdp'])
    register_Ns3PscMcpttCallMsgGrpAccept_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpAccept'])
    register_Ns3PscMcpttCallMsgGrpAnnoun_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpAnnoun'])
    register_Ns3PscMcpttCallMsgGrpBroadcast_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpBroadcast'])
    register_Ns3PscMcpttCallMsgGrpBroadcastEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpBroadcastEnd'])
    register_Ns3PscMcpttCallMsgGrpEmergAlert_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlert'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertAck_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertAck'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertCancel_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertCancel'])
    register_Ns3PscMcpttCallMsgGrpEmergAlertCancelAck_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergAlertCancelAck'])
    register_Ns3PscMcpttCallMsgGrpEmergEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpEmergEnd'])
    register_Ns3PscMcpttCallMsgGrpImmPerilEnd_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpImmPerilEnd'])
    register_Ns3PscMcpttCallMsgGrpProbe_methods(root_module, root_module['ns3::psc::McpttCallMsgGrpProbe'])
    register_Ns3PscMcpttCallMsgPrivateAccept_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateAccept'])
    register_Ns3PscMcpttCallMsgPrivateAcceptAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateAcceptAck'])
    register_Ns3PscMcpttCallMsgPrivateEmergCancel_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateEmergCancel'])
    register_Ns3PscMcpttCallMsgPrivateEmergCancelAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateEmergCancelAck'])
    register_Ns3PscMcpttCallMsgPrivateReject_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateReject'])
    register_Ns3PscMcpttCallMsgPrivateRelease_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateRelease'])
    register_Ns3PscMcpttCallMsgPrivateReleaseAck_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateReleaseAck'])
    register_Ns3PscMcpttCallMsgPrivateRinging_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateRinging'])
    register_Ns3PscMcpttCallMsgPrivateSetupReq_methods(root_module, root_module['ns3::psc::McpttCallMsgPrivateSetupReq'])
    register_Ns3PscMcpttFloorMsg_methods(root_module, root_module['ns3::psc::McpttFloorMsg'])
    register_Ns3PscMcpttFloorMsgAck_methods(root_module, root_module['ns3::psc::McpttFloorMsgAck'])
    register_Ns3PscMcpttFloorMsgDeny_methods(root_module, root_module['ns3::psc::McpttFloorMsgDeny'])
    register_Ns3PscMcpttFloorMsgFieldQueuedUserId_methods(root_module, root_module['ns3::psc::McpttFloorMsgFieldQueuedUserId'])
    register_Ns3PscMcpttFloorMsgGranted_methods(root_module, root_module['ns3::psc::McpttFloorMsgGranted'])
    register_Ns3PscMcpttFloorMsgIdle_methods(root_module, root_module['ns3::psc::McpttFloorMsgIdle'])
    register_Ns3PscMcpttFloorMsgQueuePositionInfo_methods(root_module, root_module['ns3::psc::McpttFloorMsgQueuePositionInfo'])
    register_Ns3PscMcpttFloorMsgQueuePositionRequest_methods(root_module, root_module['ns3::psc::McpttFloorMsgQueuePositionRequest'])
    register_Ns3PscMcpttFloorMsgRelease_methods(root_module, root_module['ns3::psc::McpttFloorMsgRelease'])
    register_Ns3PscMcpttFloorMsgRequest_methods(root_module, root_module['ns3::psc::McpttFloorMsgRequest'])
    register_Ns3PscMcpttFloorMsgRevoke_methods(root_module, root_module['ns3::psc::McpttFloorMsgRevoke'])
    register_Ns3PscMcpttFloorMsgTaken_methods(root_module, root_module['ns3::psc::McpttFloorMsgTaken'])
    register_Ns3PscMcpttMediaMsg_methods(root_module, root_module['ns3::psc::McpttMediaMsg'])
    register_Ns3PscMcpttPusherOrchestrator_methods(root_module, root_module['ns3::psc::McpttPusherOrchestrator'])
    register_Ns3PscMcpttPusherOrchestratorContention_methods(root_module, root_module['ns3::psc::McpttPusherOrchestratorContention'])
    register_Ns3PscMcpttServerCallMachineGroupPrearranged_methods(root_module, root_module['ns3::psc::McpttServerCallMachineGroupPrearranged'])
    register_Ns3SipSipElement_methods(root_module, root_module['ns3::sip::SipElement'])
    register_Ns3SipSipHeader_methods(root_module, root_module['ns3::sip::SipHeader'])
    register_Ns3SipSipProxy_methods(root_module, root_module['ns3::sip::SipProxy'])
    register_Ns3SipSipAgent_methods(root_module, root_module['ns3::sip::SipAgent'])
    return

def register_Ns3Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    ## address.h (module 'network'): ns3::Address::Address() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::Address::Address(uint8_t type, uint8_t const * buffer, uint8_t len) [constructor]
    cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'address')])
    ## address.h (module 'network'): bool ns3::Address::CheckCompatible(uint8_t type, uint8_t len) const [member function]
    cls.add_method('CheckCompatible', 
                   'bool', 
                   [param('uint8_t', 'type'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyAllFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllTo(uint8_t * buffer, uint8_t len) const [member function]
    cls.add_method('CopyAllTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint8_t', 'len')], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::CopyFrom(uint8_t const * buffer, uint8_t len) [member function]
    cls.add_method('CopyFrom', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
    ## address.h (module 'network'): uint32_t ns3::Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## address.h (module 'network'): void ns3::Address::Deserialize(ns3::TagBuffer buffer) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')])
    ## address.h (module 'network'): uint8_t ns3::Address::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): uint32_t ns3::Address::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsInvalid() const [member function]
    cls.add_method('IsInvalid', 
                   'bool', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): bool ns3::Address::IsMatchingType(uint8_t type) const [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('uint8_t', 'type')], 
                   is_const=True)
    ## address.h (module 'network'): static uint8_t ns3::Address::Register() [member function]
    cls.add_method('Register', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## address.h (module 'network'): void ns3::Address::Serialize(ns3::TagBuffer buffer) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'buffer')], 
                   is_const=True)
    return

def register_Ns3ApplicationContainer_methods(root_module, cls):
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(ns3::ApplicationContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::ApplicationContainer const &', 'arg0')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer() [constructor]
    cls.add_constructor([])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(ns3::Ptr<ns3::Application> application) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Application >', 'application')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::ApplicationContainer(std::string name) [constructor]
    cls.add_constructor([param('std::string', 'name')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(ns3::ApplicationContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::ApplicationContainer', 'other')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(ns3::Ptr<ns3::Application> application) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application >', 'application')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Add(std::string name) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name')])
    ## application-container.h (module 'network'): ns3::ApplicationContainer::Iterator ns3::ApplicationContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::ApplicationContainer::Iterator', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): ns3::ApplicationContainer::Iterator ns3::ApplicationContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::ApplicationContainer::Iterator', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): ns3::Ptr<ns3::Application> ns3::ApplicationContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## application-container.h (module 'network'): uint32_t ns3::ApplicationContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Start(ns3::Time start) [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::Time', 'start')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::StartWithJitter(ns3::Time start, ns3::Ptr<ns3::RandomVariableStream> rv) [member function]
    cls.add_method('StartWithJitter', 
                   'void', 
                   [param('ns3::Time', 'start'), param('ns3::Ptr< ns3::RandomVariableStream >', 'rv')])
    ## application-container.h (module 'network'): void ns3::ApplicationContainer::Stop(ns3::Time stop) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time', 'stop')])
    return

def register_Ns3AttributeConstructionList_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::Ptr< ns3::AttributeValue >', 'value')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::AttributeConstructionList::CIterator', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
    cls.add_method('End', 
                   'ns3::AttributeConstructionList::CIterator', 
                   [], 
                   is_const=True)
    ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('Find', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True)
    return

def register_Ns3AttributeConstructionListItem_methods(root_module, cls):
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]
    cls.add_constructor([])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]
    cls.add_instance_attribute('value', 'ns3::Ptr< ns3::AttributeValue >', is_const=False)
    return

def register_Ns3Buffer_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
    cls.add_constructor([param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize')])
    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
    cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Buffer const &', 'o')])
    ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Buffer', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
    cls.add_method('End', 
                   'ns3::Buffer::Iterator', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
    cls.add_method('PeekData', 
                   'uint8_t const *', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3BufferIterator_methods(root_module, cls):
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
    cls.add_constructor([])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
    cls.add_method('CalculateIpChecksum', 
                   'uint16_t', 
                   [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator const &', 'o')], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
    cls.add_method('GetRemainingSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
    cls.add_method('IsEnd', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
    cls.add_method('IsStart', 
                   'bool', 
                   [], 
                   is_const=True)
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
    cls.add_method('Next', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
    cls.add_method('PeekU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
    cls.add_method('Prev', 
                   'void', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
    cls.add_method('Prev', 
                   'void', 
                   [param('uint32_t', 'delta')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
    cls.add_method('ReadLsbtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
    cls.add_method('ReadLsbtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
    cls.add_method('ReadLsbtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
    cls.add_method('ReadNtohU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
    cls.add_method('ReadNtohU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
    cls.add_method('ReadNtohU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
    cls.add_method('WriteHtolsbU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
    cls.add_method('WriteHtolsbU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
    cls.add_method('WriteHtolsbU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
    cls.add_method('WriteHtonU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
    cls.add_method('WriteHtonU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
    cls.add_method('WriteHtonU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data')])
    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'data'), param('uint32_t', 'len')])
    return

def register_Ns3ByteTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagIterator::Item', 
                   [])
    return

def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
    cls.add_method('GetEnd', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
    cls.add_method('GetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3ByteTagList_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
    cls.add_constructor([])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
    cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
    cls.add_method('Add', 
                   'ns3::TagBuffer', 
                   [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::ByteTagList const &', 'o')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('int32_t', 'appendOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
    cls.add_method('AddAtStart', 
                   'void', 
                   [param('int32_t', 'prependOffset')])
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
    cls.add_method('Adjust', 
                   'void', 
                   [param('int32_t', 'adjustment')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
    cls.add_method('Begin', 
                   'ns3::ByteTagList::Iterator', 
                   [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3ByteTagListIterator_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
    cls.add_method('GetOffsetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::ByteTagList::Iterator::Item', 
                   [])
    return

def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
    cls.add_constructor([param('ns3::TagBuffer', 'buf')])
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
    cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
    cls.add_instance_attribute('end', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
    cls.add_instance_attribute('start', 'int32_t', is_const=False)
    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3CallbackBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::Ptr<ns3::CallbackImplBase> ns3::CallbackBase::GetImpl() const [member function]
    cls.add_method('GetImpl', 
                   'ns3::Ptr< ns3::CallbackImplBase >', 
                   [], 
                   is_const=True)
    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::Ptr<ns3::CallbackImplBase> impl) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::CallbackImplBase >', 'impl')], 
                        visibility='protected')
    return

def register_Ns3DataRate_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_numeric_operator('*', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('double', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('uint64_t', 'right'))
    cls.add_inplace_numeric_operator('*=', param('double', 'right'))
    cls.add_inplace_numeric_operator('*=', param('uint64_t', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('ns3::DataRate', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::DataRate', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::DataRate'], root_module['ns3::DataRate'], param('ns3::DataRate', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::DataRate', 'right'))
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('>=')
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(ns3::DataRate const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(uint64_t bps) [constructor]
    cls.add_constructor([param('uint64_t', 'bps')])
    ## data-rate.h (module 'network'): ns3::DataRate::DataRate(std::string rate) [constructor]
    cls.add_constructor([param('std::string', 'rate')])
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBitsTxTime(uint32_t bits) const [member function]
    cls.add_method('CalculateBitsTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bits')], 
                   is_const=True)
    ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBytesTxTime(uint32_t bytes) const [member function]
    cls.add_method('CalculateBytesTxTime', 
                   'ns3::Time', 
                   [param('uint32_t', 'bytes')], 
                   is_const=True)
    ## data-rate.h (module 'network'): uint64_t ns3::DataRate::GetBitRate() const [member function]
    cls.add_method('GetBitRate', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeAccessor *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeChecker *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::AttributeValue *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::CallbackImplBase *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::EventImpl *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Hash::Implementation *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::NixVector *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Packet *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::TraceSourceAccessor *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState>::Delete(ns3::psc::McpttCallMachineGrpBasicState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasicState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState>::Delete(ns3::psc::McpttCallMachineGrpBroadcastState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcastState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallMachinePrivateState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState>::Delete(ns3::psc::McpttCallMachinePrivateState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivateState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState>::Delete(ns3::psc::McpttCallTypeMachinePrivateState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivateState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState>::Delete(ns3::psc::McpttOffNetworkFloorParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState>::Delete(ns3::psc::McpttOnNetworkCallMachineClientState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClientState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState>::Delete(ns3::psc::McpttOnNetworkFloorArbitratorState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorArbitratorState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState>::Delete(ns3::psc::McpttOnNetworkFloorDualControlState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControlState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState>::Delete(ns3::psc::McpttOnNetworkFloorParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState>::Delete(ns3::psc::McpttOnNetworkFloorTowardsParticipantState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorTowardsParticipantState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DefaultDeleter__Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, cls):
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::DefaultDeleter() [constructor]
    cls.add_constructor([])
    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::DefaultDeleter(ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> const & arg0) [constructor]
    cls.add_constructor([param('ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState > const &', 'arg0')])
    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState>::Delete(ns3::psc::McpttServerCallMachineGroupPrearrangedState * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::psc::McpttServerCallMachineGroupPrearrangedState *', 'object')], 
                   is_static=True)
    return

def register_Ns3DeviceEnergyModelContainer_methods(root_module, cls):
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::DeviceEnergyModelContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelContainer const &', 'arg0')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer() [constructor]
    cls.add_constructor([])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::Ptr<ns3::DeviceEnergyModel> model) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::DeviceEnergyModel >', 'model')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(std::string modelName) [constructor]
    cls.add_constructor([param('std::string', 'modelName')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::DeviceEnergyModelContainer(ns3::DeviceEnergyModelContainer const & a, ns3::DeviceEnergyModelContainer const & b) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelContainer const &', 'a'), param('ns3::DeviceEnergyModelContainer const &', 'b')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(ns3::DeviceEnergyModelContainer container) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::DeviceEnergyModelContainer', 'container')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(ns3::Ptr<ns3::DeviceEnergyModel> model) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::DeviceEnergyModel >', 'model')])
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Add(std::string modelName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'modelName')])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::Iterator ns3::DeviceEnergyModelContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::DeviceEnergyModelContainer::Iterator', 
                   [], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): void ns3::DeviceEnergyModelContainer::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [])
    ## device-energy-model-container.h (module 'energy'): ns3::DeviceEnergyModelContainer::Iterator ns3::DeviceEnergyModelContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::DeviceEnergyModelContainer::Iterator', 
                   [], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::DeviceEnergyModel >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## device-energy-model-container.h (module 'energy'): uint32_t ns3::DeviceEnergyModelContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3DeviceEnergyModelHelper_methods(root_module, cls):
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper::DeviceEnergyModelHelper() [constructor]
    cls.add_constructor([])
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelHelper::DeviceEnergyModelHelper(ns3::DeviceEnergyModelHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModelHelper const &', 'arg0')])
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::DeviceEnergyModelHelper::Install(ns3::NetDeviceContainer deviceContainer, ns3::EnergySourceContainer sourceContainer) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NetDeviceContainer', 'deviceContainer'), param('ns3::EnergySourceContainer', 'sourceContainer')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): void ns3::DeviceEnergyModelHelper::Set(std::string name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'v')], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::DeviceEnergyModel> ns3::DeviceEnergyModelHelper::DoInstall(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('DoInstall', 
                   'ns3::Ptr< ns3::DeviceEnergyModel >', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3EnergySourceHelper_methods(root_module, cls):
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper::EnergySourceHelper() [constructor]
    cls.add_constructor([])
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceHelper::EnergySourceHelper(ns3::EnergySourceHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySourceHelper const &', 'arg0')])
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(ns3::NodeContainer c) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('ns3::NodeContainer', 'c')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::Install(std::string nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::EnergySourceContainer', 
                   [param('std::string', 'nodeName')], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): ns3::EnergySourceContainer ns3::EnergySourceHelper::InstallAll() const [member function]
    cls.add_method('InstallAll', 
                   'ns3::EnergySourceContainer', 
                   [], 
                   is_const=True)
    ## energy-model-helper.h (module 'energy'): void ns3::EnergySourceHelper::Set(std::string name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'v')], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-model-helper.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceHelper::DoInstall(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('DoInstall', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3EventId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
    cls.add_constructor([param('ns3::EventId const &', 'arg0')])
    ## event-id.h (module 'core'): ns3::EventId::EventId() [constructor]
    cls.add_constructor([])
    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::Ptr<ns3::EventImpl> const & impl, uint64_t ts, uint32_t context, uint32_t uid) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
    ## event-id.h (module 'core'): void ns3::EventId::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetContext() const [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint64_t ns3::EventId::GetTs() const [member function]
    cls.add_method('GetTs', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): bool ns3::EventId::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): ns3::EventImpl * ns3::EventId::PeekEventImpl() const [member function]
    cls.add_method('PeekEventImpl', 
                   'ns3::EventImpl *', 
                   [], 
                   is_const=True)
    ## event-id.h (module 'core'): void ns3::EventId::Remove() [member function]
    cls.add_method('Remove', 
                   'void', 
                   [])
    return

def register_Ns3Hasher_methods(root_module, cls):
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hasher const &', 'arg0')])
    ## hash.h (module 'core'): ns3::Hasher::Hasher() [constructor]
    cls.add_constructor([])
    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Ptr<ns3::Hash::Implementation> hp) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Hash::Implementation >', 'hp')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(std::string const s) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('std::string const', 's')])
    ## hash.h (module 'core'): ns3::Hasher & ns3::Hasher::clear() [member function]
    cls.add_method('clear', 
                   'ns3::Hasher &', 
                   [])
    return

def register_Ns3Inet6SocketAddress_methods(root_module, cls):
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
    cls.add_constructor([param('ns3::Inet6SocketAddress const &', 'arg0')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv6'), param('uint16_t', 'port')])
    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6) [constructor]
    cls.add_constructor([param('char const *', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): static ns3::Inet6SocketAddress ns3::Inet6SocketAddress::ConvertFrom(ns3::Address const & addr) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Inet6SocketAddress', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): ns3::Ipv6Address ns3::Inet6SocketAddress::GetIpv6() const [member function]
    cls.add_method('GetIpv6', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): uint16_t ns3::Inet6SocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet6-socket-address.h (module 'network'): static bool ns3::Inet6SocketAddress::IsMatchingType(ns3::Address const & addr) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'addr')], 
                   is_static=True)
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetIpv6(ns3::Ipv6Address ipv6) [member function]
    cls.add_method('SetIpv6', 
                   'void', 
                   [param('ns3::Ipv6Address', 'ipv6')])
    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    return

def register_Ns3InetSocketAddress_methods(root_module, cls):
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
    cls.add_constructor([param('ns3::InetSocketAddress const &', 'arg0')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4, uint16_t port) [constructor]
    cls.add_constructor([param('char const *', 'ipv4'), param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4) [constructor]
    cls.add_constructor([param('char const *', 'ipv4')])
    ## inet-socket-address.h (module 'network'): static ns3::InetSocketAddress ns3::InetSocketAddress::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::InetSocketAddress', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): ns3::Ipv4Address ns3::InetSocketAddress::GetIpv4() const [member function]
    cls.add_method('GetIpv4', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): uint16_t ns3::InetSocketAddress::GetPort() const [member function]
    cls.add_method('GetPort', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): uint8_t ns3::InetSocketAddress::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## inet-socket-address.h (module 'network'): static bool ns3::InetSocketAddress::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetIpv4(ns3::Ipv4Address address) [member function]
    cls.add_method('SetIpv4', 
                   'void', 
                   [param('ns3::Ipv4Address', 'address')])
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetPort(uint16_t port) [member function]
    cls.add_method('SetPort', 
                   'void', 
                   [param('uint16_t', 'port')])
    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    return

def register_Ns3IntToType__0_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 0 > const &', 'arg0')])
    return

def register_Ns3IntToType__1_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 1 > const &', 'arg0')])
    return

def register_Ns3IntToType__2_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 2 > const &', 'arg0')])
    return

def register_Ns3IntToType__3_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 3 > const &', 'arg0')])
    return

def register_Ns3IntToType__4_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 4 > const &', 'arg0')])
    return

def register_Ns3IntToType__5_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 5 > const &', 'arg0')])
    return

def register_Ns3IntToType__6_methods(root_module, cls):
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType() [constructor]
    cls.add_constructor([])
    ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntToType< 6 > const &', 'arg0')])
    return

def register_Ns3Ipv4Address_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(uint32_t address) [constructor]
    cls.add_constructor([param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::CombineMask(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('CombineMask', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv4Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Address::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::GetSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('GetSubnetDirectedBroadcast', 
                   'ns3::Ipv4Address', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsAny() const [member function]
    cls.add_method('IsAny', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalMulticast() const [member function]
    cls.add_method('IsLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalhost() const [member function]
    cls.add_method('IsLocalhost', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static bool ns3::Ipv4Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
    cls.add_method('IsSubnetDirectedBroadcast', 
                   'bool', 
                   [param('ns3::Ipv4Mask const &', 'mask')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(uint32_t address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'address')])
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    return

def register_Ns3Ipv4AddressHash_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash(ns3::Ipv4AddressHash const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressHash const &', 'arg0')])
    ## ipv4-address.h (module 'network'): size_t ns3::Ipv4AddressHash::operator()(ns3::Ipv4Address const & x) const [member operator]
    cls.add_method('operator()', 
                   'size_t', 
                   [param('ns3::Ipv4Address const &', 'x')], 
                   custom_name='__call__', is_const=True)
    return

def register_Ns3Ipv4Mask_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(uint32_t mask) [constructor]
    cls.add_constructor([param('uint32_t', 'mask')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(char const * mask) [constructor]
    cls.add_constructor([param('char const *', 'mask')])
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::Get() const [member function]
    cls.add_method('Get', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::GetInverse() const [member function]
    cls.add_method('GetInverse', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): uint16_t ns3::Ipv4Mask::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_static=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsMatch(ns3::Ipv4Address a, ns3::Ipv4Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv4Address', 'a'), param('ns3::Ipv4Address', 'b')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Set(uint32_t mask) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint32_t', 'mask')])
    return

def register_Ns3Ipv6Address_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(char const * address) [constructor]
    cls.add_constructor([param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(uint8_t * address) [constructor]
    cls.add_constructor([param('uint8_t *', 'address')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const * addr) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
    cls.add_method('CombinePrefix', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::Deserialize(uint8_t const * buf) [member function]
    cls.add_method('Deserialize', 
                   'ns3::Ipv6Address', 
                   [param('uint8_t const *', 'buf')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllHostsMulticast() [member function]
    cls.add_method('GetAllHostsMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllNodesMulticast() [member function]
    cls.add_method('GetAllNodesMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllRoutersMulticast() [member function]
    cls.add_method('GetAllRoutersMulticast', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAny() [member function]
    cls.add_method('GetAny', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv6Address::GetIpv4MappedAddress() const [member function]
    cls.add_method('GetIpv4MappedAddress', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
    cls.add_method('HasPrefix', 
                   'bool', 
                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllNodesMulticast() const [member function]
    cls.add_method('IsAllNodesMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllRoutersMulticast() const [member function]
    cls.add_method('IsAllRoutersMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAny() const [member function]
    cls.add_method('IsAny', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsDocumentation() const [member function]
    cls.add_method('IsDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsIpv4MappedAddress() const [member function]
    cls.add_method('IsIpv4MappedAddress', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocal() const [member function]
    cls.add_method('IsLinkLocal', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocalMulticast() const [member function]
    cls.add_method('IsLinkLocalMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLocalhost() const [member function]
    cls.add_method('IsLocalhost', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static bool ns3::Ipv6Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsSolicitedMulticast() const [member function]
    cls.add_method('IsSolicitedMulticast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Prefix prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Prefix', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac16Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac48Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac64Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
    cls.add_method('MakeAutoconfiguredAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac16Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac16Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac48Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac48Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac64Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac64Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Mac8Address', 'mac')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeIpv4MappedAddress(ns3::Ipv4Address addr) [member function]
    cls.add_method('MakeIpv4MappedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv4Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeSolicitedAddress(ns3::Ipv6Address addr) [member function]
    cls.add_method('MakeSolicitedAddress', 
                   'ns3::Ipv6Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Serialize(uint8_t * buf) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(char const * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('char const *', 'address')])
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(uint8_t * address) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint8_t *', 'address')])
    return

def register_Ns3Ipv6AddressHash_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash(ns3::Ipv6AddressHash const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressHash const &', 'arg0')])
    ## ipv6-address.h (module 'network'): size_t ns3::Ipv6AddressHash::operator()(ns3::Ipv6Address const & x) const [member operator]
    cls.add_method('operator()', 
                   'size_t', 
                   [param('ns3::Ipv6Address const &', 'x')], 
                   custom_name='__call__', is_const=True)
    return

def register_Ns3Ipv6Prefix_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix) [constructor]
    cls.add_constructor([param('uint8_t *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix) [constructor]
    cls.add_constructor([param('char const *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
    cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
    cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t prefix) [constructor]
    cls.add_constructor([param('uint8_t', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const * prefix) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const *', 'prefix')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Prefix::ConvertToIpv6Address() const [member function]
    cls.add_method('ConvertToIpv6Address', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::GetBytes(uint8_t * buf) const [member function]
    cls.add_method('GetBytes', 
                   'void', 
                   [param('uint8_t *', 'buf')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetLoopback() [member function]
    cls.add_method('GetLoopback', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
    cls.add_method('GetMinimumPrefixLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetOnes() [member function]
    cls.add_method('GetOnes', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetPrefixLength() const [member function]
    cls.add_method('GetPrefixLength', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetZero() [member function]
    cls.add_method('GetZero', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_static=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsMatch(ns3::Ipv6Address a, ns3::Ipv6Address b) const [member function]
    cls.add_method('IsMatch', 
                   'bool', 
                   [param('ns3::Ipv6Address', 'a'), param('ns3::Ipv6Address', 'b')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
    cls.add_method('SetPrefixLength', 
                   'void', 
                   [param('uint8_t', 'prefixLength')])
    return

def register_Ns3LogComponent_methods(root_module, cls):
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(ns3::LogComponent const & arg0) [constructor]
    cls.add_constructor([param('ns3::LogComponent const &', 'arg0')])
    ## log.h (module 'core'): ns3::LogComponent::LogComponent(std::string const & name, std::string const & file, ns3::LogLevel const mask=::ns3::LogLevel::LOG_NONE) [constructor]
    cls.add_constructor([param('std::string const &', 'name'), param('std::string const &', 'file'), param('ns3::LogLevel const', 'mask', default_value='::ns3::LogLevel::LOG_NONE')])
    ## log.h (module 'core'): void ns3::LogComponent::Disable(ns3::LogLevel const level) [member function]
    cls.add_method('Disable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): void ns3::LogComponent::Enable(ns3::LogLevel const level) [member function]
    cls.add_method('Enable', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    ## log.h (module 'core'): std::string ns3::LogComponent::File() const [member function]
    cls.add_method('File', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): static ns3::LogComponent::ComponentList * ns3::LogComponent::GetComponentList() [member function]
    cls.add_method('GetComponentList', 
                   'ns3::LogComponent::ComponentList *', 
                   [], 
                   is_static=True)
    ## log.h (module 'core'): static std::string ns3::LogComponent::GetLevelLabel(ns3::LogLevel const level) [member function]
    cls.add_method('GetLevelLabel', 
                   'std::string', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_static=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsEnabled(ns3::LogLevel const level) const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [param('ns3::LogLevel const', 'level')], 
                   is_const=True)
    ## log.h (module 'core'): bool ns3::LogComponent::IsNoneEnabled() const [member function]
    cls.add_method('IsNoneEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): char const * ns3::LogComponent::Name() const [member function]
    cls.add_method('Name', 
                   'char const *', 
                   [], 
                   is_const=True)
    ## log.h (module 'core'): void ns3::LogComponent::SetMask(ns3::LogLevel const level) [member function]
    cls.add_method('SetMask', 
                   'void', 
                   [param('ns3::LogLevel const', 'level')])
    return

def register_Ns3Mac48Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<')
    cls.add_output_stream_operator()
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
    cls.add_constructor([param('char const *', 'str')])
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac48Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'buffer')])
    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'buffer')], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv4Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Mac48Address', 
                   [param('ns3::Ipv6Address', 'address')], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
    cls.add_method('GetMulticast6Prefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
    cls.add_method('GetMulticastPrefix', 
                   'ns3::Mac48Address', 
                   [], 
                   is_static=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
    cls.add_method('IsGroup', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3Mac8Address_methods(root_module, cls):
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
    cls.add_constructor([])
    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
    cls.add_constructor([param('uint8_t', 'addr')])
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
    cls.add_method('Allocate', 
                   'ns3::Mac8Address', 
                   [], 
                   is_static=True)
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
    cls.add_method('ConvertFrom', 
                   'ns3::Mac8Address', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('uint8_t const *', 'pBuffer')])
    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
    cls.add_method('CopyTo', 
                   'void', 
                   [param('uint8_t *', 'pBuffer')], 
                   is_const=True)
    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Mac8Address', 
                   [], 
                   is_static=True)
    ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
    cls.add_method('IsMatchingType', 
                   'bool', 
                   [param('ns3::Address const &', 'address')], 
                   is_static=True)
    return

def register_Ns3NetDeviceContainer_methods(root_module, cls):
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'arg0')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer() [constructor]
    cls.add_constructor([])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::Ptr<ns3::NetDevice> dev) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::NetDevice >', 'dev')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(std::string devName) [constructor]
    cls.add_constructor([param('std::string', 'devName')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & a, ns3::NetDeviceContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NetDeviceContainer const &', 'a'), param('ns3::NetDeviceContainer const &', 'b')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::NetDeviceContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NetDeviceContainer', 'other')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## net-device-container.h (module 'network'): void ns3::NetDeviceContainer::Add(std::string deviceName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'deviceName')])
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::NetDeviceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::NetDeviceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## net-device-container.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::NetDeviceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## net-device-container.h (module 'network'): uint32_t ns3::NetDeviceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3NodeContainer_methods(root_module, cls):
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'arg0')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer() [constructor]
    cls.add_constructor([])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::Ptr<ns3::Node> node) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(std::string nodeName) [constructor]
    cls.add_constructor([param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(uint32_t n, uint32_t systemId=0) [constructor]
    cls.add_constructor([param('uint32_t', 'n'), param('uint32_t', 'systemId', default_value='0')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd')])
    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d, ns3::NodeContainer const & e) [constructor]
    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd'), param('ns3::NodeContainer const &', 'e')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::NodeContainer other) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::NodeContainer', 'other')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(std::string nodeName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'nodeName')])
    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::NodeContainer::Iterator', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
    cls.add_method('Contains', 
                   'bool', 
                   [param('uint32_t', 'id')], 
                   is_const=True)
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n')])
    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n, uint32_t systemId) [member function]
    cls.add_method('Create', 
                   'void', 
                   [param('uint32_t', 'n'), param('uint32_t', 'systemId')])
    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::NodeContainer::Iterator', 
                   [], 
                   is_const=True)
    ## node-container.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NodeContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::Node >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## node-container.h (module 'network'): static ns3::NodeContainer ns3::NodeContainer::GetGlobal() [member function]
    cls.add_method('GetGlobal', 
                   'ns3::NodeContainer', 
                   [], 
                   is_static=True)
    ## node-container.h (module 'network'): uint32_t ns3::NodeContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    return

def register_Ns3ObjectBase_methods(root_module, cls):
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]
    cls.add_constructor([])
    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::GetAttribute(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): bool ns3::ObjectBase::GetAttributeFailSafe(std::string name, ns3::AttributeValue & value) const [member function]
    cls.add_method('GetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
                   is_const=True)
    ## object-base.h (module 'core'): ns3::TypeId ns3::ObjectBase::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## object-base.h (module 'core'): static ns3::TypeId ns3::ObjectBase::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object-base.h (module 'core'): void ns3::ObjectBase::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::SetAttributeFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttributeFailSafe', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceConnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnect', 
                   'bool', 
                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
    cls.add_method('TraceDisconnectWithoutContext', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
    ## object-base.h (module 'core'): void ns3::ObjectBase::ConstructSelf(ns3::AttributeConstructionList const & attributes) [member function]
    cls.add_method('ConstructSelf', 
                   'void', 
                   [param('ns3::AttributeConstructionList const &', 'attributes')], 
                   visibility='protected')
    ## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]
    cls.add_method('NotifyConstructionCompleted', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ObjectDeleter_methods(root_module, cls):
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectDeleter const &', 'arg0')])
    ## object.h (module 'core'): static void ns3::ObjectDeleter::Delete(ns3::Object * object) [member function]
    cls.add_method('Delete', 
                   'void', 
                   [param('ns3::Object *', 'object')], 
                   is_static=True)
    return

def register_Ns3ObjectFactory_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
    cls.add_method('IsTypeIdSet', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::Set() [member function]
    cls.add_method('Set', 
                   'void', 
                   [])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(ns3::TypeId tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('ns3::TypeId', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(char const * tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('char const *', 'tid')])
    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(std::string tid) [member function]
    cls.add_method('SetTypeId', 
                   'void', 
                   [param('std::string', 'tid')])
    return

def register_Ns3PacketMetadata_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
    cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::PacketMetadata const &', 'o')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [param('ns3::Buffer', 'buffer')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::PacketMetadata', 
                   [param('uint32_t', 'start'), param('uint32_t', 'end')], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'end')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'start')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
    cls.add_method('RemoveHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
    cls.add_method('RemoveTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3PacketMetadataItem_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
    cls.add_constructor([])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
    cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
    cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
    cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
    cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
    cls.add_instance_attribute('isFragment', 'bool', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
    cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
    return

def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
    cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
    ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketMetadata::Item', 
                   [])
    return

def register_Ns3PacketTagIterator_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
    ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::PacketTagIterator::Item', 
                   [])
    return

def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
    ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
    ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
    cls.add_method('GetTag', 
                   'void', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    return

def register_Ns3PacketTagList_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
    cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
    cls.add_method('Head', 
                   'ns3::PacketTagList::TagData const *', 
                   [], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
    cls.add_method('Peek', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
    cls.add_method('Remove', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
    cls.add_method('RemoveAll', 
                   'void', 
                   [])
    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
    cls.add_method('Replace', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3PacketTagListTagData_methods(root_module, cls):
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
    cls.add_constructor([])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
    cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
    cls.add_instance_attribute('count', 'uint32_t', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
    cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
    cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
    return

def register_Ns3ParameterLogger_methods(root_module, cls):
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(ns3::ParameterLogger const & arg0) [constructor]
    cls.add_constructor([param('ns3::ParameterLogger const &', 'arg0')])
    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(std::ostream & os) [constructor]
    cls.add_constructor([param('std::ostream &', 'os')])
    return

def register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > const &', 'o')])
    return

def register_Ns3Simulator_methods(root_module, cls):
    ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Simulator const &', 'arg0')])
    ## simulator.h (module 'core'): static void ns3::Simulator::Cancel(ns3::EventId const & id) [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Destroy() [member function]
    cls.add_method('Destroy', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetContext() [member function]
    cls.add_method('GetContext', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetDelayLeft(ns3::EventId const & id) [member function]
    cls.add_method('GetDelayLeft', 
                   'ns3::Time', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
    cls.add_method('GetEventCount', 
                   'uint64_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Ptr<ns3::SimulatorImpl> ns3::Simulator::GetImplementation() [member function]
    cls.add_method('GetImplementation', 
                   'ns3::Ptr< ns3::SimulatorImpl >', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetMaximumSimulationTime() [member function]
    cls.add_method('GetMaximumSimulationTime', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetSystemId() [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsExpired(ns3::EventId const & id) [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static bool ns3::Simulator::IsFinished() [member function]
    cls.add_method('IsFinished', 
                   'bool', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::Now() [member function]
    cls.add_method('Now', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Remove(ns3::EventId const & id) [member function]
    cls.add_method('Remove', 
                   'void', 
                   [param('ns3::EventId const &', 'id')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetImplementation(ns3::Ptr<ns3::SimulatorImpl> impl) [member function]
    cls.add_method('SetImplementation', 
                   'void', 
                   [param('ns3::Ptr< ns3::SimulatorImpl >', 'impl')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::SetScheduler(ns3::ObjectFactory schedulerFactory) [member function]
    cls.add_method('SetScheduler', 
                   'void', 
                   [param('ns3::ObjectFactory', 'schedulerFactory')], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_static=True)
    ## simulator.h (module 'core'): static void ns3::Simulator::Stop(ns3::Time const & delay) [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_static=True)
    return

def register_Ns3Tag_methods(root_module, cls):
    ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
    cls.add_constructor([])
    ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
    cls.add_constructor([param('ns3::Tag const &', 'arg0')])
    ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TagBuffer_methods(root_module, cls):
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
    cls.add_constructor([param('ns3::TagBuffer const &', 'arg0')])
    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(uint8_t * start, uint8_t * end) [constructor]
    cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::CopyFrom(ns3::TagBuffer o) [member function]
    cls.add_method('CopyFrom', 
                   'void', 
                   [param('ns3::TagBuffer', 'o')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Read(uint8_t * buffer, uint32_t size) [member function]
    cls.add_method('Read', 
                   'void', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): double ns3::TagBuffer::ReadDouble() [member function]
    cls.add_method('ReadDouble', 
                   'double', 
                   [])
    ## tag-buffer.h (module 'network'): uint16_t ns3::TagBuffer::ReadU16() [member function]
    cls.add_method('ReadU16', 
                   'uint16_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint32_t ns3::TagBuffer::ReadU32() [member function]
    cls.add_method('ReadU32', 
                   'uint32_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint64_t ns3::TagBuffer::ReadU64() [member function]
    cls.add_method('ReadU64', 
                   'uint64_t', 
                   [])
    ## tag-buffer.h (module 'network'): uint8_t ns3::TagBuffer::ReadU8() [member function]
    cls.add_method('ReadU8', 
                   'uint8_t', 
                   [])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::TrimAtEnd(uint32_t trim) [member function]
    cls.add_method('TrimAtEnd', 
                   'void', 
                   [param('uint32_t', 'trim')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Write(uint8_t const * buffer, uint32_t size) [member function]
    cls.add_method('Write', 
                   'void', 
                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteDouble(double v) [member function]
    cls.add_method('WriteDouble', 
                   'void', 
                   [param('double', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
    cls.add_method('WriteU16', 
                   'void', 
                   [param('uint16_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
    cls.add_method('WriteU32', 
                   'void', 
                   [param('uint32_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU64(uint64_t v) [member function]
    cls.add_method('WriteU64', 
                   'void', 
                   [param('uint64_t', 'v')])
    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU8(uint8_t v) [member function]
    cls.add_method('WriteU8', 
                   'void', 
                   [param('uint8_t', 'v')])
    return

def register_Ns3Time_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
    cls.add_output_stream_operator()
    ## nstime.h (module 'core'): ns3::Time::Time() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'o')])
    ## nstime.h (module 'core'): ns3::Time::Time(double v) [constructor]
    cls.add_constructor([param('double', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(int v) [constructor]
    cls.add_constructor([param('int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long int v) [constructor]
    cls.add_constructor([param('long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long int v) [constructor]
    cls.add_constructor([param('long long int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(unsigned int v) [constructor]
    cls.add_constructor([param('unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long unsigned int v) [constructor]
    cls.add_constructor([param('long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(long long unsigned int v) [constructor]
    cls.add_constructor([param('long long unsigned int', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(ns3::int64x64_t const & v) [constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'v')])
    ## nstime.h (module 'core'): ns3::Time::Time(std::string const & s) [constructor]
    cls.add_constructor([param('std::string const &', 's')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit ns3::Time::As(ns3::Time::Unit const unit=::ns3::Time::Unit::AUTO) const [member function]
    cls.add_method('As', 
                   'ns3::TimeWithUnit', 
                   [param('ns3::Time::Unit const', 'unit', default_value='::ns3::Time::Unit::AUTO')], 
                   is_const=True)
    ## nstime.h (module 'core'): int ns3::Time::Compare(ns3::Time const & o) const [member function]
    cls.add_method('Compare', 
                   'int', 
                   [param('ns3::Time const &', 'o')], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value, ns3::Time::Unit unit) [member function]
    cls.add_method('From', 
                   'ns3::Time', 
                   [param('ns3::int64x64_t const &', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromDouble(double value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromDouble', 
                   'ns3::Time', 
                   [param('double', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromInteger(uint64_t value, ns3::Time::Unit unit) [member function]
    cls.add_method('FromInteger', 
                   'ns3::Time', 
                   [param('uint64_t', 'value'), param('ns3::Time::Unit', 'unit')], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDays() const [member function]
    cls.add_method('GetDays', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetFemtoSeconds() const [member function]
    cls.add_method('GetFemtoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetHours() const [member function]
    cls.add_method('GetHours', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetInteger() const [member function]
    cls.add_method('GetInteger', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMicroSeconds() const [member function]
    cls.add_method('GetMicroSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetMilliSeconds() const [member function]
    cls.add_method('GetMilliSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetMinutes() const [member function]
    cls.add_method('GetMinutes', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetNanoSeconds() const [member function]
    cls.add_method('GetNanoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetPicoSeconds() const [member function]
    cls.add_method('GetPicoSeconds', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time::Unit ns3::Time::GetResolution() [member function]
    cls.add_method('GetResolution', 
                   'ns3::Time::Unit', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]
    cls.add_method('GetSeconds', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::GetTimeStep() const [member function]
    cls.add_method('GetTimeStep', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::GetYears() const [member function]
    cls.add_method('GetYears', 
                   'double', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsNegative() const [member function]
    cls.add_method('IsNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsPositive() const [member function]
    cls.add_method('IsPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyNegative() const [member function]
    cls.add_method('IsStrictlyNegative', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyPositive() const [member function]
    cls.add_method('IsStrictlyPositive', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): bool ns3::Time::IsZero() const [member function]
    cls.add_method('IsZero', 
                   'bool', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Max() [member function]
    cls.add_method('Max', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Min() [member function]
    cls.add_method('Min', 
                   'ns3::Time', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): ns3::Time ns3::Time::RoundTo(ns3::Time::Unit unit) const [member function]
    cls.add_method('RoundTo', 
                   'ns3::Time', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): static void ns3::Time::SetResolution(ns3::Time::Unit resolution) [member function]
    cls.add_method('SetResolution', 
                   'void', 
                   [param('ns3::Time::Unit', 'resolution')], 
                   is_static=True)
    ## nstime.h (module 'core'): static bool ns3::Time::StaticInit() [member function]
    cls.add_method('StaticInit', 
                   'bool', 
                   [], 
                   is_static=True)
    ## nstime.h (module 'core'): ns3::int64x64_t ns3::Time::To(ns3::Time::Unit unit) const [member function]
    cls.add_method('To', 
                   'ns3::int64x64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): double ns3::Time::ToDouble(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToDouble', 
                   'double', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    ## nstime.h (module 'core'): int64_t ns3::Time::ToInteger(ns3::Time::Unit unit) const [member function]
    cls.add_method('ToInteger', 
                   'int64_t', 
                   [param('ns3::Time::Unit', 'unit')], 
                   is_const=True)
    return

def register_Ns3TimeWithUnit_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimeWithUnit const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::Time const time, ns3::Time::Unit const unit) [constructor]
    cls.add_constructor([param('ns3::Time const', 'time'), param('ns3::Time::Unit const', 'unit')])
    return

def register_Ns3Timer_methods(root_module, cls):
    ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [constructor]
    cls.add_constructor([param('ns3::Timer const &', 'arg0')])
    ## timer.h (module 'core'): ns3::Timer::Timer() [constructor]
    cls.add_constructor([])
    ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer::DestroyPolicy destroyPolicy) [constructor]
    cls.add_constructor([param('ns3::Timer::DestroyPolicy', 'destroyPolicy')])
    ## timer.h (module 'core'): void ns3::Timer::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## timer.h (module 'core'): ns3::Time ns3::Timer::GetDelay() const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): ns3::Time ns3::Timer::GetDelayLeft() const [member function]
    cls.add_method('GetDelayLeft', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): ns3::Timer::State ns3::Timer::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Timer::State', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): bool ns3::Timer::IsSuspended() const [member function]
    cls.add_method('IsSuspended', 
                   'bool', 
                   [], 
                   is_const=True)
    ## timer.h (module 'core'): void ns3::Timer::Remove() [member function]
    cls.add_method('Remove', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Resume() [member function]
    cls.add_method('Resume', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Schedule() [member function]
    cls.add_method('Schedule', 
                   'void', 
                   [])
    ## timer.h (module 'core'): void ns3::Timer::Schedule(ns3::Time delay) [member function]
    cls.add_method('Schedule', 
                   'void', 
                   [param('ns3::Time', 'delay')])
    ## timer.h (module 'core'): void ns3::Timer::SetDelay(ns3::Time const & delay) [member function]
    cls.add_method('SetDelay', 
                   'void', 
                   [param('ns3::Time const &', 'delay')])
    ## timer.h (module 'core'): void ns3::Timer::Suspend() [member function]
    cls.add_method('Suspend', 
                   'void', 
                   [])
    return

def register_Ns3TimerImpl_methods(root_module, cls):
    ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl() [constructor]
    cls.add_constructor([])
    ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimerImpl const &', 'arg0')])
    ## timer-impl.h (module 'core'): void ns3::TimerImpl::Invoke() [member function]
    cls.add_method('Invoke', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## timer-impl.h (module 'core'): ns3::EventId ns3::TimerImpl::Schedule(ns3::Time const & delay) [member function]
    cls.add_method('Schedule', 
                   'ns3::EventId', 
                   [param('ns3::Time const &', 'delay')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TracedValue__Bool_methods(root_module, cls):
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue() [constructor]
    cls.add_constructor([])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & o) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'o')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(bool const & v) [constructor]
    cls.add_constructor([param('bool const &', 'v')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<bool>::TracedValue(ns3::TracedValue<bool> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< bool > const &', 'other')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): bool ns3::TracedValue<bool>::Get() const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [], 
                   is_const=True)
    ## traced-value.h (module 'core'): void ns3::TracedValue<bool>::Set(bool const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('bool const &', 'v')])
    return

def register_Ns3TracedValue__Double_methods(root_module, cls):
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue() [constructor]
    cls.add_constructor([])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'o')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(double const & v) [constructor]
    cls.add_constructor([param('double const &', 'v')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & other) [constructor]
    cls.add_constructor([param('ns3::TracedValue< double > const &', 'other')])
    ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(int const & other) [constructor]
    cls.add_constructor([param('int const &', 'other')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Connect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('ConnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
    cls.add_method('Disconnect', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'void', 
                   [param('ns3::CallbackBase const &', 'cb')])
    ## traced-value.h (module 'core'): double ns3::TracedValue<double>::Get() const [member function]
    cls.add_method('Get', 
                   'double', 
                   [], 
                   is_const=True)
    ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Set(double const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('double const &', 'v')])
    return

def register_Ns3TypeId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(char const * name) [constructor]
    cls.add_constructor([param('char const *', 'name')])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'o')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddAttribute', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
    cls.add_method('AddTraceSource', 
                   'ns3::TypeId', 
                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
    cls.add_method('GetAttribute', 
                   'ns3::TypeId::AttributeInformation', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
    cls.add_method('GetAttributeFullName', 
                   'std::string', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
    cls.add_method('GetAttributeN', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
    cls.add_method('GetConstructor', 
                   'ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetGroupName() const [member function]
    cls.add_method('GetGroupName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
    cls.add_method('GetHash', 
                   'ns3::TypeId::hash_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]
    cls.add_method('GetParent', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
    cls.add_method('GetRegistered', 
                   'ns3::TypeId', 
                   [param('uint16_t', 'i')], 
                   is_static=True)
    ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
    cls.add_method('GetRegisteredN', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
    cls.add_method('GetTraceSource', 
                   'ns3::TypeId::TraceSourceInformation', 
                   [param('std::size_t', 'i')], 
                   is_const=True)
    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
    cls.add_method('GetTraceSourceN', 
                   'std::size_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]
    cls.add_method('HasConstructor', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::HasParent() const [member function]
    cls.add_method('HasParent', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]
    cls.add_method('HideFromDocumentation', 
                   'ns3::TypeId', 
                   [])
    ## type-id.h (module 'core'): bool ns3::TypeId::IsChildOf(ns3::TypeId other) const [member function]
    cls.add_method('IsChildOf', 
                   'bool', 
                   [param('ns3::TypeId', 'other')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::LookupAttributeByName(std::string name, ns3::TypeId::AttributeInformation * info) const [member function]
    cls.add_method('LookupAttributeByName', 
                   'bool', 
                   [param('std::string', 'name'), param('ns3::TypeId::AttributeInformation *', 'info', transfer_ownership=False)], 
                   is_const=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
    cls.add_method('LookupByHash', 
                   'ns3::TypeId', 
                   [param('uint32_t', 'hash')], 
                   is_static=True)
    ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
    cls.add_method('LookupByHashFailSafe', 
                   'bool', 
                   [param('uint32_t', 'hash'), param('ns3::TypeId *', 'tid')], 
                   is_static=True)
    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByName(std::string name) [member function]
    cls.add_method('LookupByName', 
                   'ns3::TypeId', 
                   [param('std::string', 'name')], 
                   is_static=True)
    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
    cls.add_method('LookupTraceSourceByName', 
                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
                   [param('std::string', 'name')], 
                   is_const=True)
    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
    cls.add_method('LookupTraceSourceByName', 
                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
                   [param('std::string', 'name'), param('ns3::TypeId::TraceSourceInformation *', 'info')], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::MustHideFromDocumentation() const [member function]
    cls.add_method('MustHideFromDocumentation', 
                   'bool', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
    cls.add_method('SetAttributeInitialValue', 
                   'bool', 
                   [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]
    cls.add_method('SetGroupName', 
                   'ns3::TypeId', 
                   [param('std::string', 'groupName')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]
    cls.add_method('SetParent', 
                   'ns3::TypeId', 
                   [param('ns3::TypeId', 'tid')])
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetSize(std::size_t size) [member function]
    cls.add_method('SetSize', 
                   'ns3::TypeId', 
                   [param('std::size_t', 'size')])
    ## type-id.h (module 'core'): void ns3::TypeId::SetUid(uint16_t uid) [member function]
    cls.add_method('SetUid', 
                   'void', 
                   [param('uint16_t', 'uid')])
    return

def register_Ns3TypeIdAttributeInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeId::AttributeInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::AttributeAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]
    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
    cls.add_instance_attribute('flags', 'uint32_t', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]
    cls.add_instance_attribute('initialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]
    cls.add_instance_attribute('originalInitialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportLevel [variable]
    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportMsg [variable]
    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
    return

def register_Ns3TypeIdTraceSourceInformation_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeId::TraceSourceInformation const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]
    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::TraceSourceAccessor const >', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::callback [variable]
    cls.add_instance_attribute('callback', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::help [variable]
    cls.add_instance_attribute('help', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::name [variable]
    cls.add_instance_attribute('name', 'std::string', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportLevel [variable]
    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportMsg [variable]
    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
    return

def register_Ns3Vector2D_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('<=')
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D(double _x, double _y) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y')])
    ## vector.h (module 'core'): ns3::Vector2D::Vector2D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): double ns3::Vector2D::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): double ns3::Vector2D::GetLengthSquared() const [member function]
    cls.add_method('GetLengthSquared', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): ns3::Vector2D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector2D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    return

def register_Ns3Vector3D_methods(root_module, cls):
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('<')
    cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('>=')
    cls.add_binary_comparison_operator('>')
    cls.add_binary_comparison_operator('<=')
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D(double _x, double _y, double _z) [constructor]
    cls.add_constructor([param('double', '_x'), param('double', '_y'), param('double', '_z')])
    ## vector.h (module 'core'): ns3::Vector3D::Vector3D() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): double ns3::Vector3D::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): double ns3::Vector3D::GetLengthSquared() const [member function]
    cls.add_method('GetLengthSquared', 
                   'double', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): ns3::Vector3D::x [variable]
    cls.add_instance_attribute('x', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::y [variable]
    cls.add_instance_attribute('y', 'double', is_const=False)
    ## vector.h (module 'core'): ns3::Vector3D::z [variable]
    cls.add_instance_attribute('z', 'double', is_const=False)
    return

def register_Ns3Empty_methods(root_module, cls):
    ## empty.h (module 'core'): ns3::empty::empty() [constructor]
    cls.add_constructor([])
    ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
    cls.add_constructor([param('ns3::empty const &', 'arg0')])
    return

def register_Ns3Int64x64_t_methods(root_module, cls):
    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
    cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
    cls.add_binary_comparison_operator('!=')
    cls.add_binary_comparison_operator('<=')
    cls.add_binary_comparison_operator('>=')
    cls.add_output_stream_operator()
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('<')
    cls.add_binary_comparison_operator('>')
    cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
    cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
    cls.add_unary_numeric_operator('-')
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
    cls.add_constructor([])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
    cls.add_constructor([param('double const', 'value')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
    cls.add_constructor([param('long double const', 'value')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
    cls.add_constructor([param('int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
    cls.add_constructor([param('long int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
    cls.add_constructor([param('long long int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
    cls.add_constructor([param('unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
    cls.add_constructor([param('long unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
    cls.add_constructor([param('long long unsigned int const', 'v')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
    cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
    cls.add_constructor([param('ns3::int64x64_t const &', 'o')])
    ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
    cls.add_method('GetDouble', 
                   'double', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
    cls.add_method('GetHigh', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetInt() const [member function]
    cls.add_method('GetInt', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
    cls.add_method('GetLow', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
    cls.add_method('Invert', 
                   'ns3::int64x64_t', 
                   [param('uint64_t const', 'v')], 
                   is_static=True)
    ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
    cls.add_method('MulByInvert', 
                   'void', 
                   [param('ns3::int64x64_t const &', 'o')])
    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::Round() const [member function]
    cls.add_method('Round', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
    cls.add_static_attribute('implementation', 'ns3::int64x64_t::impl_type const', is_const=True)
    return

def register_Ns3Chunk_methods(root_module, cls):
    ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
    cls.add_constructor([])
    ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
    cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
                   is_virtual=True)
    ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3Header_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## header.h (module 'network'): ns3::Header::Header() [constructor]
    cls.add_constructor([])
    ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
    cls.add_constructor([param('ns3::Header const &', 'arg0')])
    ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3Object_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::Object() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): void ns3::Object::AggregateObject(ns3::Ptr<ns3::Object> other) [member function]
    cls.add_method('AggregateObject', 
                   'void', 
                   [param('ns3::Ptr< ns3::Object >', 'other')])
    ## object.h (module 'core'): void ns3::Object::Dispose() [member function]
    cls.add_method('Dispose', 
                   'void', 
                   [])
    ## object.h (module 'core'): ns3::Object::AggregateIterator ns3::Object::GetAggregateIterator() const [member function]
    cls.add_method('GetAggregateIterator', 
                   'ns3::Object::AggregateIterator', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::TypeId ns3::Object::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject() const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [], 
                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject(ns3::TypeId tid) const [member function]
    cls.add_method('GetObject', 
                   'ns3::Ptr< ns3::Object >', 
                   [param('ns3::TypeId', 'tid')], 
                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
    ## object.h (module 'core'): static ns3::TypeId ns3::Object::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## object.h (module 'core'): void ns3::Object::Initialize() [member function]
    cls.add_method('Initialize', 
                   'void', 
                   [])
    ## object.h (module 'core'): bool ns3::Object::IsInitialized() const [member function]
    cls.add_method('IsInitialized', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
    cls.add_constructor([param('ns3::Object const &', 'o')], 
                        visibility='protected')
    ## object.h (module 'core'): void ns3::Object::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## object.h (module 'core'): void ns3::Object::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## object.h (module 'core'): void ns3::Object::NotifyNewAggregate() [member function]
    cls.add_method('NotifyNewAggregate', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3ObjectAggregateIterator_methods(root_module, cls):
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
    cls.add_constructor([param('ns3::Object::AggregateIterator const &', 'arg0')])
    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator() [constructor]
    cls.add_constructor([])
    ## object.h (module 'core'): bool ns3::Object::AggregateIterator::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True)
    ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
    cls.add_method('Next', 
                   'ns3::Ptr< ns3::Object const >', 
                   [])
    return

def register_Ns3RandomVariableStream_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::RandomVariableStream::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::RandomVariableStream::RandomVariableStream() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetStream(int64_t stream) [member function]
    cls.add_method('SetStream', 
                   'void', 
                   [param('int64_t', 'stream')])
    ## random-variable-stream.h (module 'core'): int64_t ns3::RandomVariableStream::GetStream() const [member function]
    cls.add_method('GetStream', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): void ns3::RandomVariableStream::SetAntithetic(bool isAntithetic) [member function]
    cls.add_method('SetAntithetic', 
                   'void', 
                   [param('bool', 'isAntithetic')])
    ## random-variable-stream.h (module 'core'): bool ns3::RandomVariableStream::IsAntithetic() const [member function]
    cls.add_method('IsAntithetic', 
                   'bool', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::RandomVariableStream::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::RandomVariableStream::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## random-variable-stream.h (module 'core'): ns3::RngStream * ns3::RandomVariableStream::Peek() const [member function]
    cls.add_method('Peek', 
                   'ns3::RngStream *', 
                   [], 
                   is_const=True, visibility='protected')
    return

def register_Ns3SequentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::SequentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::SequentialRandomVariable::SequentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): ns3::Ptr<ns3::RandomVariableStream> ns3::SequentialRandomVariable::GetIncrement() const [member function]
    cls.add_method('GetIncrement', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetConsecutive() const [member function]
    cls.add_method('GetConsecutive', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::SequentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::SequentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter< ns3::AttributeAccessor > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter< ns3::AttributeChecker > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter< ns3::AttributeValue > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter< ns3::CallbackImplBase > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter< ns3::EventImpl > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter< ns3::Hash::Implementation > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter< ns3::OutputStreamWrapper > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter< ns3::TraceSourceAccessor > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBasicState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBasicState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBasicState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBasicState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBasicState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachineGrpBroadcastState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachineGrpBroadcastState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachineGrpBroadcastState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachineGrpBroadcastState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachineGrpBroadcastState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallMachinePrivateState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallMachinePrivateState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallMachinePrivateState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallMachinePrivateState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttCallTypeMachinePrivateState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttCallTypeMachinePrivateState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttCallTypeMachinePrivateState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttCallTypeMachinePrivateState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttCallTypeMachinePrivateState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOffNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOffNetworkFloorParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOffNetworkFloorParticipantState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOffNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOffNetworkFloorParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkCallMachineClientState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkCallMachineClientState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkCallMachineClientState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkCallMachineClientState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkCallMachineClientState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorArbitratorState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorArbitratorState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorArbitratorState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorArbitratorState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorArbitratorState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorDualControlState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorDualControlState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorDualControlState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorDualControlState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorDualControlState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorParticipantState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttOnNetworkFloorTowardsParticipantState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttOnNetworkFloorTowardsParticipantState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttOnNetworkFloorTowardsParticipantState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttOnNetworkFloorTowardsParticipantState > > const &', 'o')])
    return

def register_Ns3SimpleRefCount__Ns3PscMcpttServerCallMachineGroupPrearrangedState_Ns3Empty_Ns3DefaultDeleter__lt__ns3PscMcpttServerCallMachineGroupPrearrangedState__gt___methods(root_module, cls):
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >::SimpleRefCount() [constructor]
    cls.add_constructor([])
    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> >::SimpleRefCount(ns3::SimpleRefCount<ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter<ns3::psc::McpttServerCallMachineGroupPrearrangedState> > const & o) [constructor]
    cls.add_constructor([param('ns3::SimpleRefCount< ns3::psc::McpttServerCallMachineGroupPrearrangedState, ns3::empty, ns3::DefaultDeleter< ns3::psc::McpttServerCallMachineGroupPrearrangedState > > const &', 'o')])
    return

def register_Ns3Socket_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
    cls.add_constructor([param('ns3::Socket const &', 'arg0')])
    ## socket.h (module 'network'): ns3::Socket::Socket() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): int ns3::Socket::Bind(ns3::Address const & address) [member function]
    cls.add_method('Bind', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind() [member function]
    cls.add_method('Bind', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Bind6() [member function]
    cls.add_method('Bind6', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
    cls.add_method('BindToNetDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')], 
                   is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Close() [member function]
    cls.add_method('Close', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Connect(ns3::Address const & address) [member function]
    cls.add_method('Connect', 
                   'int', 
                   [param('ns3::Address const &', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::Ptr<ns3::Socket> ns3::Socket::CreateSocket(ns3::Ptr<ns3::Node> node, ns3::TypeId tid) [member function]
    cls.add_method('CreateSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::TypeId', 'tid')], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::Socket::GetAllowBroadcast() const [member function]
    cls.add_method('GetAllowBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Socket::GetBoundNetDevice() [member function]
    cls.add_method('GetBoundNetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [])
    ## socket.h (module 'network'): ns3::Socket::SocketErrno ns3::Socket::GetErrno() const [member function]
    cls.add_method('GetErrno', 
                   'ns3::Socket::SocketErrno', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTos() const [member function]
    cls.add_method('GetIpTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTtl() const [member function]
    cls.add_method('GetIpTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6HopLimit() const [member function]
    cls.add_method('GetIpv6HopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6Tclass() const [member function]
    cls.add_method('GetIpv6Tclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Socket::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::GetPeerName(ns3::Address & address) const [member function]
    cls.add_method('GetPeerName', 
                   'int', 
                   [param('ns3::Address &', 'address')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::Socket::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetRxAvailable() const [member function]
    cls.add_method('GetRxAvailable', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::GetSockName(ns3::Address & address) const [member function]
    cls.add_method('GetSockName', 
                   'int', 
                   [param('ns3::Address &', 'address')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Socket::SocketType ns3::Socket::GetSocketType() const [member function]
    cls.add_method('GetSocketType', 
                   'ns3::Socket::SocketType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::Socket::GetTxAvailable() const [member function]
    cls.add_method('GetTxAvailable', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::Socket::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): static uint8_t ns3::Socket::IpTos2Priority(uint8_t ipTos) [member function]
    cls.add_method('IpTos2Priority', 
                   'uint8_t', 
                   [param('uint8_t', 'ipTos')], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector<ns3::Ipv6Address, std::allocator<ns3::Ipv6Address> > sourceAddresses) [member function]
    cls.add_method('Ipv6JoinGroup', 
                   'void', 
                   [param('ns3::Ipv6Address', 'address'), param('ns3::Socket::Ipv6MulticastFilterMode', 'filterMode'), param('std::vector< ns3::Ipv6Address >', 'sourceAddresses')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address) [member function]
    cls.add_method('Ipv6JoinGroup', 
                   'void', 
                   [param('ns3::Ipv6Address', 'address')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::Ipv6LeaveGroup() [member function]
    cls.add_method('Ipv6LeaveGroup', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTos() const [member function]
    cls.add_method('IsIpRecvTos', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTtl() const [member function]
    cls.add_method('IsIpRecvTtl', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvHopLimit() const [member function]
    cls.add_method('IsIpv6RecvHopLimit', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvTclass() const [member function]
    cls.add_method('IsIpv6RecvTclass', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): bool ns3::Socket::IsRecvPktInfo() const [member function]
    cls.add_method('IsRecvPktInfo', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): int ns3::Socket::Listen() [member function]
    cls.add_method('Listen', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv(uint32_t maxSize, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv() [member function]
    cls.add_method('Recv', 
                   'ns3::Ptr< ns3::Packet >', 
                   [])
    ## socket.h (module 'network'): int ns3::Socket::Recv(uint8_t * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Recv', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::RecvFrom(uint8_t * buf, uint32_t size, uint32_t flags, ns3::Address & fromAddress) [member function]
    cls.add_method('RecvFrom', 
                   'int', 
                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')])
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## socket.h (module 'network'): int ns3::Socket::Send(uint8_t const * buf, uint32_t size, uint32_t flags) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
    ## socket.h (module 'network'): int ns3::Socket::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::SendTo(uint8_t const * buf, uint32_t size, uint32_t flags, ns3::Address const & address) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address const &', 'address')])
    ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
    cls.add_method('SetAcceptCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionRequest'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'newConnectionCreated')])
    ## socket.h (module 'network'): bool ns3::Socket::SetAllowBroadcast(bool allowBroadcast) [member function]
    cls.add_method('SetAllowBroadcast', 
                   'bool', 
                   [param('bool', 'allowBroadcast')], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetCloseCallbacks(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> normalClose, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> errorClose) [member function]
    cls.add_method('SetCloseCallbacks', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'normalClose'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'errorClose')])
    ## socket.h (module 'network'): void ns3::Socket::SetConnectCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionSucceeded, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionFailed) [member function]
    cls.add_method('SetConnectCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionSucceeded'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionFailed')])
    ## socket.h (module 'network'): void ns3::Socket::SetDataSentCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> dataSent) [member function]
    cls.add_method('SetDataSentCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'dataSent')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTos(bool ipv4RecvTos) [member function]
    cls.add_method('SetIpRecvTos', 
                   'void', 
                   [param('bool', 'ipv4RecvTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTtl(bool ipv4RecvTtl) [member function]
    cls.add_method('SetIpRecvTtl', 
                   'void', 
                   [param('bool', 'ipv4RecvTtl')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTos(uint8_t ipTos) [member function]
    cls.add_method('SetIpTos', 
                   'void', 
                   [param('uint8_t', 'ipTos')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpTtl(uint8_t ipTtl) [member function]
    cls.add_method('SetIpTtl', 
                   'void', 
                   [param('uint8_t', 'ipTtl')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6HopLimit(uint8_t ipHopLimit) [member function]
    cls.add_method('SetIpv6HopLimit', 
                   'void', 
                   [param('uint8_t', 'ipHopLimit')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvHopLimit(bool ipv6RecvHopLimit) [member function]
    cls.add_method('SetIpv6RecvHopLimit', 
                   'void', 
                   [param('bool', 'ipv6RecvHopLimit')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvTclass(bool ipv6RecvTclass) [member function]
    cls.add_method('SetIpv6RecvTclass', 
                   'void', 
                   [param('bool', 'ipv6RecvTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetIpv6Tclass(int ipTclass) [member function]
    cls.add_method('SetIpv6Tclass', 
                   'void', 
                   [param('int', 'ipTclass')])
    ## socket.h (module 'network'): void ns3::Socket::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receivedData) [member function]
    cls.add_method('SetRecvCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receivedData')])
    ## socket.h (module 'network'): void ns3::Socket::SetRecvPktInfo(bool flag) [member function]
    cls.add_method('SetRecvPktInfo', 
                   'void', 
                   [param('bool', 'flag')])
    ## socket.h (module 'network'): void ns3::Socket::SetSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCb) [member function]
    cls.add_method('SetSendCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCb')])
    ## socket.h (module 'network'): int ns3::Socket::ShutdownRecv() [member function]
    cls.add_method('ShutdownRecv', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): int ns3::Socket::ShutdownSend() [member function]
    cls.add_method('ShutdownSend', 
                   'int', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::Socket::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTtl() const [member function]
    cls.add_method('IsManualIpTtl', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6HopLimit() const [member function]
    cls.add_method('IsManualIpv6HopLimit', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6Tclass() const [member function]
    cls.add_method('IsManualIpv6Tclass', 
                   'bool', 
                   [], 
                   is_const=True, visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionFailed() [member function]
    cls.add_method('NotifyConnectionFailed', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): bool ns3::Socket::NotifyConnectionRequest(ns3::Address const & from) [member function]
    cls.add_method('NotifyConnectionRequest', 
                   'bool', 
                   [param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionSucceeded() [member function]
    cls.add_method('NotifyConnectionSucceeded', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataRecv() [member function]
    cls.add_method('NotifyDataRecv', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyDataSent(uint32_t size) [member function]
    cls.add_method('NotifyDataSent', 
                   'void', 
                   [param('uint32_t', 'size')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyErrorClose() [member function]
    cls.add_method('NotifyErrorClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNewConnectionCreated(ns3::Ptr<ns3::Socket> socket, ns3::Address const & from) [member function]
    cls.add_method('NotifyNewConnectionCreated', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket'), param('ns3::Address const &', 'from')], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifyNormalClose() [member function]
    cls.add_method('NotifyNormalClose', 
                   'void', 
                   [], 
                   visibility='protected')
    ## socket.h (module 'network'): void ns3::Socket::NotifySend(uint32_t spaceAvailable) [member function]
    cls.add_method('NotifySend', 
                   'void', 
                   [param('uint32_t', 'spaceAvailable')], 
                   visibility='protected')
    return

def register_Ns3SocketIpTosTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpTosTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTosTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTosTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTosTag::GetTos() const [member function]
    cls.add_method('GetTos', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTosTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTosTag::SetTos(uint8_t tos) [member function]
    cls.add_method('SetTos', 
                   'void', 
                   [param('uint8_t', 'tos')])
    return

def register_Ns3SocketIpTtlTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpTtlTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTtlTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpTtlTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpTtlTag::GetTtl() const [member function]
    cls.add_method('GetTtl', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTtlTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::SetTtl(uint8_t ttl) [member function]
    cls.add_method('SetTtl', 
                   'void', 
                   [param('uint8_t', 'ttl')])
    return

def register_Ns3SocketIpv6HopLimitTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpv6HopLimitTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6HopLimitTag::GetHopLimit() const [member function]
    cls.add_method('GetHopLimit', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6HopLimitTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6HopLimitTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6HopLimitTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::SetHopLimit(uint8_t hopLimit) [member function]
    cls.add_method('SetHopLimit', 
                   'void', 
                   [param('uint8_t', 'hopLimit')])
    return

def register_Ns3SocketIpv6TclassTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketIpv6TclassTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6TclassTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6TclassTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6TclassTag::GetTclass() const [member function]
    cls.add_method('GetTclass', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6TclassTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::SetTclass(uint8_t tclass) [member function]
    cls.add_method('SetTclass', 
                   'void', 
                   [param('uint8_t', 'tclass')])
    return

def register_Ns3SocketPriorityTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketPriorityTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketPriorityTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint8_t ns3::SocketPriorityTag::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketPriorityTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketPriorityTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketPriorityTag::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')])
    return

def register_Ns3SocketSetDontFragmentTag_methods(root_module, cls):
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
    cls.add_constructor([param('ns3::SocketSetDontFragmentTag const &', 'arg0')])
    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag() [constructor]
    cls.add_constructor([])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Deserialize(ns3::TagBuffer i) [member function]
    cls.add_method('Deserialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Disable() [member function]
    cls.add_method('Disable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Enable() [member function]
    cls.add_method('Enable', 
                   'void', 
                   [])
    ## socket.h (module 'network'): ns3::TypeId ns3::SocketSetDontFragmentTag::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): uint32_t ns3::SocketSetDontFragmentTag::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketSetDontFragmentTag::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## socket.h (module 'network'): bool ns3::SocketSetDontFragmentTag::IsEnabled() const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [], 
                   is_const=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Serialize(ns3::TagBuffer i) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::TagBuffer', 'i')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3TraceSourceAccessor_methods(root_module, cls):
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::TraceSourceAccessor const &', 'arg0')])
    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor() [constructor]
    cls.add_constructor([])
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Connect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Connect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::ConnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('ConnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Disconnect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('Disconnect', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::DisconnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
    cls.add_method('DisconnectWithoutContext', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3Trailer_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
    cls.add_constructor([])
    ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
    cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'end')], 
                   is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
                   is_virtual=True)
    ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3TriangularRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::TriangularRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::TriangularRandomVariable::TriangularRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue(double mean, double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger(uint32_t mean, uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::TriangularRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::TriangularRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3UniformRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::UniformRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::UniformRandomVariable::UniformRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMin() const [member function]
    cls.add_method('GetMin', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetMax() const [member function]
    cls.add_method('GetMax', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue(double min, double max) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'min'), param('double', 'max')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger(uint32_t min, uint32_t max) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'min'), param('uint32_t', 'max')])
    ## random-variable-stream.h (module 'core'): double ns3::UniformRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::UniformRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3WeibullRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::WeibullRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::WeibullRandomVariable::WeibullRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetScale() const [member function]
    cls.add_method('GetScale', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue(double scale, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::WeibullRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::WeibullRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ZetaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZetaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZetaRandomVariable::ZetaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue(double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger(uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZetaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZetaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ZipfRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ZipfRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ZipfRandomVariable::ZipfRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue(uint32_t n, double alpha) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'n'), param('double', 'alpha')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger(uint32_t n, uint32_t alpha) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'n'), param('uint32_t', 'alpha')])
    ## random-variable-stream.h (module 'core'): double ns3::ZipfRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ZipfRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3Application_methods(root_module, cls):
    ## application.h (module 'network'): ns3::Application::Application(ns3::Application const & arg0) [constructor]
    cls.add_constructor([param('ns3::Application const &', 'arg0')])
    ## application.h (module 'network'): ns3::Application::Application() [constructor]
    cls.add_constructor([])
    ## application.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Application::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## application.h (module 'network'): static ns3::TypeId ns3::Application::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## application.h (module 'network'): void ns3::Application::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## application.h (module 'network'): void ns3::Application::SetStartTime(ns3::Time start) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 'start')])
    ## application.h (module 'network'): void ns3::Application::SetStopTime(ns3::Time stop) [member function]
    cls.add_method('SetStopTime', 
                   'void', 
                   [param('ns3::Time', 'stop')])
    ## application.h (module 'network'): void ns3::Application::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## application.h (module 'network'): void ns3::Application::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## application.h (module 'network'): void ns3::Application::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## application.h (module 'network'): void ns3::Application::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3AttributeAccessor_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasGetter() const [member function]
    cls.add_method('HasGetter', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasSetter() const [member function]
    cls.add_method('HasSetter', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
    cls.add_method('Set', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'object', transfer_ownership=False), param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3AttributeChecker_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::CreateValidValue(ns3::AttributeValue const & value) const [member function]
    cls.add_method('CreateValidValue', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3AttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_pure_virtual=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3BooleanChecker_methods(root_module, cls):
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::BooleanChecker const &', 'arg0')])
    return

def register_Ns3BooleanValue_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::BooleanValue const &', 'arg0')])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue() [constructor]
    cls.add_constructor([])
    ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(bool value) [constructor]
    cls.add_constructor([param('bool', 'value')])
    ## boolean.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::BooleanValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## boolean.h (module 'core'): bool ns3::BooleanValue::Get() const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [], 
                   is_const=True)
    ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## boolean.h (module 'core'): void ns3::BooleanValue::Set(bool value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('bool', 'value')])
    return

def register_Ns3CallbackChecker_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])
    return

def register_Ns3CallbackImplBase_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])
    ## callback.h (module 'core'): std::string ns3::CallbackImplBase::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
    cls.add_method('IsEqual', 
                   'bool', 
                   [param('ns3::Ptr< ns3::CallbackImplBase const >', 'other')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::Demangle(std::string const & mangled) [member function]
    cls.add_method('Demangle', 
                   'std::string', 
                   [param('std::string const &', 'mangled')], 
                   is_static=True, visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['void'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipHeader const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['bool'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['double'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned short'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned int'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipElement::DialogState'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::sip::SipElement::TransactionState'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['char const*'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Address'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['std::__cxx11::basic_string<char', ' std::char_traits<char>', ' std::allocator<char> > const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['unsigned char'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::psc::McpttEntityId const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::Application const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::TypeId const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::psc::McpttCall> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Time'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Time const&'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::psc::UavMobilityEnergyModel::State'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Vector3D'], visibility='protected')
    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
    cls.add_method('GetCppTypeid', 
                   'std::string', 
                   [], 
                   is_static=True, template_parameters=['ns3::Ptr<ns3::psc::UavMobilityEnergyModel const> '], visibility='protected')
    return

def register_Ns3CallbackValue_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackBase const & base) [constructor]
    cls.add_constructor([param('ns3::CallbackBase const &', 'base')])
    ## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackValue::Set(ns3::CallbackBase base) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::CallbackBase', 'base')])
    return

def register_Ns3ConstantRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ConstantRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ConstantRandomVariable::ConstantRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetConstant() const [member function]
    cls.add_method('GetConstant', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue(double constant) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'constant')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger(uint32_t constant) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'constant')])
    ## random-variable-stream.h (module 'core'): double ns3::ConstantRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ConstantRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3DataRateChecker_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker(ns3::DataRateChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRateChecker const &', 'arg0')])
    return

def register_Ns3DataRateValue_methods(root_module, cls):
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue() [constructor]
    cls.add_constructor([])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRate const & value) [constructor]
    cls.add_constructor([param('ns3::DataRate const &', 'value')])
    ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRateValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::DataRateValue const &', 'arg0')])
    ## data-rate.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::DataRateValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): bool ns3::DataRateValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## data-rate.h (module 'network'): ns3::DataRate ns3::DataRateValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::DataRate', 
                   [], 
                   is_const=True)
    ## data-rate.h (module 'network'): std::string ns3::DataRateValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## data-rate.h (module 'network'): void ns3::DataRateValue::Set(ns3::DataRate const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::DataRate const &', 'value')])
    return

def register_Ns3DeterministicRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::DeterministicRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::DeterministicRandomVariable::DeterministicRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
    cls.add_method('SetValueArray', 
                   'void', 
                   [param('double *', 'values'), param('std::size_t', 'length')])
    ## random-variable-stream.h (module 'core'): double ns3::DeterministicRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::DeterministicRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3DeviceEnergyModel_methods(root_module, cls):
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel::DeviceEnergyModel(ns3::DeviceEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::DeviceEnergyModel const &', 'arg0')])
    ## device-energy-model.h (module 'energy'): ns3::DeviceEnergyModel::DeviceEnergyModel() [constructor]
    cls.add_constructor([])
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::GetCurrentA() const [member function]
    cls.add_method('GetCurrentA', 
                   'double', 
                   [], 
                   is_const=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): static ns3::TypeId ns3::DeviceEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): void ns3::DeviceEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_pure_virtual=True, is_virtual=True)
    ## device-energy-model.h (module 'energy'): double ns3::DeviceEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3DoubleValue_methods(root_module, cls):
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue() [constructor]
    cls.add_constructor([])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(double const & value) [constructor]
    cls.add_constructor([param('double const &', 'value')])
    ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
    ## double.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::DoubleValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## double.h (module 'core'): double ns3::DoubleValue::Get() const [member function]
    cls.add_method('Get', 
                   'double', 
                   [], 
                   is_const=True)
    ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## double.h (module 'core'): void ns3::DoubleValue::Set(double const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('double const &', 'value')])
    return

def register_Ns3EmpiricalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::EmpiricalRandomVariable::EmpiricalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): void ns3::EmpiricalRandomVariable::CDF(double v, double c) [member function]
    cls.add_method('CDF', 
                   'void', 
                   [param('double', 'v'), param('double', 'c')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::EmpiricalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::EmpiricalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): double ns3::EmpiricalRandomVariable::Interpolate() [member function]
    cls.add_method('Interpolate', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): bool ns3::EmpiricalRandomVariable::SetInterpolate(bool interpolate) [member function]
    cls.add_method('SetInterpolate', 
                   'bool', 
                   [param('bool', 'interpolate')])
    return

def register_Ns3EmptyAttributeAccessor_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeAccessor const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
    cls.add_method('Get', 
                   'bool', 
                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasGetter() const [member function]
    cls.add_method('HasGetter', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasSetter() const [member function]
    cls.add_method('HasSetter', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
    cls.add_method('Set', 
                   'bool', 
                   [param('ns3::ObjectBase *', 'object'), param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EmptyAttributeChecker_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeChecker const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EmptyAttributeValue_methods(root_module, cls):
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])
    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]
    cls.add_constructor([])
    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True, visibility='private')
    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3EnergyHarvester_methods(root_module, cls):
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester::EnergyHarvester(ns3::EnergyHarvester const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergyHarvester const &', 'arg0')])
    ## energy-harvester.h (module 'energy'): ns3::EnergyHarvester::EnergyHarvester() [constructor]
    cls.add_constructor([])
    ## energy-harvester.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergyHarvester::GetEnergySource() const [member function]
    cls.add_method('GetEnergySource', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::EnergyHarvester::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): double ns3::EnergyHarvester::GetPower() const [member function]
    cls.add_method('GetPower', 
                   'double', 
                   [], 
                   is_const=True)
    ## energy-harvester.h (module 'energy'): static ns3::TypeId ns3::EnergyHarvester::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## energy-harvester.h (module 'energy'): void ns3::EnergyHarvester::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## energy-harvester.h (module 'energy'): double ns3::EnergyHarvester::DoGetPower() const [member function]
    cls.add_method('DoGetPower', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3EnergySource_methods(root_module, cls):
    ## energy-source.h (module 'energy'): ns3::EnergySource::EnergySource(ns3::EnergySource const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySource const &', 'arg0')])
    ## energy-source.h (module 'energy'): ns3::EnergySource::EnergySource() [constructor]
    cls.add_constructor([])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::AppendDeviceEnergyModel(ns3::Ptr<ns3::DeviceEnergyModel> deviceEnergyModelPtr) [member function]
    cls.add_method('AppendDeviceEnergyModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::DeviceEnergyModel >', 'deviceEnergyModelPtr')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::ConnectEnergyHarvester(ns3::Ptr<ns3::EnergyHarvester> energyHarvesterPtr) [member function]
    cls.add_method('ConnectEnergyHarvester', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergyHarvester >', 'energyHarvesterPtr')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::DisposeDeviceModels() [member function]
    cls.add_method('DisposeDeviceModels', 
                   'void', 
                   [])
    ## energy-source.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::EnergySource::FindDeviceEnergyModels(ns3::TypeId tid) [member function]
    cls.add_method('FindDeviceEnergyModels', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::TypeId', 'tid')])
    ## energy-source.h (module 'energy'): ns3::DeviceEnergyModelContainer ns3::EnergySource::FindDeviceEnergyModels(std::string name) [member function]
    cls.add_method('FindDeviceEnergyModels', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('std::string', 'name')])
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetEnergyFraction() [member function]
    cls.add_method('GetEnergyFraction', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetInitialEnergy() const [member function]
    cls.add_method('GetInitialEnergy', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::EnergySource::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetRemainingEnergy() [member function]
    cls.add_method('GetRemainingEnergy', 
                   'double', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): double ns3::EnergySource::GetSupplyVoltage() const [member function]
    cls.add_method('GetSupplyVoltage', 
                   'double', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): static ns3::TypeId ns3::EnergySource::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-source.h (module 'energy'): void ns3::EnergySource::InitializeDeviceModels() [member function]
    cls.add_method('InitializeDeviceModels', 
                   'void', 
                   [])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## energy-source.h (module 'energy'): void ns3::EnergySource::UpdateEnergySource() [member function]
    cls.add_method('UpdateEnergySource', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## energy-source.h (module 'energy'): void ns3::EnergySource::BreakDeviceEnergyModelRefCycle() [member function]
    cls.add_method('BreakDeviceEnergyModelRefCycle', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): double ns3::EnergySource::CalculateTotalCurrent() [member function]
    cls.add_method('CalculateTotalCurrent', 
                   'double', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyChanged() [member function]
    cls.add_method('NotifyEnergyChanged', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyDrained() [member function]
    cls.add_method('NotifyEnergyDrained', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::NotifyEnergyRecharged() [member function]
    cls.add_method('NotifyEnergyRecharged', 
                   'void', 
                   [], 
                   visibility='protected')
    ## energy-source.h (module 'energy'): void ns3::EnergySource::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3EnergySourceContainer_methods(root_module, cls):
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::EnergySourceContainer const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnergySourceContainer const &', 'arg0')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer() [constructor]
    cls.add_constructor([])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::Ptr<ns3::EnergySource> source) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(std::string sourceName) [constructor]
    cls.add_constructor([param('std::string', 'sourceName')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::EnergySourceContainer(ns3::EnergySourceContainer const & a, ns3::EnergySourceContainer const & b) [constructor]
    cls.add_constructor([param('ns3::EnergySourceContainer const &', 'a'), param('ns3::EnergySourceContainer const &', 'b')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(ns3::EnergySourceContainer container) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::EnergySourceContainer', 'container')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')])
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::Add(std::string sourceName) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('std::string', 'sourceName')])
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::Iterator ns3::EnergySourceContainer::Begin() const [member function]
    cls.add_method('Begin', 
                   'ns3::EnergySourceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): ns3::EnergySourceContainer::Iterator ns3::EnergySourceContainer::End() const [member function]
    cls.add_method('End', 
                   'ns3::EnergySourceContainer::Iterator', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): ns3::Ptr<ns3::EnergySource> ns3::EnergySourceContainer::Get(uint32_t i) const [member function]
    cls.add_method('Get', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [param('uint32_t', 'i')], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): uint32_t ns3::EnergySourceContainer::GetN() const [member function]
    cls.add_method('GetN', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## energy-source-container.h (module 'energy'): static ns3::TypeId ns3::EnergySourceContainer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## energy-source-container.h (module 'energy'): void ns3::EnergySourceContainer::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3EnumChecker_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnumChecker const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): void ns3::EnumChecker::Add(int value, std::string name) [member function]
    cls.add_method('Add', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): void ns3::EnumChecker::AddDefault(int value, std::string name) [member function]
    cls.add_method('AddDefault', 
                   'void', 
                   [param('int', 'value'), param('std::string', 'name')])
    ## enum.h (module 'core'): bool ns3::EnumChecker::Check(ns3::AttributeValue const & value) const [member function]
    cls.add_method('Check', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'value')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::Copy(ns3::AttributeValue const & src, ns3::AttributeValue & dst) const [member function]
    cls.add_method('Copy', 
                   'bool', 
                   [param('ns3::AttributeValue const &', 'src'), param('ns3::AttributeValue &', 'dst')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumChecker::Create() const [member function]
    cls.add_method('Create', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetName(int value) const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [param('int', 'value')], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetUnderlyingTypeInformation() const [member function]
    cls.add_method('GetUnderlyingTypeInformation', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): int ns3::EnumChecker::GetValue(std::string const name) const [member function]
    cls.add_method('GetValue', 
                   'int', 
                   [param('std::string const', 'name')], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumChecker::GetValueTypeName() const [member function]
    cls.add_method('GetValueTypeName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumChecker::HasUnderlyingTypeInformation() const [member function]
    cls.add_method('HasUnderlyingTypeInformation', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3EnumValue_methods(root_module, cls):
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::EnumValue const &', 'arg0')])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue() [constructor]
    cls.add_constructor([])
    ## enum.h (module 'core'): ns3::EnumValue::EnumValue(int value) [constructor]
    cls.add_constructor([param('int', 'value')])
    ## enum.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EnumValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## enum.h (module 'core'): int ns3::EnumValue::Get() const [member function]
    cls.add_method('Get', 
                   'int', 
                   [], 
                   is_const=True)
    ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## enum.h (module 'core'): void ns3::EnumValue::Set(int value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int', 'value')])
    return

def register_Ns3ErlangRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ErlangRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ErlangRandomVariable::ErlangRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetK() const [member function]
    cls.add_method('GetK', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetLambda() const [member function]
    cls.add_method('GetLambda', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue(uint32_t k, double lambda) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('uint32_t', 'k'), param('double', 'lambda')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger(uint32_t k, uint32_t lambda) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'k'), param('uint32_t', 'lambda')])
    ## random-variable-stream.h (module 'core'): double ns3::ErlangRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ErlangRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3EventImpl_methods(root_module, cls):
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
    cls.add_constructor([param('ns3::EventImpl const &', 'arg0')])
    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl() [constructor]
    cls.add_constructor([])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Cancel() [member function]
    cls.add_method('Cancel', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Invoke() [member function]
    cls.add_method('Invoke', 
                   'void', 
                   [])
    ## event-impl.h (module 'core'): bool ns3::EventImpl::IsCancelled() [member function]
    cls.add_method('IsCancelled', 
                   'bool', 
                   [])
    ## event-impl.h (module 'core'): void ns3::EventImpl::Notify() [member function]
    cls.add_method('Notify', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True, visibility='protected')
    return

def register_Ns3ExponentialRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ExponentialRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ExponentialRandomVariable::ExponentialRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue(double mean, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger(uint32_t mean, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ExponentialRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ExponentialRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3GammaRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::GammaRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::GammaRandomVariable::GammaRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetAlpha() const [member function]
    cls.add_method('GetAlpha', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetBeta() const [member function]
    cls.add_method('GetBeta', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue(double alpha, double beta) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'alpha'), param('double', 'beta')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger(uint32_t alpha, uint32_t beta) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'alpha'), param('uint32_t', 'beta')])
    ## random-variable-stream.h (module 'core'): double ns3::GammaRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::GammaRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3IntegerValue_methods(root_module, cls):
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue() [constructor]
    cls.add_constructor([])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(int64_t const & value) [constructor]
    cls.add_constructor([param('int64_t const &', 'value')])
    ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
    ## integer.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::IntegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## integer.h (module 'core'): int64_t ns3::IntegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'int64_t', 
                   [], 
                   is_const=True)
    ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## integer.h (module 'core'): void ns3::IntegerValue::Set(int64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('int64_t const &', 'value')])
    return

def register_Ns3Ipv4AddressChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv4AddressValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Address const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Address', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4AddressValue::Set(ns3::Ipv4Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Address const &', 'value')])
    return

def register_Ns3Ipv4MaskChecker_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4MaskChecker const &', 'arg0')])
    return

def register_Ns3Ipv4MaskValue_methods(root_module, cls):
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue() [constructor]
    cls.add_constructor([])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4Mask const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv4Mask const &', 'value')])
    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4MaskValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv4Mask', 
                   [], 
                   is_const=True)
    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv4-address.h (module 'network'): void ns3::Ipv4MaskValue::Set(ns3::Ipv4Mask const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv4Mask const &', 'value')])
    return

def register_Ns3Ipv6AddressChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressChecker const &', 'arg0')])
    return

def register_Ns3Ipv6AddressValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6Address const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Address const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Address', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6AddressValue::Set(ns3::Ipv6Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Address const &', 'value')])
    return

def register_Ns3Ipv6PrefixChecker_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixChecker const &', 'arg0')])
    return

def register_Ns3Ipv6PrefixValue_methods(root_module, cls):
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue() [constructor]
    cls.add_constructor([])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6Prefix const & value) [constructor]
    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'value')])
    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6PrefixValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix ns3::Ipv6PrefixValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Ipv6Prefix', 
                   [], 
                   is_const=True)
    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## ipv6-address.h (module 'network'): void ns3::Ipv6PrefixValue::Set(ns3::Ipv6Prefix const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Ipv6Prefix const &', 'value')])
    return

def register_Ns3LogNormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::LogNormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::LogNormalRandomVariable::LogNormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetMu() const [member function]
    cls.add_method('GetMu', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetSigma() const [member function]
    cls.add_method('GetSigma', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue(double mu, double sigma) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mu'), param('double', 'sigma')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger(uint32_t mu, uint32_t sigma) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mu'), param('uint32_t', 'sigma')])
    ## random-variable-stream.h (module 'core'): double ns3::LogNormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::LogNormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3Mac48AddressChecker_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
    return

def register_Ns3Mac48AddressValue_methods(root_module, cls):
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
    cls.add_constructor([])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
    cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
    ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Mac48Address', 
                   [], 
                   is_const=True)
    ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Mac48Address const &', 'value')])
    return

def register_Ns3MobilityModel_methods(root_module, cls):
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
    ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
    cls.add_constructor([])
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')])
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
    cls.add_method('GetDistanceFrom', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
    cls.add_method('GetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPositionWithReference(ns3::Vector const & referencePosition) const [member function]
    cls.add_method('GetPositionWithReference', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'referencePosition')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
    cls.add_method('GetRelativeSpeed', 
                   'double', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
    cls.add_method('GetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_const=True)
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
    cls.add_method('SetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')])
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
    cls.add_method('NotifyCourseChange', 
                   'void', 
                   [], 
                   is_const=True, visibility='protected')
    ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
    cls.add_method('DoAssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'start')], 
                   is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
    cls.add_method('DoGetPosition', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPositionWithReference(ns3::Vector const & referencePosition) const [member function]
    cls.add_method('DoGetPositionWithReference', 
                   'ns3::Vector', 
                   [param('ns3::Vector const &', 'referencePosition')], 
                   is_const=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
    cls.add_method('DoGetVelocity', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
    ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
    cls.add_method('DoSetPosition', 
                   'void', 
                   [param('ns3::Vector const &', 'position')], 
                   is_pure_virtual=True, is_virtual=True, visibility='private')
    return

def register_Ns3NetDevice_methods(root_module, cls):
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice() [constructor]
    cls.add_constructor([])
    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
    cls.add_constructor([param('ns3::NetDevice const &', 'arg0')])
    ## net-device.h (module 'network'): void ns3::NetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): uint32_t ns3::NetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## net-device.h (module 'network'): bool ns3::NetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3NixVector_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
    cls.add_constructor([])
    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
    cls.add_constructor([param('ns3::NixVector const &', 'o')])
    ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
    cls.add_method('AddNeighborIndex', 
                   'void', 
                   [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
    cls.add_method('BitCount', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfNeighbors')], 
                   is_const=True)
    ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
    cls.add_method('ExtractNeighborIndex', 
                   'uint32_t', 
                   [param('uint32_t', 'numberOfBits')])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() [member function]
    cls.add_method('GetRemainingBits', 
                   'uint32_t', 
                   [])
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    return

def register_Ns3Node_methods(root_module, cls):
    ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
    cls.add_constructor([param('ns3::Node const &', 'arg0')])
    ## node.h (module 'network'): ns3::Node::Node() [constructor]
    cls.add_constructor([])
    ## node.h (module 'network'): ns3::Node::Node(uint32_t systemId) [constructor]
    cls.add_constructor([param('uint32_t', 'systemId')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddApplication(ns3::Ptr<ns3::Application> application) [member function]
    cls.add_method('AddApplication', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::Application >', 'application')])
    ## node.h (module 'network'): uint32_t ns3::Node::AddDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('AddDevice', 
                   'uint32_t', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## node.h (module 'network'): static bool ns3::Node::ChecksumEnabled() [member function]
    cls.add_method('ChecksumEnabled', 
                   'bool', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::Application> ns3::Node::GetApplication(uint32_t index) const [member function]
    cls.add_method('GetApplication', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Node::GetDevice(uint32_t index) const [member function]
    cls.add_method('GetDevice', 
                   'ns3::Ptr< ns3::NetDevice >', 
                   [param('uint32_t', 'index')], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): ns3::Time ns3::Node::GetLocalTime() const [member function]
    cls.add_method('GetLocalTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNApplications() const [member function]
    cls.add_method('GetNApplications', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetNDevices() const [member function]
    cls.add_method('GetNDevices', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): uint32_t ns3::Node::GetSystemId() const [member function]
    cls.add_method('GetSystemId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## node.h (module 'network'): static ns3::TypeId ns3::Node::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
    cls.add_method('RegisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
    cls.add_method('RegisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device'), param('bool', 'promiscuous', default_value='false')])
    ## node.h (module 'network'): void ns3::Node::RemoveDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
    cls.add_method('RemoveDevice', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
    ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
    cls.add_method('UnregisterDeviceAdditionListener', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
    ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
    cls.add_method('UnregisterProtocolHandler', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler')])
    ## node.h (module 'network'): void ns3::Node::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## node.h (module 'network'): void ns3::Node::DoInitialize() [member function]
    cls.add_method('DoInitialize', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3NormalRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::INFINITE_VALUE [variable]
    cls.add_static_attribute('INFINITE_VALUE', 'double const', is_const=True)
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::NormalRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::NormalRandomVariable::NormalRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetMean() const [member function]
    cls.add_method('GetMean', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetVariance() const [member function]
    cls.add_method('GetVariance', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue(double mean, double variance, double bound=ns3::NormalRandomVariable::INFINITE_VALUE) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'mean'), param('double', 'variance'), param('double', 'bound', default_value='ns3::NormalRandomVariable::INFINITE_VALUE')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger(uint32_t mean, uint32_t variance, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'mean'), param('uint32_t', 'variance'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::NormalRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::NormalRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3ObjectFactoryChecker_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactoryChecker const &', 'arg0')])
    return

def register_Ns3ObjectFactoryValue_methods(root_module, cls):
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue() [constructor]
    cls.add_constructor([])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactory const & value) [constructor]
    cls.add_constructor([param('ns3::ObjectFactory const &', 'value')])
    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
    ## object-factory.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::ObjectFactoryValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::ObjectFactory', 
                   [], 
                   is_const=True)
    ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## object-factory.h (module 'core'): void ns3::ObjectFactoryValue::Set(ns3::ObjectFactory const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::ObjectFactory const &', 'value')])
    return

def register_Ns3OutputStreamWrapper_methods(root_module, cls):
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
    cls.add_constructor([param('ns3::OutputStreamWrapper const &', 'arg0')])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
    cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::ostream * os) [constructor]
    cls.add_constructor([param('std::ostream *', 'os')])
    ## output-stream-wrapper.h (module 'network'): std::ostream * ns3::OutputStreamWrapper::GetStream() [member function]
    cls.add_method('GetStream', 
                   'std::ostream *', 
                   [])
    return

def register_Ns3Packet_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
    cls.add_constructor([])
    ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
    cls.add_constructor([param('ns3::Packet const &', 'o')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
    cls.add_constructor([param('uint32_t', 'size')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
    cls.add_method('AddAtEnd', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'packet')])
    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddByteTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
    cls.add_method('AddByteTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
    cls.add_method('AddHeader', 
                   'void', 
                   [param('ns3::Header const &', 'header')])
    ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
    cls.add_method('AddPacketTag', 
                   'void', 
                   [param('ns3::Tag const &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
    cls.add_method('AddPaddingAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
    cls.add_method('AddTrailer', 
                   'void', 
                   [param('ns3::Trailer const &', 'trailer')])
    ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
    cls.add_method('BeginItem', 
                   'ns3::PacketMetadata::ItemIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::Packet >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
    cls.add_method('CopyData', 
                   'void', 
                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
    cls.add_method('CreateFragment', 
                   'ns3::Ptr< ns3::Packet >', 
                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
                   is_const=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
    cls.add_method('EnableChecking', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
    cls.add_method('EnablePrinting', 
                   'void', 
                   [], 
                   is_static=True)
    ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
    cls.add_method('FindFirstMatchingByteTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
    cls.add_method('GetByteTagIterator', 
                   'ns3::ByteTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
    cls.add_method('GetNixVector', 
                   'ns3::Ptr< ns3::NixVector >', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
    cls.add_method('GetPacketTagIterator', 
                   'ns3::PacketTagIterator', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
    cls.add_method('GetSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
    cls.add_method('GetUid', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
    cls.add_method('PeekHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
    cls.add_method('PeekHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
                   is_const=True)
    ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
    cls.add_method('PeekPacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')], 
                   is_const=True)
    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('PeekTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
    cls.add_method('PrintByteTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
    cls.add_method('PrintPacketTags', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
    cls.add_method('RemoveAllByteTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
    cls.add_method('RemoveAllPacketTags', 
                   'void', 
                   [])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
    cls.add_method('RemoveAtEnd', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
    cls.add_method('RemoveAtStart', 
                   'void', 
                   [param('uint32_t', 'size')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
    cls.add_method('RemoveHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
    cls.add_method('RemoveHeader', 
                   'uint32_t', 
                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
    ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('RemovePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
    cls.add_method('RemoveTrailer', 
                   'uint32_t', 
                   [param('ns3::Trailer &', 'trailer')])
    ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
    cls.add_method('ReplacePacketTag', 
                   'bool', 
                   [param('ns3::Tag &', 'tag')])
    ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
    cls.add_method('Serialize', 
                   'uint32_t', 
                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
                   is_const=True)
    ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) [member function]
    cls.add_method('SetNixVector', 
                   'void', 
                   [param('ns3::Ptr< ns3::NixVector >', 'nixVector')])
    ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
    cls.add_method('ToString', 
                   'std::string', 
                   [], 
                   is_const=True)
    return

def register_Ns3ParetoRandomVariable_methods(root_module, cls):
    ## random-variable-stream.h (module 'core'): static ns3::TypeId ns3::ParetoRandomVariable::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## random-variable-stream.h (module 'core'): ns3::ParetoRandomVariable::ParetoRandomVariable() [constructor]
    cls.add_constructor([])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
    cls.add_method('GetScale', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetShape() const [member function]
    cls.add_method('GetShape', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetBound() const [member function]
    cls.add_method('GetBound', 
                   'double', 
                   [], 
                   is_const=True)
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
    ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue() [member function]
    cls.add_method('GetValue', 
                   'double', 
                   [], 
                   is_virtual=True)
    ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger() [member function]
    cls.add_method('GetInteger', 
                   'uint32_t', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PointToPointNetDevice_methods(root_module, cls):
    ## point-to-point-net-device.h (module 'point-to-point'): static ns3::TypeId ns3::PointToPointNetDevice::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::PointToPointNetDevice::PointToPointNetDevice() [constructor]
    cls.add_constructor([])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetDataRate(ns3::DataRate bps) [member function]
    cls.add_method('SetDataRate', 
                   'void', 
                   [param('ns3::DataRate', 'bps')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetInterframeGap(ns3::Time t) [member function]
    cls.add_method('SetInterframeGap', 
                   'void', 
                   [param('ns3::Time', 't')])
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::Attach(ns3::Ptr<ns3::PointToPointChannel> ch) [member function]
    cls.add_method('Attach', 
                   'bool', 
                   [param('ns3::Ptr< ns3::PointToPointChannel >', 'ch')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetQueue(ns3::Ptr<ns3::Queue<ns3::Packet> > queue) [member function]
    cls.add_method('SetQueue', 
                   'void', 
                   [param('ns3::Ptr< ns3::Queue< ns3::Packet > >', 'queue')])
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Queue<ns3::Packet> > ns3::PointToPointNetDevice::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::Queue< ns3::Packet > >', 
                   [], 
                   is_const=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetReceiveErrorModel(ns3::Ptr<ns3::ErrorModel> em) [member function]
    cls.add_method('SetReceiveErrorModel', 
                   'void', 
                   [param('ns3::Ptr< ns3::ErrorModel >', 'em')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::Receive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')])
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetIfIndex(uint32_t const index) [member function]
    cls.add_method('SetIfIndex', 
                   'void', 
                   [param('uint32_t const', 'index')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): uint32_t ns3::PointToPointNetDevice::GetIfIndex() const [member function]
    cls.add_method('GetIfIndex', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Channel> ns3::PointToPointNetDevice::GetChannel() const [member function]
    cls.add_method('GetChannel', 
                   'ns3::Ptr< ns3::Channel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetAddress(ns3::Address address) [member function]
    cls.add_method('SetAddress', 
                   'void', 
                   [param('ns3::Address', 'address')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetAddress() const [member function]
    cls.add_method('GetAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SetMtu(uint16_t const mtu) [member function]
    cls.add_method('SetMtu', 
                   'bool', 
                   [param('uint16_t const', 'mtu')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): uint16_t ns3::PointToPointNetDevice::GetMtu() const [member function]
    cls.add_method('GetMtu', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsLinkUp() const [member function]
    cls.add_method('IsLinkUp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
    cls.add_method('AddLinkChangeCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsBroadcast() const [member function]
    cls.add_method('IsBroadcast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetBroadcast() const [member function]
    cls.add_method('GetBroadcast', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsMulticast() const [member function]
    cls.add_method('IsMulticast', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv4Address', 'multicastGroup')], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsPointToPoint() const [member function]
    cls.add_method('IsPointToPoint', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::IsBridge() const [member function]
    cls.add_method('IsBridge', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('Send', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
    cls.add_method('SendFrom', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Ptr<ns3::Node> ns3::PointToPointNetDevice::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::NeedsArp() const [member function]
    cls.add_method('NeedsArp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
    cls.add_method('SetReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): ns3::Address ns3::PointToPointNetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
    cls.add_method('GetMulticast', 
                   'ns3::Address', 
                   [param('ns3::Ipv6Address', 'addr')], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
    cls.add_method('SetPromiscReceiveCallback', 
                   'void', 
                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
                   is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): bool ns3::PointToPointNetDevice::SupportsSendFrom() const [member function]
    cls.add_method('SupportsSendFrom', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::DoMpiReceive(ns3::Ptr<ns3::Packet> p) [member function]
    cls.add_method('DoMpiReceive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p')], 
                   visibility='protected')
    ## point-to-point-net-device.h (module 'point-to-point'): void ns3::PointToPointNetDevice::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3SimpleDeviceEnergyModel_methods(root_module, cls):
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel::SimpleDeviceEnergyModel(ns3::SimpleDeviceEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::SimpleDeviceEnergyModel const &', 'arg0')])
    ## simple-device-energy-model.h (module 'energy'): ns3::SimpleDeviceEnergyModel::SimpleDeviceEnergyModel() [constructor]
    cls.add_constructor([])
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): ns3::Ptr<ns3::Node> ns3::SimpleDeviceEnergyModel::GetNode() const [member function]
    cls.add_method('GetNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): double ns3::SimpleDeviceEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): static ns3::TypeId ns3::SimpleDeviceEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetCurrentA(double current) [member function]
    cls.add_method('SetCurrentA', 
                   'void', 
                   [param('double', 'current')])
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::SetNode(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('SetNode', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_virtual=True)
    ## simple-device-energy-model.h (module 'energy'): void ns3::SimpleDeviceEnergyModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## simple-device-energy-model.h (module 'energy'): double ns3::SimpleDeviceEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3StringChecker_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringChecker::StringChecker() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringChecker::StringChecker(ns3::StringChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::StringChecker const &', 'arg0')])
    return

def register_Ns3StringValue_methods(root_module, cls):
    ## string.h (module 'core'): ns3::StringValue::StringValue() [constructor]
    cls.add_constructor([])
    ## string.h (module 'core'): ns3::StringValue::StringValue(std::string const & value) [constructor]
    cls.add_constructor([param('std::string const &', 'value')])
    ## string.h (module 'core'): ns3::StringValue::StringValue(ns3::StringValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::StringValue const &', 'arg0')])
    ## string.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::StringValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): bool ns3::StringValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## string.h (module 'core'): std::string ns3::StringValue::Get() const [member function]
    cls.add_method('Get', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## string.h (module 'core'): std::string ns3::StringValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## string.h (module 'core'): void ns3::StringValue::Set(std::string const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'value')])
    return

def register_Ns3TimeValue_methods(root_module, cls):
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue() [constructor]
    cls.add_constructor([])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::Time const & value) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'value')])
    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
    ## nstime.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TimeValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## nstime.h (module 'core'): void ns3::TimeValue::Set(ns3::Time const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Time const &', 'value')])
    return

def register_Ns3TypeIdChecker_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])
    return

def register_Ns3TypeIdValue_methods(root_module, cls):
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue() [constructor]
    cls.add_constructor([])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]
    cls.add_constructor([param('ns3::TypeId const &', 'value')])
    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
    ## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True)
    ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## type-id.h (module 'core'): void ns3::TypeIdValue::Set(ns3::TypeId const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::TypeId const &', 'value')])
    return

def register_Ns3UintegerValue_methods(root_module, cls):
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue() [constructor]
    cls.add_constructor([])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(uint64_t const & value) [constructor]
    cls.add_constructor([param('uint64_t const &', 'value')])
    ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
    ## uinteger.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::UintegerValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## uinteger.h (module 'core'): uint64_t ns3::UintegerValue::Get() const [member function]
    cls.add_method('Get', 
                   'uint64_t', 
                   [], 
                   is_const=True)
    ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## uinteger.h (module 'core'): void ns3::UintegerValue::Set(uint64_t const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('uint64_t const &', 'value')])
    return

def register_Ns3Vector2DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2DChecker const &', 'arg0')])
    return

def register_Ns3Vector2DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector2D const &', 'value')])
    ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector2DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector2D ns3::Vector2DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector2D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector2DValue::Set(ns3::Vector2D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector2D const &', 'value')])
    return

def register_Ns3Vector3DChecker_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3DChecker const &', 'arg0')])
    return

def register_Ns3Vector3DValue_methods(root_module, cls):
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue() [constructor]
    cls.add_constructor([])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3D const & value) [constructor]
    cls.add_constructor([param('ns3::Vector3D const &', 'value')])
    ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
    ## vector.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::Vector3DValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## vector.h (module 'core'): ns3::Vector3D ns3::Vector3DValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Vector3D', 
                   [], 
                   is_const=True)
    ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## vector.h (module 'core'): void ns3::Vector3DValue::Set(ns3::Vector3D const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Vector3D const &', 'value')])
    return

def register_Ns3AddressChecker_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
    cls.add_constructor([param('ns3::AddressChecker const &', 'arg0')])
    return

def register_Ns3AddressValue_methods(root_module, cls):
    ## address.h (module 'network'): ns3::AddressValue::AddressValue() [constructor]
    cls.add_constructor([])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::Address const & value) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'value')])
    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
    cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
    ## address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::AddressValue::Copy() const [member function]
    cls.add_method('Copy', 
                   'ns3::Ptr< ns3::AttributeValue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
    cls.add_method('DeserializeFromString', 
                   'bool', 
                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_virtual=True)
    ## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]
    cls.add_method('Get', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
    cls.add_method('SerializeToString', 
                   'std::string', 
                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
                   is_const=True, is_virtual=True)
    ## address.h (module 'network'): void ns3::AddressValue::Set(ns3::Address const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('ns3::Address const &', 'value')])
    return

def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'bool', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
    cls.add_method('operator()', 
                   'ns3::ObjectBase *', 
                   [], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(bool arg0, bool arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('bool', 'arg0'), param('bool', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(bool arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('bool', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_char___star___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(char const * arg0, ns3::sip::SipElement::TransactionState arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('char const *', 'arg0'), param('ns3::sip::SipElement::TransactionState', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_ns3Time___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time const & arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time const &', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Const_ns3PscMcpttEntityId___amp___Const_ns3PscMcpttEntityId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::psc::McpttEntityId const & arg0, ns3::psc::McpttEntityId const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'arg0'), param('ns3::psc::McpttEntityId const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Double_Double_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1, ns3::Vector3D arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('double', 'arg0'), param('double', 'arg1'), param('ns3::Vector3D', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('double', 'arg0'), param('double', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Application__gt___Unsigned_short_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TypeId___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Application const >, unsigned short, ns3::Ptr< ns3::Packet const >, ns3::TypeId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Application>, unsigned short, ns3::Ptr<const ns3::Packet>, const ns3::TypeId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Application> arg0, short unsigned int arg1, ns3::Ptr<const ns3::Packet> arg2, ns3::TypeId const & arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'arg0'), param('short unsigned int', 'arg1'), param('ns3::Ptr< ns3::Packet const >', 'arg2'), param('ns3::TypeId const &', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PscUavMobilityEnergyModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::psc::UavMobilityEnergyModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::psc::UavMobilityEnergyModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::psc::UavMobilityEnergyModel> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::UavMobilityEnergyModel const >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3Address___amp___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Address const & arg1, ns3::sip::SipHeader const & arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Address const &', 'arg1'), param('ns3::sip::SipHeader const &', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::sip::SipHeader const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::sip::SipHeader const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3SipSipHeader___amp___Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::sip::SipHeader const & arg1, ns3::sip::SipElement::TransactionState arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::sip::SipHeader const &', 'arg1'), param('ns3::sip::SipElement::TransactionState', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Address arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Address', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Ptr__lt__ns3PscMcpttCall__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::psc::McpttCall >, ns3::Ptr< ns3::psc::McpttCall >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::psc::McpttCall> arg0, ns3::Ptr<ns3::psc::McpttCall> arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'arg0'), param('ns3::Ptr< ns3::psc::McpttCall >', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::Time', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Ns3PscUavMobilityEnergyModelState_Ns3PscUavMobilityEnergyModelState_Ns3Vector3D_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::psc::UavMobilityEnergyModel::State, ns3::psc::UavMobilityEnergyModel::State, ns3::Vector3D, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::psc::UavMobilityEnergyModel::State arg0, ns3::psc::UavMobilityEnergyModel::State arg1, ns3::Vector3D arg2) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('ns3::psc::UavMobilityEnergyModel::State', 'arg0'), param('ns3::psc::UavMobilityEnergyModel::State', 'arg1'), param('ns3::Vector3D', 'arg2')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned char arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned char', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, ns3::Time arg1) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('ns3::Time', 'arg1')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned short, std::basic_string< char > const, char const *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, short unsigned int arg1, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const & arg2, char const * arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('std::string const &', 'arg2'), param('char const *', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_short_Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Const_stdBasic_string__lt__char__gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned short, std::basic_string< char > const, std::basic_string< char > const, std::basic_string< char > const, std::basic_string< char > const, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned short, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, const std::basic_string<char> &, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, short unsigned int arg1, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const & arg2, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const & arg3, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const & arg4, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const & arg5) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('unsigned int', 'arg0'), param('short unsigned int', 'arg1'), param('std::string const &', 'arg2'), param('std::string const &', 'arg3'), param('std::string const &', 'arg4'), param('std::string const &', 'arg5')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    cls.add_copy_constructor()
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementDialogState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::DialogState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned int arg1, unsigned int arg2, ns3::sip::SipElement::DialogState arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('unsigned int', 'arg2'), param('ns3::sip::SipElement::DialogState', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3CallbackImpl__Void_Unsigned_short_Unsigned_int_Unsigned_int_Ns3SipSipElementTransactionState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
    cls.add_constructor([])
    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
    cls.add_constructor([param('ns3::CallbackImpl< void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
    cls.add_method('DoGetTypeid', 
                   'std::string', 
                   [], 
                   is_static=True)
    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
    cls.add_method('GetTypeid', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned short, unsigned int, unsigned int, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(short unsigned int arg0, unsigned int arg1, unsigned int arg2, ns3::sip::SipElement::TransactionState arg3) [member operator]
    cls.add_method('operator()', 
                   'void', 
                   [param('short unsigned int', 'arg0'), param('unsigned int', 'arg1'), param('unsigned int', 'arg2'), param('ns3::sip::SipElement::TransactionState', 'arg3')], 
                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3HashImplementation_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Implementation const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation() [constructor]
    cls.add_constructor([])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_pure_virtual=True, is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Implementation::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3HashFunctionFnv1a_methods(root_module, cls):
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Fnv1a const &', 'arg0')])
    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a() [constructor]
    cls.add_constructor([])
    ## hash-fnv.h (module 'core'): uint32_t ns3::Hash::Function::Fnv1a::GetHash32(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): uint64_t ns3::Hash::Function::Fnv1a::GetHash64(char const * buffer, size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
                   is_virtual=True)
    ## hash-fnv.h (module 'core'): void ns3::Hash::Function::Fnv1a::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash32_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash32 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Hash32Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash32Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash32::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionHash64_methods(root_module, cls):
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Hash64 const &', 'arg0')])
    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Hash64Function_ptr hp) [constructor]
    cls.add_constructor([param('ns3::Hash::Hash64Function_ptr', 'hp')])
    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3HashFunctionMurmur3_methods(root_module, cls):
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::Hash::Function::Murmur3 const &', 'arg0')])
    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]
    cls.add_constructor([])
    ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash32', 
                   'uint32_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
    cls.add_method('GetHash64', 
                   'uint64_t', 
                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
                   is_virtual=True)
    ## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]
    cls.add_method('clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscImsHelper_methods(root_module, cls):
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper::ImsHelper(ns3::psc::ImsHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::ImsHelper const &', 'arg0')])
    ## ims-helper.h (module 'psc'): ns3::psc::ImsHelper::ImsHelper() [constructor]
    cls.add_constructor([])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::ConnectPgw(ns3::Ptr<ns3::Node> pgwNode) [member function]
    cls.add_method('ConnectPgw', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'pgwNode')])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## ims-helper.h (module 'psc'): ns3::Address ns3::psc::ImsHelper::GetImsGmAddress() const [member function]
    cls.add_method('GetImsGmAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): ns3::Ptr<ns3::PointToPointNetDevice> ns3::psc::ImsHelper::GetImsGmDevice() const [member function]
    cls.add_method('GetImsGmDevice', 
                   'ns3::Ptr< ns3::PointToPointNetDevice >', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): ns3::Ptr<ns3::Node> ns3::psc::ImsHelper::GetImsNode() const [member function]
    cls.add_method('GetImsNode', 
                   'ns3::Ptr< ns3::Node >', 
                   [], 
                   is_const=True)
    ## ims-helper.h (module 'psc'): static ns3::TypeId ns3::psc::ImsHelper::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::SetImsIpv4Network(ns3::Ipv4Address baseAddress, ns3::Ipv4Mask baseMask) [member function]
    cls.add_method('SetImsIpv4Network', 
                   'void', 
                   [param('ns3::Ipv4Address', 'baseAddress'), param('ns3::Ipv4Mask', 'baseMask')])
    ## ims-helper.h (module 'psc'): void ns3::psc::ImsHelper::SetImsIpv6Network(ns3::Ipv6Address baseAddress, ns3::Ipv6Prefix basePrefix) [member function]
    cls.add_method('SetImsIpv6Network', 
                   'void', 
                   [param('ns3::Ipv6Address', 'baseAddress'), param('ns3::Ipv6Prefix', 'basePrefix')])
    return

def register_Ns3PscIntelHttpClient_methods(root_module, cls):
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient::IntelHttpClient(ns3::psc::IntelHttpClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpClient const &', 'arg0')])
    ## intel-http-client.h (module 'psc'): ns3::psc::IntelHttpClient::IntelHttpClient() [constructor]
    cls.add_constructor([])
    ## intel-http-client.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpClient::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::SetRemote(ns3::Address ip, uint16_t port) [member function]
    cls.add_method('SetRemote', 
                   'void', 
                   [param('ns3::Address', 'ip'), param('uint16_t', 'port')])
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## intel-http-client.h (module 'psc'): void ns3::psc::IntelHttpClient::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscIntelHttpClientHelper_methods(root_module, cls):
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper::IntelHttpClientHelper(ns3::psc::IntelHttpClientHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpClientHelper const &', 'arg0')])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpClientHelper::IntelHttpClientHelper(ns3::Address const & remoteAddress) [constructor]
    cls.add_constructor([param('ns3::Address const &', 'remoteAddress')])
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpClientHelper::Install(std::string const & nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): void ns3::psc::IntelHttpClientHelper::Set(std::string const & name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscIntelHttpHeader_methods(root_module, cls):
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::IntelHttpHeader(ns3::psc::IntelHttpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpHeader const &', 'arg0')])
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::IntelHttpHeader() [constructor]
    cls.add_constructor([])
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## intel-http-header.h (module 'psc'): static uint32_t ns3::psc::IntelHttpHeader::GetHeaderSize() [member function]
    cls.add_method('GetHeaderSize', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## intel-http-header.h (module 'psc'): ns3::TypeId ns3::psc::IntelHttpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): uint16_t ns3::psc::IntelHttpHeader::GetNumberEmbeddedObjects() const [member function]
    cls.add_method('GetNumberEmbeddedObjects', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::GetPayloadSize() const [member function]
    cls.add_method('GetPayloadSize', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): ns3::psc::IntelHttpHeader::Type ns3::psc::IntelHttpHeader::GetRequestType() const [member function]
    cls.add_method('GetRequestType', 
                   'ns3::psc::IntelHttpHeader::Type', 
                   [], 
                   is_const=True)
    ## intel-http-header.h (module 'psc'): uint32_t ns3::psc::IntelHttpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetNumberEmbeddedObjects(uint16_t numEmbeddedObjects) [member function]
    cls.add_method('SetNumberEmbeddedObjects', 
                   'void', 
                   [param('uint16_t', 'numEmbeddedObjects')])
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetPayloadSize(uint32_t payloadSize) [member function]
    cls.add_method('SetPayloadSize', 
                   'void', 
                   [param('uint32_t', 'payloadSize')])
    ## intel-http-header.h (module 'psc'): void ns3::psc::IntelHttpHeader::SetRequestType(ns3::psc::IntelHttpHeader::Type requestType) [member function]
    cls.add_method('SetRequestType', 
                   'void', 
                   [param('ns3::psc::IntelHttpHeader::Type', 'requestType')])
    return

def register_Ns3PscIntelHttpServer_methods(root_module, cls):
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer::IntelHttpServer(ns3::psc::IntelHttpServer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpServer const &', 'arg0')])
    ## intel-http-server.h (module 'psc'): ns3::psc::IntelHttpServer::IntelHttpServer() [constructor]
    cls.add_constructor([])
    ## intel-http-server.h (module 'psc'): static ns3::TypeId ns3::psc::IntelHttpServer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## intel-http-server.h (module 'psc'): void ns3::psc::IntelHttpServer::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscIntelHttpServerHelper_methods(root_module, cls):
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper::IntelHttpServerHelper(ns3::psc::IntelHttpServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::IntelHttpServerHelper const &', 'arg0')])
    ## intel-http-helper.h (module 'psc'): ns3::psc::IntelHttpServerHelper::IntelHttpServerHelper() [constructor]
    cls.add_constructor([])
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::IntelHttpServerHelper::Install(std::string const & nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_const=True)
    ## intel-http-helper.h (module 'psc'): void ns3::psc::IntelHttpServerHelper::Set(std::string const & name, ns3::AttributeValue const & value) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscMcpttCall_methods(root_module, cls):
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall(ns3::psc::McpttCall const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCall const &', 'arg0')])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall() [constructor]
    cls.add_constructor([])
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::McpttCall(ns3::psc::McpttCall::NetworkCallType callType) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::CloseFloorChannel() [member function]
    cls.add_method('CloseFloorChannel', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::CloseMediaChannel() [member function]
    cls.add_method('CloseMediaChannel', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetCallChannel() const [member function]
    cls.add_method('GetCallChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call.h (module 'psc'): uint16_t ns3::psc::McpttCall::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachine> ns3::psc::McpttCall::GetCallMachine() const [member function]
    cls.add_method('GetCallMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallMachine >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetFloorChannel() const [member function]
    cls.add_method('GetFloorChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorParticipant> ns3::psc::McpttCall::GetFloorMachine() const [member function]
    cls.add_method('GetFloorMachine', 
                   'ns3::Ptr< ns3::psc::McpttFloorParticipant >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttCall::GetMediaChannel() const [member function]
    cls.add_method('GetMediaChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::psc::McpttCall::NetworkCallType ns3::psc::McpttCall::GetNetworkCallType() const [member function]
    cls.add_method('GetNetworkCallType', 
                   'ns3::psc::McpttCall::NetworkCallType', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPttApp> ns3::psc::McpttCall::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttPttApp >', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Address ns3::psc::McpttCall::GetPeerSocketAddress() const [member function]
    cls.add_method('GetPeerSocketAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): uint32_t ns3::psc::McpttCall::GetPeerUserId() const [member function]
    cls.add_method('GetPeerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::GetPushOnSelect() const [member function]
    cls.add_method('GetPushOnSelect', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Time ns3::psc::McpttCall::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): ns3::Time ns3::psc::McpttCall::GetStopTime() const [member function]
    cls.add_method('GetStopTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCall::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::IsFloorChannelOpen() const [member function]
    cls.add_method('IsFloorChannelOpen', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): bool ns3::psc::McpttCall::IsMediaChannelOpen() const [member function]
    cls.add_method('IsMediaChannelOpen', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::OpenFloorChannel(ns3::Address const & peerAddr, uint16_t const port) [member function]
    cls.add_method('OpenFloorChannel', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddr'), param('uint16_t const', 'port')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::OpenMediaChannel(ns3::Address const & peerAddr, uint16_t const port) [member function]
    cls.add_method('OpenMediaChannel', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddr'), param('uint16_t const', 'port')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveSipEvent(char const * event, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipEvent', 
                   'void', 
                   [param('char const *', 'event'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Send(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SendSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & addr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'addr'), param('ns3::sip::SipHeader const &', 'hdr')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetCallMachine(ns3::Ptr<ns3::psc::McpttCallMachine> callMachine) [member function]
    cls.add_method('SetCallMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachine >', 'callMachine')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetFloorChannel(ns3::Ptr<ns3::psc::McpttChannel> floorChannel) [member function]
    cls.add_method('SetFloorChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel >', 'floorChannel')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetFloorMachine(ns3::Ptr<ns3::psc::McpttFloorParticipant> floorMachine) [member function]
    cls.add_method('SetFloorMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttFloorParticipant >', 'floorMachine')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetMediaChannel(ns3::Ptr<ns3::psc::McpttChannel> mediaChannel) [member function]
    cls.add_method('SetMediaChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel >', 'mediaChannel')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetNetworkCallType(ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('SetNetworkCallType', 
                   'void', 
                   [param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetOwner(ns3::Ptr<ns3::psc::McpttPttApp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPttApp >', 'owner')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetPushOnSelect(bool pushOnSelect) [member function]
    cls.add_method('SetPushOnSelect', 
                   'void', 
                   [param('bool', 'pushOnSelect')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetStartTime(ns3::Time startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::Time', 'startTime')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::SetStopTime(ns3::Time stopTime) [member function]
    cls.add_method('SetStopTime', 
                   'void', 
                   [param('ns3::Time', 'stopTime')])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [])
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveFloorPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveFloorPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   visibility='protected')
    ## mcptt-call.h (module 'psc'): void ns3::psc::McpttCall::ReceiveMediaPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveMediaPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   visibility='protected')
    return

def register_Ns3PscMcpttCallHelper_methods(root_module, cls):
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper::McpttCallHelper(ns3::psc::McpttCallHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallHelper const &', 'arg0')])
    ## mcptt-call-helper.h (module 'psc'): ns3::psc::McpttCallHelper::McpttCallHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-call-helper.h (module 'psc'): uint16_t ns3::psc::McpttCallHelper::AddCall(ns3::ApplicationContainer clients, ns3::Ptr<ns3::psc::McpttServerApp> server, uint32_t groupId, ns3::psc::McpttCallMsgFieldCallType callType, ns3::Time startTime, ns3::Time stopTime) [member function]
    cls.add_method('AddCall', 
                   'uint16_t', 
                   [param('ns3::ApplicationContainer', 'clients'), param('ns3::Ptr< ns3::psc::McpttServerApp >', 'server'), param('uint32_t', 'groupId'), param('ns3::psc::McpttCallMsgFieldCallType', 'callType'), param('ns3::Time', 'startTime'), param('ns3::Time', 'stopTime')])
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::AddCallOffNetwork(ns3::ApplicationContainer clients, uint16_t callId, ns3::Address peerAddress, uint32_t groupId, ns3::psc::McpttCallMsgFieldCallType callType, ns3::Time startTime, ns3::Time stopTime) [member function]
    cls.add_method('AddCallOffNetwork', 
                   'void', 
                   [param('ns3::ApplicationContainer', 'clients'), param('uint16_t', 'callId'), param('ns3::Address', 'peerAddress'), param('uint32_t', 'groupId'), param('ns3::psc::McpttCallMsgFieldCallType', 'callType'), param('ns3::Time', 'startTime'), param('ns3::Time', 'stopTime')])
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::ConfigureOffNetworkBasicGrpCall(ns3::ApplicationContainer & apps, ns3::Address peerAddress, uint32_t usersPerGroup, uint32_t baseGroupId=1) [member function]
    cls.add_method('ConfigureOffNetworkBasicGrpCall', 
                   'void', 
                   [param('ns3::ApplicationContainer &', 'apps'), param('ns3::Address', 'peerAddress'), param('uint32_t', 'usersPerGroup'), param('uint32_t', 'baseGroupId', default_value='1')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetArbitrator(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetArbitrator', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetParticipant(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetParticipant', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetServerCall(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-call-helper.h (module 'psc'): void ns3::psc::McpttCallHelper::SetTowardsParticipant(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetTowardsParticipant', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachine_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::McpttCallMachine(ns3::psc::McpttCallMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachine const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::McpttCallMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachine::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachine::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttCallMachine::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachine::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachine::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachine::CALL_INITIATED [variable]
    cls.add_static_attribute('CALL_INITIATED', 'char const * const', is_const=True)
    return

def register_Ns3PscMcpttCallMachineGrp_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp::McpttCallMachineGrp(ns3::psc::McpttCallMachineGrp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrp const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineGrp::McpttCallMachineGrp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrp::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineGrp::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineGrp::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineGrp::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasic_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic::McpttCallMachineGrpBasic(ns3::psc::McpttCallMachineGrpBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasic const &', 'arg0')])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasic::McpttCallMachineGrpBasic(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForAfterCallProbe() [member function]
    cls.add_method('CalcDelayForAfterCallProbe', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForMaxDuration() const [member function]
    cls.add_method('CalcDelayForMaxDuration', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallMachineGrpBasic::CalcDelayForPeriodicAnnoun() [member function]
    cls.add_method('CalcDelayForPeriodicAnnoun', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): uint16_t ns3::psc::McpttCallMachineGrpBasic::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineGrpBasic::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineGrpBasic::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineGrpBasic::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachine> ns3::psc::McpttCallMachineGrpBasic::GetCallTypeMachine() const [member function]
    cls.add_method('GetCallTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachine >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineGrpBasic::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachineGrpBasic::GetCfg3() const [member function]
    cls.add_method('GetCfg3', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> ns3::psc::McpttCallMachineGrpBasic::GetEmergMachine() const [member function]
    cls.add_method('GetEmergMachine', 
                   'ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrpBasic::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrpBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachineGrpBasic::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::GetProbeRespVal() const [member function]
    cls.add_method('GetProbeRespVal', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval ns3::psc::McpttCallMachineGrpBasic::GetRefInt() const [member function]
    cls.add_method('GetRefInt', 
                   'ns3::psc::McpttCallMsgFieldRefreshInterval', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::RandomVariableStream> ns3::psc::McpttCallMachineGrpBasic::GetRndDelays() const [member function]
    cls.add_method('GetRndDelays', 
                   'ns3::Ptr< ns3::RandomVariableStream >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachineGrpBasic::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime ns3::psc::McpttCallMachineGrpBasic::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::psc::McpttCallMsgFieldStartTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> ns3::psc::McpttCallMachineGrpBasic::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasic::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg1() const [member function]
    cls.add_method('GetTfg1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg2() const [member function]
    cls.add_method('GetTfg2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg3() const [member function]
    cls.add_method('GetTfg3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg4() const [member function]
    cls.add_method('GetTfg4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg5() const [member function]
    cls.add_method('GetTfg5', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBasic::GetTfg6() const [member function]
    cls.add_method('GetTfg6', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrpBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachineGrpBasic> ns3::psc::McpttCallMachineGrpBasic::GetTypeMachine() const [member function]
    cls.add_method('GetTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachineGrpBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsConfirmMode() const [member function]
    cls.add_method('IsConfirmMode', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::IsUserAckReq() const [member function]
    cls.add_method('IsUserAckReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::NotifyMerge(uint16_t callId) [member function]
    cls.add_method('NotifyMerge', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::NotifyNewCall(uint16_t callId) [member function]
    cls.add_method('NotifyNewCall', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallAccept(ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertAck(ns3::psc::McpttCallMsgGrpEmergAlertAck const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergAlertCancelAck(ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallImmPerilEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReceiveGrpCallProbe(ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetCfg3(ns3::Ptr<ns3::psc::McpttCounter> cfg3) [member function]
    cls.add_method('SetCfg3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg1(ns3::Time const & delayTfg1) [member function]
    cls.add_method('SetDelayTfg1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg3(ns3::Time const & delayTfg3) [member function]
    cls.add_method('SetDelayTfg3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg4(ns3::Time const & delayTfg4) [member function]
    cls.add_method('SetDelayTfg4', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg4')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetDelayTfg5(ns3::Time const & delayTfg5) [member function]
    cls.add_method('SetDelayTfg5', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg5')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetEmergMachine(ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> emergMachine) [member function]
    cls.add_method('SetEmergMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 'emergMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetLimitCfg3(uint32_t limitCfg3) [member function]
    cls.add_method('SetLimitCfg3', 
                   'void', 
                   [param('uint32_t', 'limitCfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetMergeCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const mergeCb) [member function]
    cls.add_method('SetMergeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'mergeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetProbeRespVal(bool const & probeRespVal) [member function]
    cls.add_method('SetProbeRespVal', 
                   'void', 
                   [param('bool const &', 'probeRespVal')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRefInt(ns3::psc::McpttCallMsgFieldRefreshInterval const & refInt) [member function]
    cls.add_method('SetRefInt', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'refInt')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRefIntVal(uint16_t refIntVal) [member function]
    cls.add_method('SetRefIntVal', 
                   'void', 
                   [param('uint16_t', 'refIntVal')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetRndDelays(ns3::Ptr<ns3::RandomVariableStream> rndDelays) [member function]
    cls.add_method('SetRndDelays', 
                   'void', 
                   [param('ns3::Ptr< ns3::RandomVariableStream >', 'rndDelays')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStartTime(ns3::psc::McpttCallMsgFieldStartTime const & startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldStartTime const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg1(ns3::Ptr<ns3::psc::McpttTimer> tfg1) [member function]
    cls.add_method('SetTfg1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg2(ns3::Ptr<ns3::psc::McpttTimer> tfg2) [member function]
    cls.add_method('SetTfg2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg3(ns3::Ptr<ns3::psc::McpttTimer> tfg3) [member function]
    cls.add_method('SetTfg3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg4(ns3::Ptr<ns3::psc::McpttTimer> tfg4) [member function]
    cls.add_method('SetTfg4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg4')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg5(ns3::Ptr<ns3::psc::McpttTimer> tfg5) [member function]
    cls.add_method('SetTfg5', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg5')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTfg6(ns3::Ptr<ns3::psc::McpttTimer> tfg6) [member function]
    cls.add_method('SetTfg6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg6')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetTypeMachine(ns3::Ptr<ns3::psc::McpttCallTypeMachineGrpBasic> typeMachine) [member function]
    cls.add_method('SetTypeMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachineGrpBasic >', 'typeMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg1() [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg2() [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg3() [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg4() [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg5() [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::ExpiryOfTfg6() [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasic::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBasicState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState::McpttCallMachineGrpBasicState(ns3::psc::McpttCallMachineGrpBasicState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicState const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg2(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg3(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg5(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ExpiryOfTfg6(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicState::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallAccept(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReceiveGrpCallProbe(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicState::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicState::McpttCallMachineGrpBasicState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS1_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1::McpttCallMachineGrpBasicStateS1(ns3::psc::McpttCallMachineGrpBasicStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS1 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS1::McpttCallMachineGrpBasicStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS1> ns3::psc::McpttCallMachineGrpBasicStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS1::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS1::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS2_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2::McpttCallMachineGrpBasicStateS2(ns3::psc::McpttCallMachineGrpBasicStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS2 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS2::McpttCallMachineGrpBasicStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ExpiryOfTfg3(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS2> ns3::psc::McpttCallMachineGrpBasicStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS2::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS3_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3::McpttCallMachineGrpBasicStateS3(ns3::psc::McpttCallMachineGrpBasicStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS3 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS3::McpttCallMachineGrpBasicStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ExpiryOfTfg2(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ExpiryOfTfg6(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS3> ns3::psc::McpttCallMachineGrpBasicStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS3::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallAccept(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAccept const & msg) [member function]
    cls.add_method('ReceiveGrpCallAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReceiveGrpCallProbe(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpProbe const & msg) [member function]
    cls.add_method('ReceiveGrpCallProbe', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpProbe const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS3::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS4_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4::McpttCallMachineGrpBasicStateS4(ns3::psc::McpttCallMachineGrpBasicStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS4 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS4::McpttCallMachineGrpBasicStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS4> ns3::psc::McpttCallMachineGrpBasicStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS4::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS4::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS5_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5::McpttCallMachineGrpBasicStateS5(ns3::psc::McpttCallMachineGrpBasicStateS5 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS5 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS5::McpttCallMachineGrpBasicStateS5() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::AcceptCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::ExpiryOfTfg4(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS5> ns3::psc::McpttCallMachineGrpBasicStateS5::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS5 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS5::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS5::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBasicStateS5::IsCallOngoing(ns3::psc::McpttCallMachineGrpBasic const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBasic const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::RejectCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS5::ReleaseCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS6_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6::McpttCallMachineGrpBasicStateS6(ns3::psc::McpttCallMachineGrpBasicStateS6 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS6 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS6::McpttCallMachineGrpBasicStateS6() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::ExpiryOfTfg5(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS6> ns3::psc::McpttCallMachineGrpBasicStateS6::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS6 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS6::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS6::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS6::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBasicStateS7_methods(root_module, cls):
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7::McpttCallMachineGrpBasicStateS7(ns3::psc::McpttCallMachineGrpBasicStateS7 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBasicStateS7 const &', 'arg0')])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBasicStateS7::McpttCallMachineGrpBasicStateS7() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::ExpiryOfTfg1(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBasicStateS7> ns3::psc::McpttCallMachineGrpBasicStateS7::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasicStateS7 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS7::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBasicStateS7::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::InitiateCall(ns3::psc::McpttCallMachineGrpBasic & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-basic-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBasicStateS7::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMachineGrpBasic & machine, ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'machine'), param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcast_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast::McpttCallMachineGrpBroadcast(ns3::psc::McpttCallMachineGrpBroadcast const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcast::McpttCallMachineGrpBroadcast(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint16_t ns3::psc::McpttCallMachineGrpBroadcast::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineGrpBroadcast::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineGrpBroadcast::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineGrpBroadcast::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineGrpBroadcast::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachineGrpBroadcast::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineGrpBroadcast::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachineGrpBroadcast::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): uint8_t ns3::psc::McpttCallMachineGrpBroadcast::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachineGrpBroadcast::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> ns3::psc::McpttCallMachineGrpBroadcast::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcast::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb1() const [member function]
    cls.add_method('GetTfb1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb2() const [member function]
    cls.add_method('GetTfb2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachineGrpBroadcast::GetTfb3() const [member function]
    cls.add_method('GetTfb3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineGrpBroadcast::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::IsUserAckReq() const [member function]
    cls.add_method('IsUserAckReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMsgGrpBroadcast const & msg) [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb1(ns3::Time const & delayTfb1) [member function]
    cls.add_method('SetDelayTfb1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb2(ns3::Time const & delayTfb2) [member function]
    cls.add_method('SetDelayTfb2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetDelayTfb3(ns3::Time const & delayTfb3) [member function]
    cls.add_method('SetDelayTfb3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfb3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetState(ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb1(ns3::Ptr<ns3::psc::McpttTimer> tfb1) [member function]
    cls.add_method('SetTfb1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb1')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb2(ns3::Ptr<ns3::psc::McpttTimer> tfb2) [member function]
    cls.add_method('SetTfb2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb2')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetTfb3(ns3::Ptr<ns3::psc::McpttTimer> tfb3) [member function]
    cls.add_method('SetTfb3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfb3')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::TakeNewCallNotification(uint16_t callId) [member function]
    cls.add_method('TakeNewCallNotification', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb1() [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb2() [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::ExpiryOfTfb3() [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcast::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-grp-broadcast.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcast::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState::McpttCallMachineGrpBroadcastState(ns3::psc::McpttCallMachineGrpBroadcastState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastState const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::AcceptCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb2(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ExpiryOfTfb3(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::InitiateCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcastState::IsCallOngoing(ns3::psc::McpttCallMachineGrpBroadcast const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::RejectCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastState::ReleaseCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastState::McpttCallMachineGrpBroadcastState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB1_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1::McpttCallMachineGrpBroadcastStateB1(ns3::psc::McpttCallMachineGrpBroadcastStateB1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB1 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB1::McpttCallMachineGrpBroadcastStateB1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB1> ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB1::InitiateCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB1::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB2_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2::McpttCallMachineGrpBroadcastStateB2(ns3::psc::McpttCallMachineGrpBroadcastStateB2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB2 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB2::McpttCallMachineGrpBroadcastStateB2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ExpiryOfTfb2(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB2> ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): bool ns3::psc::McpttCallMachineGrpBroadcastStateB2::IsCallOngoing(ns3::psc::McpttCallMachineGrpBroadcast const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB2::ReleaseCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB3_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3::McpttCallMachineGrpBroadcastStateB3(ns3::psc::McpttCallMachineGrpBroadcastStateB3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB3 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB3::McpttCallMachineGrpBroadcastStateB3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::AcceptCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::ExpiryOfTfb3(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB3> ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB3::RejectCall(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineGrpBroadcastStateB4_methods(root_module, cls):
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4::McpttCallMachineGrpBroadcastStateB4(ns3::psc::McpttCallMachineGrpBroadcastStateB4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineGrpBroadcastStateB4 const &', 'arg0')])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttCallMachineGrpBroadcastStateB4::McpttCallMachineGrpBroadcastStateB4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ExpiryOfTfb1(ns3::psc::McpttCallMachineGrpBroadcast & machine) const [member function]
    cls.add_method('ExpiryOfTfb1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachineGrpBroadcastStateB4> ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBroadcastStateB4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineGrpBroadcastStateB4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ReceiveGrpCallBroadcast(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcast const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcast', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-grp-broadcast-state.h (module 'psc'): void ns3::psc::McpttCallMachineGrpBroadcastStateB4::ReceiveGrpCallBroadcastEnd(ns3::psc::McpttCallMachineGrpBroadcast & machine, ns3::psc::McpttCallMsgGrpBroadcastEnd const & msg) const [member function]
    cls.add_method('ReceiveGrpCallBroadcastEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'machine'), param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMachineNull_methods(root_module, cls):
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull::McpttCallMachineNull(ns3::psc::McpttCallMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachineNull const &', 'arg0')])
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMachineNull::McpttCallMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachineNull::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachineNull::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachineNull::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttCallMachineNull::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachineNull::GetNullStateId() [member function]
    cls.add_method('GetNullStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachineNull::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): bool ns3::psc::McpttCallMachineNull::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine.h (module 'psc'): void ns3::psc::McpttCallMachineNull::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivate_methods(root_module, cls):
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate::McpttCallMachinePrivate(ns3::psc::McpttCallMachinePrivate const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivate const &', 'arg0')])
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMachinePrivate::McpttCallMachinePrivate(ns3::Ptr<ns3::psc::McpttCall> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCall >', 'owner', default_value='0')])
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ChangeState(ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): uint16_t ns3::psc::McpttCallMachinePrivate::GenerateRandomCallId() const [member function]
    cls.add_method('GenerateRandomCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttCallMachinePrivate::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMachinePrivate::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMachinePrivate::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachine> ns3::psc::McpttCallMachinePrivate::GetCallTypeMachine() const [member function]
    cls.add_method('GetCallTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachine >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachinePrivate::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMachinePrivate::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): uint32_t ns3::psc::McpttCallMachinePrivate::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp1() const [member function]
    cls.add_method('GetCfp1', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp3() const [member function]
    cls.add_method('GetCfp3', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp4() const [member function]
    cls.add_method('GetCfp4', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallMachinePrivate::GetCfp6() const [member function]
    cls.add_method('GetCfp6', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode ns3::psc::McpttCallMachinePrivate::GetCommMode() const [member function]
    cls.add_method('GetCommMode', 
                   'ns3::psc::McpttCallMsgFieldCommMode', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> ns3::psc::McpttCallMachinePrivate::GetEmergMachine() const [member function]
    cls.add_method('GetEmergMachine', 
                   'ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMachinePrivate::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMachinePrivate::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachinePrivate::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMachinePrivate::GetSdpEmerg() const [member function]
    cls.add_method('GetSdpEmerg', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> ns3::psc::McpttCallMachinePrivate::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivate::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp1() const [member function]
    cls.add_method('GetTfp1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp2() const [member function]
    cls.add_method('GetTfp2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp3() const [member function]
    cls.add_method('GetTfp3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp4() const [member function]
    cls.add_method('GetTfp4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp5() const [member function]
    cls.add_method('GetTfp5', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp6() const [member function]
    cls.add_method('GetTfp6', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp7() const [member function]
    cls.add_method('GetTfp7', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallMachinePrivate::GetTfp8() const [member function]
    cls.add_method('GetTfp8', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMachinePrivate::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivate> ns3::psc::McpttCallMachinePrivate::GetTypeMachine() const [member function]
    cls.add_method('GetTypeMachine', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivate >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsAutoCommencement() const [member function]
    cls.add_method('IsAutoCommencement', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsFailure() const [member function]
    cls.add_method('IsFailure', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::NotifyNewCall(uint16_t callId) [member function]
    cls.add_method('NotifyNewCall', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveAccept(ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveEmergencyCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveEmergencyCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveReject(ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveRelease(ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveReleaseAck(ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveRinging(ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReceiveSetupRequest(ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeId) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerId) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp1(ns3::Ptr<ns3::psc::McpttCounter> cfp1) [member function]
    cls.add_method('SetCfp1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp3(ns3::Ptr<ns3::psc::McpttCounter> cfp3) [member function]
    cls.add_method('SetCfp3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp4(ns3::Ptr<ns3::psc::McpttCounter> cfp4) [member function]
    cls.add_method('SetCfp4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCfp6(ns3::Ptr<ns3::psc::McpttCounter> cfp6) [member function]
    cls.add_method('SetCfp6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetCommMode(ns3::psc::McpttCallMsgFieldCommMode const & commMode) [member function]
    cls.add_method('SetCommMode', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCommMode const &', 'commMode')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp1(ns3::Time const & delayTfp1) [member function]
    cls.add_method('SetDelayTfp1', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp2(ns3::Time const & delayTfp2) [member function]
    cls.add_method('SetDelayTfp2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp2')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp3(ns3::Time const & delayTfp3) [member function]
    cls.add_method('SetDelayTfp3', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp4(ns3::Time const & delayTfp4) [member function]
    cls.add_method('SetDelayTfp4', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp5(ns3::Time const & delayTfp5) [member function]
    cls.add_method('SetDelayTfp5', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp5')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp6(ns3::Time const & delayTfp6) [member function]
    cls.add_method('SetDelayTfp6', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp7(ns3::Time const & delayTfp7) [member function]
    cls.add_method('SetDelayTfp7', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp7')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetDelayTfp8(ns3::Time const & delayTfp8) [member function]
    cls.add_method('SetDelayTfp8', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfp8')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetEmergMachine(ns3::Ptr<ns3::psc::McpttEmergAlertMachineBasic> emergMachine) [member function]
    cls.add_method('SetEmergMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttEmergAlertMachineBasic >', 'emergMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp1(uint32_t limitCfp1) [member function]
    cls.add_method('SetLimitCfp1', 
                   'void', 
                   [param('uint32_t', 'limitCfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp3(uint32_t limitCfp3) [member function]
    cls.add_method('SetLimitCfp3', 
                   'void', 
                   [param('uint32_t', 'limitCfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp4(uint32_t limitCfp4) [member function]
    cls.add_method('SetLimitCfp4', 
                   'void', 
                   [param('uint32_t', 'limitCfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetLimitCfp6(uint32_t limitCfp6) [member function]
    cls.add_method('SetLimitCfp6', 
                   'void', 
                   [param('uint32_t', 'limitCfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdp) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdp')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetSdpEmerg(ns3::psc::McpttCallMsgFieldSdp const & sdpEmerg) [member function]
    cls.add_method('SetSdpEmerg', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpEmerg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetState(ns3::Ptr<ns3::psc::McpttCallMachinePrivateState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp1(ns3::Ptr<ns3::psc::McpttTimer> tfp1) [member function]
    cls.add_method('SetTfp1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp1')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp2(ns3::Ptr<ns3::psc::McpttTimer> tfp2) [member function]
    cls.add_method('SetTfp2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp2')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp3(ns3::Ptr<ns3::psc::McpttTimer> tfp3) [member function]
    cls.add_method('SetTfp3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp3')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp4(ns3::Ptr<ns3::psc::McpttTimer> tfp4) [member function]
    cls.add_method('SetTfp4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp4')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp5(ns3::Ptr<ns3::psc::McpttTimer> tfp5) [member function]
    cls.add_method('SetTfp5', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp5')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp6(ns3::Ptr<ns3::psc::McpttTimer> tfp6) [member function]
    cls.add_method('SetTfp6', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp6')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp7(ns3::Ptr<ns3::psc::McpttTimer> tfp7) [member function]
    cls.add_method('SetTfp7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp7')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTfp8(ns3::Ptr<ns3::psc::McpttTimer> tfp8) [member function]
    cls.add_method('SetTfp8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfp8')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetTypeMachine(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivate> typeMachine) [member function]
    cls.add_method('SetTypeMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivate >', 'typeMachine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp1() [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp2() [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp3() [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp4() [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp5() [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp6() [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp7() [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::ExpiryOfTfp8() [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivate::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-call-machine-private.h (module 'psc'): void ns3::psc::McpttCallMachinePrivate::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivateState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState::McpttCallMachinePrivateState(ns3::psc::McpttCallMachinePrivateState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateState const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::AcceptCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp3(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp4(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp5(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp6(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ExpiryOfTfp7(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivateState::IsCallOngoing(ns3::psc::McpttCallMachinePrivate const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachinePrivate const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveAccept(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveAcceptAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveMedia(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveReject(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveReleaseAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveRinging(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::RejectCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateState::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateState::McpttCallMachinePrivateState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallMachinePrivateStateP0_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0::McpttCallMachinePrivateStateP0(ns3::psc::McpttCallMachinePrivateStateP0 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP0 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP0::McpttCallMachinePrivateStateP0() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP0> ns3::psc::McpttCallMachinePrivateStateP0::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP0 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP0::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP0::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP0::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP0::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP1_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1::McpttCallMachinePrivateStateP1(ns3::psc::McpttCallMachinePrivateStateP1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP1 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP1::McpttCallMachinePrivateStateP1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ExpiryOfTfp7(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp7', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP1> ns3::psc::McpttCallMachinePrivateStateP1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::InitiateCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP1::ReceiveSetupRequest(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP2_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2::McpttCallMachinePrivateStateP2(ns3::psc::McpttCallMachinePrivateStateP2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP2 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP2::McpttCallMachinePrivateStateP2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP2> ns3::psc::McpttCallMachinePrivateStateP2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveAccept(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveReject(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReceiveRinging(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRinging const & msg) [member function]
    cls.add_method('ReceiveRinging', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRinging const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP2::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP3_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3::McpttCallMachinePrivateStateP3(ns3::psc::McpttCallMachinePrivateStateP3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP3 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP3::McpttCallMachinePrivateStateP3() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP3::ExpiryOfTfp3(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp3', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP3> ns3::psc::McpttCallMachinePrivateStateP3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP3 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP3::ReceiveReleaseAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReleaseAck const & msg) [member function]
    cls.add_method('ReceiveReleaseAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP4_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4::McpttCallMachinePrivateStateP4(ns3::psc::McpttCallMachinePrivateStateP4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP4 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP4::McpttCallMachinePrivateStateP4() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp1(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp5(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp5', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ExpiryOfTfp6(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP4> ns3::psc::McpttCallMachinePrivateStateP4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP4 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): bool ns3::psc::McpttCallMachinePrivateStateP4::IsCallOngoing(ns3::psc::McpttCallMachinePrivate const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttCallMachinePrivate const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP4::ReleaseCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMachinePrivateStateP5_methods(root_module, cls):
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5::McpttCallMachinePrivateStateP5(ns3::psc::McpttCallMachinePrivateStateP5 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMachinePrivateStateP5 const &', 'arg0')])
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttCallMachinePrivateStateP5::McpttCallMachinePrivateStateP5() [constructor]
    cls.add_constructor([])
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::AcceptCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ExpiryOfTfp2(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp2', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ExpiryOfTfp4(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp4', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallMachinePrivateStateP5> ns3::psc::McpttCallMachinePrivateStateP5::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivateStateP5 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP5::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallMachinePrivateStateP5::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveAcceptAck(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveMedia(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::ReceiveRelease(ns3::psc::McpttCallMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallMachinePrivateStateP5::RejectCall(ns3::psc::McpttCallMachinePrivate & machine) [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgField_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField::McpttCallMsgField(ns3::psc::McpttCallMsgField const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgField const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgField::McpttCallMsgField() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgField::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgField::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgField::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgField::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgField::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgField::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldCallId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId(ns3::psc::McpttCallMsgFieldCallId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCallId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId::McpttCallMsgFieldCallId(uint16_t callId) [constructor]
    cls.add_constructor([param('uint16_t', 'callId')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldCallId::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCallId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallId::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCallId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallId::SetCallId(uint16_t id) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'id')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldCallType_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType(ns3::psc::McpttCallMsgFieldCallType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCallType const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::McpttCallMsgFieldCallType(uint8_t type) [constructor]
    cls.add_constructor([param('uint8_t', 'type')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static std::string ns3::psc::McpttCallMsgFieldCallType::GetCallTypeName(uint8_t type) [member function]
    cls.add_method('GetCallTypeName', 
                   'std::string', 
                   [param('uint8_t', 'type')], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldCallType::GetCallTypePriority(uint8_t type) [member function]
    cls.add_method('GetCallTypePriority', 
                   'uint8_t', 
                   [param('uint8_t', 'type')], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCallType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCallType::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldCallType::GetType() const [member function]
    cls.add_method('GetType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCallType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCallType::SetType(uint8_t type) [member function]
    cls.add_method('SetType', 
                   'void', 
                   [param('uint8_t', 'type')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP [variable]
    cls.add_static_attribute('BASIC_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::BROADCAST_GROUP [variable]
    cls.add_static_attribute('BROADCAST_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::EMERGENCY_GROUP [variable]
    cls.add_static_attribute('EMERGENCY_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::EMERGENCY_PRIVATE [variable]
    cls.add_static_attribute('EMERGENCY_PRIVATE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::IMMINENT_PERIL_GROUP [variable]
    cls.add_static_attribute('IMMINENT_PERIL_GROUP', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType::PRIVATE [variable]
    cls.add_static_attribute('PRIVATE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldCommMode_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode(ns3::psc::McpttCallMsgFieldCommMode const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldCommMode const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::McpttCallMsgFieldCommMode(uint8_t commMode) [constructor]
    cls.add_constructor([param('uint8_t', 'commMode')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCommMode::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldCommMode::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldCommMode::GetMode() const [member function]
    cls.add_method('GetMode', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldCommMode::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldCommMode::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldCommMode::SetMode(uint8_t mode) [member function]
    cls.add_method('SetMode', 
                   'void', 
                   [param('uint8_t', 'mode')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::AUTOMATIC_MODE [variable]
    cls.add_static_attribute('AUTOMATIC_MODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode::MANUAL_MODE [variable]
    cls.add_static_attribute('MANUAL_MODE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldConfirmMode_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode::McpttCallMsgFieldConfirmMode(ns3::psc::McpttCallMsgFieldConfirmMode const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldConfirmMode const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldConfirmMode::McpttCallMsgFieldConfirmMode() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldConfirmMode::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldConfirmMode::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldConfirmMode::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldConfirmMode::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldConfirmMode::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldConfirmMode::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldConfirmMode::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldLastChgTime_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime::McpttCallMsgFieldLastChgTime(ns3::Time const & time) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'time')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldLastChgTime::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldLastChgTime::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldLastChgTime::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Time ns3::psc::McpttCallMsgFieldLastChgTime::GetTime() const [member function]
    cls.add_method('GetTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldLastChgTime::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldLastChgTime::SetTime(ns3::Time const & time) [member function]
    cls.add_method('SetTime', 
                   'void', 
                   [param('ns3::Time const &', 'time')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldMsgType_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType(ns3::psc::McpttCallMsgFieldMsgType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldMsgType const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType::McpttCallMsgFieldMsgType(uint8_t id) [constructor]
    cls.add_constructor([param('uint8_t', 'id')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldMsgType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldMsgType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldMsgType::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldMsgType::GetType() const [member function]
    cls.add_method('GetType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldMsgType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldMsgType::SetType(uint8_t type) [member function]
    cls.add_method('SetType', 
                   'void', 
                   [param('uint8_t', 'type')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldProbeResp_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp::McpttCallMsgFieldProbeResp(ns3::psc::McpttCallMsgFieldProbeResp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldProbeResp const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldProbeResp::McpttCallMsgFieldProbeResp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldProbeResp::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldProbeResp::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldProbeResp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldProbeResp::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldProbeResp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldProbeResp::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldProbeResp::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldReason_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason(ns3::psc::McpttCallMsgFieldReason const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldReason const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::McpttCallMsgFieldReason(uint8_t reason) [constructor]
    cls.add_constructor([param('uint8_t', 'reason')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldReason::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldReason::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttCallMsgFieldReason::GetReason() const [member function]
    cls.add_method('GetReason', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldReason::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldReason::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldReason::SetReason(uint8_t mode) [member function]
    cls.add_method('SetReason', 
                   'void', 
                   [param('uint8_t', 'mode')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::BUSY [variable]
    cls.add_static_attribute('BUSY', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::FAILED [variable]
    cls.add_static_attribute('FAILED', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::NO_ANSWER [variable]
    cls.add_static_attribute('NO_ANSWER', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::REJECT [variable]
    cls.add_static_attribute('REJECT', 'uint8_t const', is_const=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason::SECURITY_FAILURE [variable]
    cls.add_static_attribute('SECURITY_FAILURE', 'uint8_t const', is_const=True)
    return

def register_Ns3PscMcpttCallMsgFieldRefreshInterval_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval(ns3::psc::McpttCallMsgFieldRefreshInterval const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval::McpttCallMsgFieldRefreshInterval(uint16_t interval) [constructor]
    cls.add_constructor([param('uint16_t', 'interval')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldRefreshInterval::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldRefreshInterval::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldRefreshInterval::GetInterval() const [member function]
    cls.add_method('GetInterval', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldRefreshInterval::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldRefreshInterval::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldRefreshInterval::SetInterval(uint16_t interval) [member function]
    cls.add_method('SetInterval', 
                   'void', 
                   [param('uint16_t', 'interval')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldStartTime_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime(ns3::psc::McpttCallMsgFieldStartTime const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldStartTime const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime::McpttCallMsgFieldStartTime(ns3::Time const & time) [constructor]
    cls.add_constructor([param('ns3::Time const &', 'time')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldStartTime::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldStartTime::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldStartTime::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Time ns3::psc::McpttCallMsgFieldStartTime::GetTime() const [member function]
    cls.add_method('GetTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldStartTime::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldStartTime::SetTime(ns3::Time const & time) [member function]
    cls.add_method('SetTime', 
                   'void', 
                   [param('ns3::Time const &', 'time')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldType6_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6(ns3::psc::McpttCallMsgFieldType6 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldType6 const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldType6::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldType6::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldType6::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldType6::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldType6::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldType6::McpttCallMsgFieldType6(uint16_t length) [constructor]
    cls.add_constructor([param('uint16_t', 'length')], 
                        visibility='protected')
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldType6::SetLength(uint16_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint16_t', 'length')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldUserId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId(ns3::psc::McpttCallMsgFieldUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldUserId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId::McpttCallMsgFieldUserId(uint32_t id) [constructor]
    cls.add_constructor([param('uint32_t', 'id')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserId::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserId::SetId(uint32_t id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('uint32_t', 'id')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldUserLoc_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc::McpttCallMsgFieldUserLoc(ns3::Vector const & loc) [constructor]
    cls.add_constructor([param('ns3::Vector const &', 'loc')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserLoc::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static uint8_t ns3::psc::McpttCallMsgFieldUserLoc::GetIei() [member function]
    cls.add_method('GetIei', 
                   'uint8_t', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldUserLoc::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Vector ns3::psc::McpttCallMsgFieldUserLoc::GetLoc() const [member function]
    cls.add_method('GetLoc', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldUserLoc::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldUserLoc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldUserLoc::SetLoc(ns3::Vector const & loc) [member function]
    cls.add_method('SetLoc', 
                   'void', 
                   [param('ns3::Vector const &', 'loc')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachine_methods(root_module, cls):
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine::McpttCallTypeMachine(ns3::psc::McpttCallTypeMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachine const &', 'arg0')])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallTypeMachine::McpttCallTypeMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachine::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine.h (module 'psc'): bool ns3::psc::McpttCallTypeMachine::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine.h (module 'psc'): void ns3::psc::McpttCallTypeMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachineGrpBasic_methods(root_module, cls):
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::McpttCallTypeMachineGrpBasic(ns3::psc::McpttCallTypeMachineGrpBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachineGrpBasic const &', 'arg0')])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::McpttCallTypeMachineGrpBasic(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 'owner', default_value='0')])
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallTypeMachineGrpBasic::CalcDelayForTfg13() const [member function]
    cls.add_method('CalcDelayForTfg13', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Time ns3::psc::McpttCallTypeMachineGrpBasic::CalcDelayForTfg14() const [member function]
    cls.add_method('CalcDelayForTfg14', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::CallStarted() [member function]
    cls.add_method('CallStarted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ChangeState(ns3::psc::McpttEntityId const & stateId) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'stateId')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Downgrade() [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg1() [member function]
    cls.add_method('ExpiryOfTfg1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachineGrpBasic::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallTypeMachineGrpBasic::GetCfg11() const [member function]
    cls.add_method('GetCfg11', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttCallTypeMachineGrpBasic::GetCfg12() const [member function]
    cls.add_method('GetCfg12', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachineGrpBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallTypeMachineGrpBasic::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallTypeMachineGrpBasic::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> ns3::psc::McpttCallTypeMachineGrpBasic::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachineGrpBasic::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallTypeMachineGrpBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachineGrpBasic::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg11() const [member function]
    cls.add_method('GetTfg11', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg12() const [member function]
    cls.add_method('GetTfg12', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg13() const [member function]
    cls.add_method('GetTfg13', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttCallTypeMachineGrpBasic::GetTfg14() const [member function]
    cls.add_method('GetTfg14', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachineGrpBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::InitiateCall(uint8_t callType=ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('uint8_t', 'callType', default_value='ns3::psc::McpttCallMsgFieldCallType::BASIC_GROUP')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): bool ns3::psc::McpttCallTypeMachineGrpBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & msg) [member function]
    cls.add_method('ReceiveGrpCallAnnoun', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReceiveGrpCallImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & msg) [member function]
    cls.add_method('ReceiveGrpCallImmPerilEnd', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCfg11(ns3::Ptr<ns3::psc::McpttCounter> cfg11) [member function]
    cls.add_method('SetCfg11', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetCfg12(ns3::Ptr<ns3::psc::McpttCounter> cfg12) [member function]
    cls.add_method('SetCfg12', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'cfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDelayTfg11(ns3::Time const & delayTfg11) [member function]
    cls.add_method('SetDelayTfg11', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDelayTfg12(ns3::Time const & delayTfg12) [member function]
    cls.add_method('SetDelayTfg12', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLimitCfg11(uint32_t limitCfg11) [member function]
    cls.add_method('SetLimitCfg11', 
                   'void', 
                   [param('uint32_t', 'limitCfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetLimitCfg12(uint32_t limitCfg12) [member function]
    cls.add_method('SetLimitCfg12', 
                   'void', 
                   [param('uint32_t', 'limitCfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachineGrpBasic> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrpBasic >', 'owner')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetStateId(ns3::psc::McpttEntityId const & state) [member function]
    cls.add_method('SetStateId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg11(ns3::Ptr<ns3::psc::McpttTimer> tfg11) [member function]
    cls.add_method('SetTfg11', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg11')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg12(ns3::Ptr<ns3::psc::McpttTimer> tfg12) [member function]
    cls.add_method('SetTfg12', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg12')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg13(ns3::Ptr<ns3::psc::McpttTimer> tfg13) [member function]
    cls.add_method('SetTfg13', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg13')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetTfg14(ns3::Ptr<ns3::psc::McpttTimer> tfg14) [member function]
    cls.add_method('SetTfg14', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfg14')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::UpgradeTo(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T0 [variable]
    cls.add_static_attribute('T0', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T1 [variable]
    cls.add_static_attribute('T1', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T2 [variable]
    cls.add_static_attribute('T2', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): ns3::psc::McpttCallTypeMachineGrpBasic::T3 [variable]
    cls.add_static_attribute('T3', 'ns3::psc::McpttEntityId const', is_const=True)
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg11() [member function]
    cls.add_method('ExpiryOfTfg11', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg12() [member function]
    cls.add_method('ExpiryOfTfg12', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg13() [member function]
    cls.add_method('ExpiryOfTfg13', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-type-machine-grp-basic.h (module 'psc'): void ns3::psc::McpttCallTypeMachineGrpBasic::ExpiryOfTfg14() [member function]
    cls.add_method('ExpiryOfTfg14', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivate_methods(root_module, cls):
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate::McpttCallTypeMachinePrivate(ns3::psc::McpttCallTypeMachinePrivate const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivate const &', 'arg0')])
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivate::McpttCallTypeMachinePrivate(ns3::Ptr<ns3::psc::McpttCallMachinePrivate> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 'owner', default_value='0')])
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ChangeState(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Downgrade() [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp1() [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp6() [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ExpiryOfTfp8() [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallTypeMachinePrivate::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallTypeMachinePrivate::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachinePrivate> ns3::psc::McpttCallTypeMachinePrivate::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): uint8_t ns3::psc::McpttCallTypeMachinePrivate::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): bool ns3::psc::McpttCallTypeMachinePrivate::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> ns3::psc::McpttCallTypeMachinePrivate::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivate::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallTypeMachinePrivate::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): bool ns3::psc::McpttCallTypeMachinePrivate::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveAccept(ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveEmergencyCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveEmergencyCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveReject(ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveRelease(ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReceiveSetupRequest(ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetDowngradeCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const downgradeCb) [member function]
    cls.add_method('SetDowngradeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'downgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachinePrivate> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachinePrivate >', 'owner')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetState(ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateState >', 'state')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::SetUpgradeCb(ns3::Callback<void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const upgradeCb) [member function]
    cls.add_method('SetUpgradeCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'upgradeCb')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::UpgradeTo(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivate::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivateState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState::McpttCallTypeMachinePrivateState(ns3::psc::McpttCallTypeMachinePrivateState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateState const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::Downgrade(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp1(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp6(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ExpiryOfTfp8(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::InitiateCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveAcceptAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveEmergencyCancelAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveReject(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveRelease(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateRelease const & msg) [member function]
    cls.add_method('ReceiveRelease', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateState::UpgradeTo(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateState::McpttCallTypeMachinePrivateState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ0_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0::McpttCallTypeMachinePrivateStateQ0(ns3::psc::McpttCallTypeMachinePrivateStateQ0 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ0 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ0::McpttCallTypeMachinePrivateStateQ0() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ0> ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ0 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ0::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::InitiateCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveAcceptAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAcceptAck const & msg) [member function]
    cls.add_method('ReceiveAcceptAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ0::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ1_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1::McpttCallTypeMachinePrivateStateQ1(ns3::psc::McpttCallTypeMachinePrivateStateQ1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ1 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ1::McpttCallTypeMachinePrivateStateQ1() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ExpiryOfTfp6(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp6', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ1> ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ1 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveEmergencyCancelAck(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancelAck const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancelAck', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ1::UpgradeTo(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('UpgradeTo', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallTypeMachinePrivateStateQ2_methods(root_module, cls):
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2::McpttCallTypeMachinePrivateStateQ2(ns3::psc::McpttCallTypeMachinePrivateStateQ2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallTypeMachinePrivateStateQ2 const &', 'arg0')])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttCallTypeMachinePrivateStateQ2::McpttCallTypeMachinePrivateStateQ2() [constructor]
    cls.add_constructor([])
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::Downgrade(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('Downgrade', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ExpiryOfTfp1(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp1', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ExpiryOfTfp8(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ExpiryOfTfp8', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttCallTypeMachinePrivateStateQ2> ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttCallTypeMachinePrivateStateQ2 >', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttCallTypeMachinePrivateStateQ2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveAccept(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateAccept const & msg) [member function]
    cls.add_method('ReceiveAccept', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateAccept const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveEmergencyCancel(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateEmergCancel const & msg) [member function]
    cls.add_method('ReceiveEmergencyCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveReject(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateReject const & msg) [member function]
    cls.add_method('ReceiveReject', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateReject const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReceiveSetupRequest(ns3::psc::McpttCallTypeMachinePrivate & machine, ns3::psc::McpttCallMsgPrivateSetupReq const & msg) [member function]
    cls.add_method('ReceiveSetupRequest', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine'), param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-call-type-machine-private-state.h (module 'psc'): void ns3::psc::McpttCallTypeMachinePrivateStateQ2::ReleaseCall(ns3::psc::McpttCallTypeMachinePrivate & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttCallTypeMachinePrivate &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttChannel_methods(root_module, cls):
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel::McpttChannel(ns3::psc::McpttChannel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttChannel const &', 'arg0')])
    ## mcptt-channel.h (module 'psc'): ns3::psc::McpttChannel::McpttChannel() [constructor]
    cls.add_constructor([])
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::Close() [member function]
    cls.add_method('Close', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): ns3::TypeId ns3::psc::McpttChannel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): ns3::Ptr<ns3::Socket> ns3::psc::McpttChannel::GetSocket() const [member function]
    cls.add_method('GetSocket', 
                   'ns3::Ptr< ns3::Socket >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): static ns3::TypeId ns3::psc::McpttChannel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-channel.h (module 'psc'): bool ns3::psc::McpttChannel::IsOpen() const [member function]
    cls.add_method('IsOpen', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::Open(ns3::Ptr<ns3::Node> node, uint16_t port, ns3::Address const & local, ns3::Address const & peer) [member function]
    cls.add_method('Open', 
                   'int', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('uint16_t', 'port'), param('ns3::Address const &', 'local'), param('ns3::Address const &', 'peer')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::Send(ns3::Ptr<ns3::Packet> pkt) [member function]
    cls.add_method('Send', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): int ns3::psc::McpttChannel::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
    cls.add_method('SendTo', 
                   'int', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::SetRxPktCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const rxPktCb) [member function]
    cls.add_method('SetRxPktCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'rxPktCb')], 
                   is_virtual=True)
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::ReceivePkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceivePkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::ReceivePkts(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('ReceivePkts', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-channel.h (module 'psc'): void ns3::psc::McpttChannel::SetSocket(ns3::Ptr<ns3::Socket> socket) [member function]
    cls.add_method('SetSocket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCounter_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter(ns3::psc::McpttCounter const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCounter const &', 'arg0')])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter() [constructor]
    cls.add_constructor([])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttCounter::McpttCounter(ns3::psc::McpttEntityId const & id, uint32_t start=1, uint32_t limit=3) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'id'), param('uint32_t', 'start', default_value='1'), param('uint32_t', 'limit', default_value='3')])
    ## mcptt-counter.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttCounter::GetId() const [member function]
    cls.add_method('GetId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): ns3::TypeId ns3::psc::McpttCounter::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetLimit() const [member function]
    cls.add_method('GetLimit', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetStart() const [member function]
    cls.add_method('GetStart', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCounter::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-counter.h (module 'psc'): uint32_t ns3::psc::McpttCounter::GetValue() const [member function]
    cls.add_method('GetValue', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Increment(uint32_t amount=1) [member function]
    cls.add_method('Increment', 
                   'void', 
                   [param('uint32_t', 'amount', default_value='1')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): bool ns3::psc::McpttCounter::IsLimitExceeded() const [member function]
    cls.add_method('IsLimitExceeded', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): bool ns3::psc::McpttCounter::IsLimitReached() const [member function]
    cls.add_method('IsLimitReached', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::Reset() [member function]
    cls.add_method('Reset', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetId(ns3::psc::McpttEntityId const & id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'id')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetLimit(uint32_t limit) [member function]
    cls.add_method('SetLimit', 
                   'void', 
                   [param('uint32_t', 'limit')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetStart(uint32_t start) [member function]
    cls.add_method('SetStart', 
                   'void', 
                   [param('uint32_t', 'start')], 
                   is_virtual=True)
    ## mcptt-counter.h (module 'psc'): void ns3::psc::McpttCounter::SetValue(uint32_t value) [member function]
    cls.add_method('SetValue', 
                   'void', 
                   [param('uint32_t', 'value')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttEmergAlertMachine_methods(root_module, cls):
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine::McpttEmergAlertMachine(ns3::psc::McpttEmergAlertMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachine const &', 'arg0')])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachine::McpttEmergAlertMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachine::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachine::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttEmergAlertMachineBasic_methods(root_module, cls):
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::McpttEmergAlertMachineBasic(ns3::psc::McpttEmergAlertMachineBasic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineBasic const &', 'arg0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::McpttEmergAlertMachineBasic(ns3::Ptr<ns3::psc::McpttCallMachineGrp> owner=0) [constructor]
    cls.add_constructor([param('ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 'owner', default_value='0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::GetEmerg() const [member function]
    cls.add_method('GetEmerg', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachineBasic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName ns3::psc::McpttEmergAlertMachineBasic::GetOrgName() const [member function]
    cls.add_method('GetOrgName', 
                   'ns3::psc::McpttCallMsgFieldOrgName', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCallMachineGrp> ns3::psc::McpttEmergAlertMachineBasic::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachineBasic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsOtherInEmergState() const [member function]
    cls.add_method('IsOtherInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Send(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetDelayTfe2(ns3::Time const & delayTfe2) [member function]
    cls.add_method('SetDelayTfe2', 
                   'void', 
                   [param('ns3::Time const &', 'delayTfe2')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetEmerg(bool emerg) [member function]
    cls.add_method('SetEmerg', 
                   'void', 
                   [param('bool', 'emerg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetOrgName(ns3::psc::McpttCallMsgFieldOrgName const & orgName) [member function]
    cls.add_method('SetOrgName', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldOrgName const &', 'orgName')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetOwner(ns3::Ptr<ns3::psc::McpttCallMachineGrp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCallMachineGrp >', 'owner')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetStarted(bool started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool', 'started')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetStateChangeCb(ns3::Callback<void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::AddEmergUser(ns3::psc::McpttEmergAlertMachineBasic::EmergUser const & user) [member function]
    cls.add_method('AddEmergUser', 
                   'void', 
                   [param('ns3::psc::McpttEmergAlertMachineBasic::EmergUser const &', 'user')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ExpiryOfTfe1(uint32_t userId) [member function]
    cls.add_method('ExpiryOfTfe1', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::ExpiryOfTfe2() [member function]
    cls.add_method('ExpiryOfTfe2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::FindEmergUser(uint32_t userId, std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser> >::iterator & it) [member function]
    cls.add_method('FindEmergUser', 
                   'bool', 
                   [param('uint32_t', 'userId'), param('std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser > iterator &', 'it')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser> > ns3::psc::McpttEmergAlertMachineBasic::GetEmergUsers() const [member function]
    cls.add_method('GetEmergUsers', 
                   'std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttEmergAlertMachineBasic::GetTfe2() const [member function]
    cls.add_method('GetTfe2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineBasic::RemoveEmergUser(uint32_t userId) [member function]
    cls.add_method('RemoveEmergUser', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetEmergUsers(std::list<ns3::psc::McpttEmergAlertMachineBasic::EmergUser, std::allocator<ns3::psc::McpttEmergAlertMachineBasic::EmergUser> > const & emergUsers) [member function]
    cls.add_method('SetEmergUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttEmergAlertMachineBasic::EmergUser > const &', 'emergUsers')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineBasic::SetTfe2(ns3::Ptr<ns3::psc::McpttTimer> tfe2) [member function]
    cls.add_method('SetTfe2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 'tfe2')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttEmergAlertMachineBasicEmergUser_methods(root_module, cls):
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::EmergUser() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::EmergUser(ns3::psc::McpttEmergAlertMachineBasic::EmergUser const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineBasic::EmergUser const &', 'arg0')])
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Id [variable]
    cls.add_instance_attribute('Id', 'uint32_t', is_const=False)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Loc [variable]
    cls.add_instance_attribute('Loc', 'ns3::Vector', is_const=False)
    ## mcptt-emerg-alert-machine-basic.h (module 'psc'): ns3::psc::McpttEmergAlertMachineBasic::EmergUser::Tfe1 [variable]
    cls.add_instance_attribute('Tfe1', 'ns3::Ptr< ns3::psc::McpttTimer >', is_const=False)
    return

def register_Ns3PscMcpttEmergAlertMachineNull_methods(root_module, cls):
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull::McpttEmergAlertMachineNull(ns3::psc::McpttEmergAlertMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEmergAlertMachineNull const &', 'arg0')])
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::psc::McpttEmergAlertMachineNull::McpttEmergAlertMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttEmergAlertMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttEmergAlertMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineNull::IsInEmergState() const [member function]
    cls.add_method('IsInEmergState', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): bool ns3::psc::McpttEmergAlertMachineNull::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::ReceiveGrpCallEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlert', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::ReceiveGrpCallEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & msg) [member function]
    cls.add_method('ReceiveGrpCallEmergAlertCancel', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::SendEmergAlert() [member function]
    cls.add_method('SendEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-emerg-alert-machine.h (module 'psc'): void ns3::psc::McpttEmergAlertMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttEntityId_methods(root_module, cls):
    cls.add_binary_comparison_operator('==')
    cls.add_binary_comparison_operator('!=')
    cls.add_output_stream_operator()
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId(ns3::psc::McpttEntityId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'arg0')])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId() [constructor]
    cls.add_constructor([])
    ## mcptt-entity-id.h (module 'psc'): ns3::psc::McpttEntityId::McpttEntityId(uint32_t number, std::string const & name) [constructor]
    cls.add_constructor([param('uint32_t', 'number'), param('std::string const &', 'name')])
    ## mcptt-entity-id.h (module 'psc'): std::string ns3::psc::McpttEntityId::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): uint32_t ns3::psc::McpttEntityId::GetNumber() const [member function]
    cls.add_method('GetNumber', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): void ns3::psc::McpttEntityId::SetNumber(uint32_t number) [member function]
    cls.add_method('SetNumber', 
                   'void', 
                   [param('uint32_t', 'number')], 
                   is_virtual=True)
    ## mcptt-entity-id.h (module 'psc'): bool ns3::psc::McpttEntityId::IsEqualTo(ns3::psc::McpttEntityId const & other) const [member function]
    cls.add_method('IsEqualTo', 
                   'bool', 
                   [param('ns3::psc::McpttEntityId const &', 'other')], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3PscMcpttFloorMsgField_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField(ns3::psc::McpttFloorMsgField const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgField const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgField::McpttFloorMsgField(uint8_t id, uint8_t length) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgField::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgField::GetId() const [member function]
    cls.add_method('GetId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgField::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgField::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgField::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgField::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::SetId(uint8_t id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('uint8_t', 'id')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgField::SetLength(uint8_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint8_t', 'length')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldDuration_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration(ns3::psc::McpttFloorMsgFieldDuration const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldDuration const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration::McpttFloorMsgFieldDuration(uint16_t duration) [constructor]
    cls.add_constructor([param('uint16_t', 'duration')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldDuration::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldDuration::GetDuration() const [member function]
    cls.add_method('GetDuration', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldDuration::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldDuration::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldDuration::SetDuration(uint16_t duration) [member function]
    cls.add_method('SetDuration', 
                   'void', 
                   [param('uint16_t', 'duration')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldGrantedPartyId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId(ns3::psc::McpttFloorMsgFieldGrantedPartyId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldGrantedPartyId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId::McpttFloorMsgFieldGrantedPartyId(uint32_t partyId) [constructor]
    cls.add_constructor([param('uint32_t', 'partyId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldGrantedPartyId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetPartyId() const [member function]
    cls.add_method('GetPartyId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldGrantedPartyId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldGrantedPartyId::SetPartyId(uint32_t partyId) [member function]
    cls.add_method('SetPartyId', 
                   'void', 
                   [param('uint32_t', 'partyId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldIndic_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::McpttFloorMsgFieldIndic(ns3::psc::McpttFloorMsgFieldIndic const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldIndic const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::McpttFloorMsgFieldIndic() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldIndic::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldIndic::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldIndic::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Indicate(uint16_t pattern) [member function]
    cls.add_method('Indicate', 
                   'void', 
                   [param('uint16_t', 'pattern')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): bool ns3::psc::McpttFloorMsgFieldIndic::IsIndicated(uint16_t pattern) const [member function]
    cls.add_method('IsIndicated', 
                   'bool', 
                   [param('uint16_t', 'pattern')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::Unindicate(uint16_t pattern) [member function]
    cls.add_method('Unindicate', 
                   'void', 
                   [param('uint16_t', 'pattern')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::BROADCAST_CALL [variable]
    cls.add_static_attribute('BROADCAST_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::DUAL_FLOOR [variable]
    cls.add_static_attribute('DUAL_FLOOR', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::EMERGENCY_CALL [variable]
    cls.add_static_attribute('EMERGENCY_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::IMMINENT_CALL [variable]
    cls.add_static_attribute('IMMINENT_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::NORMAL_CALL [variable]
    cls.add_static_attribute('NORMAL_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::QUEUING_SUPP [variable]
    cls.add_static_attribute('QUEUING_SUPP', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::SYSTEM_CALL [variable]
    cls.add_static_attribute('SYSTEM_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic::TEMPORARY_GROUP_CALL [variable]
    cls.add_static_attribute('TEMPORARY_GROUP_CALL', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldIndic::GetFlags() const [member function]
    cls.add_method('GetFlags', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldIndic::SetFlags(uint16_t flags) [member function]
    cls.add_method('SetFlags', 
                   'void', 
                   [param('uint16_t', 'flags')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldPermToReq_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq(ns3::psc::McpttFloorMsgFieldPermToReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldPermToReq const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq::McpttFloorMsgFieldPermToReq(uint16_t permission) [constructor]
    cls.add_constructor([param('uint16_t', 'permission')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldPermToReq::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldPermToReq::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldPermToReq::GetPermission() const [member function]
    cls.add_method('GetPermission', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldPermToReq::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPermToReq::SetPermission(uint16_t permission) [member function]
    cls.add_method('SetPermission', 
                   'void', 
                   [param('uint16_t', 'permission')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldPriority_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority(ns3::psc::McpttFloorMsgFieldPriority const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldPriority const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority::McpttFloorMsgFieldPriority(uint8_t priority) [constructor]
    cls.add_constructor([param('uint8_t', 'priority')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldPriority::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldPriority::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldPriority::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldPriority::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldPriority::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldQueuePositionInfo_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo::McpttFloorMsgFieldQueuePositionInfo(uint8_t position, uint8_t priority) [constructor]
    cls.add_constructor([param('uint8_t', 'position'), param('uint8_t', 'priority')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetPosition() const [member function]
    cls.add_method('GetPosition', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuePositionInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::SetPosition(uint8_t position) [member function]
    cls.add_method('SetPosition', 
                   'void', 
                   [param('uint8_t', 'position')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuePositionInfo::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldQueueSize_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize(ns3::psc::McpttFloorMsgFieldQueueSize const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueueSize const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize::McpttFloorMsgFieldQueueSize(uint16_t queueSize) [constructor]
    cls.add_constructor([param('uint16_t', 'queueSize')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueueSize::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueueSize::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldQueueSize::GetQueueSize() const [member function]
    cls.add_method('GetQueueSize', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueueSize::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueueSize::SetQueueSize(uint16_t queueSize) [member function]
    cls.add_method('SetQueueSize', 
                   'void', 
                   [param('uint16_t', 'queueSize')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldRejectCause_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause(ns3::psc::McpttFloorMsgFieldRejectCause const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::McpttFloorMsgFieldRejectCause(uint16_t cause) [constructor]
    cls.add_constructor([param('uint16_t', 'cause')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldRejectCause::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldRejectCause::GetCause() const [member function]
    cls.add_method('GetCause', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldRejectCause::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldRejectCause::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldRejectCause::SetCause(uint16_t cause) [member function]
    cls.add_method('SetCause', 
                   'void', 
                   [param('uint16_t', 'cause')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_1 [variable]
    cls.add_static_attribute('CAUSE_1', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_2 [variable]
    cls.add_static_attribute('CAUSE_2', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_255 [variable]
    cls.add_static_attribute('CAUSE_255', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_3 [variable]
    cls.add_static_attribute('CAUSE_3', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_4 [variable]
    cls.add_static_attribute('CAUSE_4', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_5 [variable]
    cls.add_static_attribute('CAUSE_5', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_6 [variable]
    cls.add_static_attribute('CAUSE_6', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause::CAUSE_7 [variable]
    cls.add_static_attribute('CAUSE_7', 'uint16_t const', is_const=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSeqNum_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum::McpttFloorMsgFieldSeqNum(uint16_t seqNum) [constructor]
    cls.add_constructor([param('uint16_t', 'seqNum')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSeqNum::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSeqNum::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldSeqNum::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSeqNum::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSeqNum::SetSeqNum(uint16_t seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('uint16_t', 'seqNum')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSource_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource(ns3::psc::McpttFloorMsgFieldSource const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSource const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::McpttFloorMsgFieldSource(uint16_t source) [constructor]
    cls.add_constructor([param('uint16_t', 'source')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSource::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSource::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsgFieldSource::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSource::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSource::SetSource(uint16_t source) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('uint16_t', 'source')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::CONTROLLING_FUNCTION [variable]
    cls.add_static_attribute('CONTROLLING_FUNCTION', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::FLOOR_PARTICIPANT [variable]
    cls.add_static_attribute('FLOOR_PARTICIPANT', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::NONCONTROLLING_FUNCTION [variable]
    cls.add_static_attribute('NONCONTROLLING_FUNCTION', 'uint16_t const', is_const=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource::PARTICIPATING_FUNCTION [variable]
    cls.add_static_attribute('PARTICIPATING_FUNCTION', 'uint16_t const', is_const=True)
    return

def register_Ns3PscMcpttFloorMsgFieldSsrc_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(ns3::psc::McpttFloorMsgFieldSsrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldSsrc const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSsrc::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldSsrc::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldSsrc::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldSsrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldSsrc::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc::McpttFloorMsgFieldSsrc(uint8_t id, uint8_t length, uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length'), param('uint32_t', 'ssrc')], 
                        visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldTrackInfo_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo::McpttFloorMsgFieldTrackInfo(uint8_t queueCap) [constructor]
    cls.add_constructor([param('uint8_t', 'queueCap')])
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::AddRef(uint32_t ref) [member function]
    cls.add_method('AddRef', 
                   'void', 
                   [param('uint32_t', 'ref')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::ClearRefs() [member function]
    cls.add_method('ClearRefs', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldTrackInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldTrackInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetPtLength() const [member function]
    cls.add_method('GetPtLength', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetPtLengthWithPadding() const [member function]
    cls.add_method('GetPtLengthWithPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetQueueCap() const [member function]
    cls.add_method('GetQueueCap', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int> > ns3::psc::McpttFloorMsgFieldTrackInfo::GetRefs() const [member function]
    cls.add_method('GetRefs', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldTrackInfo::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldTrackInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetQueueCap(uint8_t queueCap) [member function]
    cls.add_method('SetQueueCap', 
                   'void', 
                   [param('uint8_t', 'queueCap')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::UpdatePtLength(uint8_t ptLength) [member function]
    cls.add_method('UpdatePtLength', 
                   'void', 
                   [param('uint8_t', 'ptLength')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetPtLength(uint8_t ptLength) [member function]
    cls.add_method('SetPtLength', 
                   'void', 
                   [param('uint8_t', 'ptLength')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldTrackInfo::SetRefs(std::vector<unsigned int, std::allocator<unsigned int> > const refs) [member function]
    cls.add_method('SetRefs', 
                   'void', 
                   [param('std::vector< unsigned int > const', 'refs')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldType_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType(ns3::psc::McpttFloorMsgFieldType const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldType const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType::McpttFloorMsgFieldType(uint8_t msgType) [constructor]
    cls.add_constructor([param('uint8_t', 'msgType')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldType::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldType::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsgFieldType::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldType::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldType::SetMsgType(uint8_t msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('uint8_t', 'msgType')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgFieldUserId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(ns3::psc::McpttFloorMsgFieldUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldUserId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(uint32_t userId) [constructor]
    cls.add_constructor([param('uint32_t', 'userId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldUserId::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldUserId::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId::McpttFloorMsgFieldUserId(uint8_t id, uint8_t length, uint16_t userId) [constructor]
    cls.add_constructor([param('uint8_t', 'id'), param('uint8_t', 'length'), param('uint16_t', 'userId')], 
                        visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgSink_methods(root_module, cls):
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink::McpttFloorMsgSink(ns3::psc::McpttFloorMsgSink const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgSink const &', 'arg0')])
    ## mcptt-floor-msg-sink.h (module 'psc'): ns3::psc::McpttFloorMsgSink::McpttFloorMsgSink() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-msg-sink.h (module 'psc'): void ns3::psc::McpttFloorMsgSink::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorParticipant_methods(root_module, cls):
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::McpttFloorParticipant(ns3::psc::McpttFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorParticipant const &', 'arg0')])
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::McpttFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::PTT_BUTTON_PUSHED [variable]
    cls.add_static_attribute('PTT_BUTTON_PUSHED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::PTT_BUTTON_RELEASED [variable]
    cls.add_static_attribute('PTT_BUTTON_RELEASED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_DENY [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_DENY', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_GRANTED [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_GRANTED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_IDLE [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_IDLE', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_QUEUE [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_QUEUE', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_REVOKED [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_REVOKED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::RECEIVED_FLOOR_TAKEN [variable]
    cls.add_static_attribute('RECEIVED_FLOOR_TAKEN', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T100_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T100_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T100_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T100_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T101_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T101_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T101_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T101_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T103_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T103_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T104_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T104_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T104_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T104_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T132_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T132_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T203_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T203_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T204_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T204_EXPIRED', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T204_EXPIRED_N_TIMES [variable]
    cls.add_static_attribute('TIMER_T204_EXPIRED_N_TIMES', 'char const * const', is_const=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipant::TIMER_T233_EXPIRED [variable]
    cls.add_static_attribute('TIMER_T233_EXPIRED', 'char const * const', is_const=True)
    return

def register_Ns3PscMcpttFloorParticipantNull_methods(root_module, cls):
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull::McpttFloorParticipantNull(ns3::psc::McpttFloorParticipantNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorParticipantNull const &', 'arg0')])
    ## mcptt-floor-participant.h (module 'psc'): ns3::psc::McpttFloorParticipantNull::McpttFloorParticipantNull() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorParticipantNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorParticipantNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipantNull::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): bool ns3::psc::McpttFloorParticipantNull::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-participant.h (module 'psc'): void ns3::psc::McpttFloorParticipantNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttFloorQueue_methods(root_module, cls):
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(ns3::psc::McpttFloorQueue const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorQueue const &', 'arg0')])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(uint16_t capacity=0) [constructor]
    cls.add_constructor([param('uint16_t', 'capacity', default_value='0')])
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttFloorQueue::McpttFloorQueue(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > const & users, uint16_t capacity=0) [constructor]
    cls.add_constructor([param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users'), param('uint16_t', 'capacity', default_value='0')])
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::Clear() [member function]
    cls.add_method('Clear', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::Contains(uint32_t userId) const [member function]
    cls.add_method('Contains', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttQueuedUserInfo ns3::psc::McpttFloorQueue::Dequeue() [member function]
    cls.add_method('Dequeue', 
                   'ns3::psc::McpttQueuedUserInfo', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::Enqueue(ns3::psc::McpttQueuedUserInfo & user) [member function]
    cls.add_method('Enqueue', 
                   'void', 
                   [param('ns3::psc::McpttQueuedUserInfo &', 'user')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): uint16_t ns3::psc::McpttFloorQueue::Find(uint32_t userId) const [member function]
    cls.add_method('Find', 
                   'uint16_t', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): uint16_t ns3::psc::McpttFloorQueue::GetCount() const [member function]
    cls.add_method('GetCount', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorQueue::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorQueue::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::HasNext() const [member function]
    cls.add_method('HasNext', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::IsAtCapacity() const [member function]
    cls.add_method('IsAtCapacity', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::IsEnabled() const [member function]
    cls.add_method('IsEnabled', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): ns3::psc::McpttQueuedUserInfo ns3::psc::McpttFloorQueue::Peek() const [member function]
    cls.add_method('Peek', 
                   'ns3::psc::McpttQueuedUserInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::Pull(uint32_t userId) [member function]
    cls.add_method('Pull', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::UpdateUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > const & users) [member function]
    cls.add_method('UpdateUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): bool ns3::psc::McpttFloorQueue::View(uint32_t userId, ns3::psc::McpttQueuedUserInfo & info, uint16_t & position) const [member function]
    cls.add_method('View', 
                   'bool', 
                   [param('uint32_t', 'userId'), param('ns3::psc::McpttQueuedUserInfo &', 'info'), param('uint16_t &', 'position')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > ns3::psc::McpttFloorQueue::ViewUsers() const [member function]
    cls.add_method('ViewUsers', 
                   'std::list< ns3::psc::McpttQueuedUserInfo >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-queue.h (module 'psc'): void ns3::psc::McpttFloorQueue::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttHelper_methods(root_module, cls):
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper::McpttHelper(ns3::psc::McpttHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttHelper const &', 'arg0')])
    ## mcptt-helper.h (module 'psc'): ns3::psc::McpttHelper::McpttHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::AddPushersToOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator, ns3::ApplicationContainer const & apps) [member function]
    cls.add_method('AddPushersToOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator'), param('ns3::ApplicationContainer const &', 'apps')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): static void ns3::psc::McpttHelper::EnableLogComponents() [member function]
    cls.add_method('EnableLogComponents', 
                   'void', 
                   [], 
                   is_static=True)
    ## mcptt-helper.h (module 'psc'): static uint32_t ns3::psc::McpttHelper::GetNextUserId() [member function]
    cls.add_method('GetNextUserId', 
                   'uint32_t', 
                   [], 
                   is_static=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(ns3::NodeContainer const & c) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer const &', 'c')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(ns3::Ptr<ns3::Node> const & node) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node > const &', 'node')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::McpttHelper::Install(std::string const & nodeName) [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string const &', 'nodeName')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetMediaSrc(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetMediaSrc', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPttApp(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPttApp', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusher(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusher', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusherPttDurationVariable(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusherPttDurationVariable', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): void ns3::psc::McpttHelper::SetPusherPttInterarrivalTimeVariable(std::string tid, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetPusherPttInterarrivalTimeVariable', 
                   'void', 
                   [param('std::string', 'tid'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')], 
                   is_virtual=True)
    ## mcptt-helper.h (module 'psc'): ns3::Ptr<ns3::Application> ns3::psc::McpttHelper::InstallPriv(ns3::Ptr<ns3::Node> const & node) [member function]
    cls.add_method('InstallPriv', 
                   'ns3::Ptr< ns3::Application >', 
                   [param('ns3::Ptr< ns3::Node > const &', 'node')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMediaSink_methods(root_module, cls):
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink::McpttMediaSink(ns3::psc::McpttMediaSink const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaSink const &', 'arg0')])
    ## mcptt-media-sink.h (module 'psc'): bool ns3::psc::McpttMediaSink::TakeSendReq(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('TakeSendReq', 
                   'bool', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-media-sink.h (module 'psc'): ns3::psc::McpttMediaSink::McpttMediaSink() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttMediaSrc_methods(root_module, cls):
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc::McpttMediaSrc(ns3::psc::McpttMediaSrc const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaSrc const &', 'arg0')])
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSrc::McpttMediaSrc() [constructor]
    cls.add_constructor([])
    ## mcptt-media-src.h (module 'psc'): ns3::psc::McpttMediaSink * ns3::psc::McpttMediaSrc::GetSink() const [member function]
    cls.add_method('GetSink', 
                   'ns3::psc::McpttMediaSink *', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): uint16_t ns3::psc::McpttMediaSrc::GetTotalBytes() const [member function]
    cls.add_method('GetTotalBytes', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMediaSrc::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-media-src.h (module 'psc'): bool ns3::psc::McpttMediaSrc::HasSink() [member function]
    cls.add_method('HasSink', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): bool ns3::psc::McpttMediaSrc::IsMakingReq() const [member function]
    cls.add_method('IsMakingReq', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetSink(ns3::psc::McpttMediaSink * const & sink) [member function]
    cls.add_method('SetSink', 
                   'void', 
                   [param('ns3::psc::McpttMediaSink * const &', 'sink')], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::StartMakingReq() [member function]
    cls.add_method('StartMakingReq', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::StopMakingReq() [member function]
    cls.add_method('StopMakingReq', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::AddToTotalBytes(uint16_t numBytes) [member function]
    cls.add_method('AddToTotalBytes', 
                   'void', 
                   [param('uint16_t', 'numBytes')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::CancelRequest() [member function]
    cls.add_method('CancelRequest', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): ns3::Time ns3::psc::McpttMediaSrc::GetLastReq() const [member function]
    cls.add_method('GetLastReq', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): ns3::EventId ns3::psc::McpttMediaSrc::GetReqEvent() const [member function]
    cls.add_method('GetReqEvent', 
                   'ns3::EventId', 
                   [], 
                   is_const=True, is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::MakeRequest() [member function]
    cls.add_method('MakeRequest', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::ScheduleNextReq() [member function]
    cls.add_method('ScheduleNextReq', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetLastReq(ns3::Time const & lastReq) [member function]
    cls.add_method('SetLastReq', 
                   'void', 
                   [param('ns3::Time const &', 'lastReq')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetReqEvent(ns3::EventId const & reqEvent) [member function]
    cls.add_method('SetReqEvent', 
                   'void', 
                   [param('ns3::EventId const &', 'reqEvent')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-media-src.h (module 'psc'): void ns3::psc::McpttMediaSrc::SetTotalBytes(uint16_t totalBytes) [member function]
    cls.add_method('SetTotalBytes', 
                   'void', 
                   [param('uint16_t', 'totalBytes')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMsg_methods(root_module, cls):
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg::McpttMsg(ns3::psc::McpttMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMsg const &', 'arg0')])
    ## mcptt-msg.h (module 'psc'): uint32_t ns3::psc::McpttMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): uint32_t ns3::psc::McpttMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-msg.h (module 'psc'): bool ns3::psc::McpttMsg::IsA(ns3::TypeId const & type) const [member function]
    cls.add_method('IsA', 
                   'bool', 
                   [param('ns3::TypeId const &', 'type')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): void ns3::psc::McpttMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): void ns3::psc::McpttMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-msg.h (module 'psc'): ns3::psc::McpttMsg::McpttMsg() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttMsgStats_methods(root_module, cls):
    ## mcptt-msg-stats.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMsgStats::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-msg-stats.h (module 'psc'): ns3::psc::McpttMsgStats::McpttMsgStats() [constructor]
    cls.add_constructor([])
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::ReceiveRxTrace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('ReceiveRxTrace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')], 
                   is_virtual=True)
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::ReceiveTxTrace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('ReceiveTxTrace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')], 
                   is_virtual=True)
    ## mcptt-msg-stats.h (module 'psc'): void ns3::psc::McpttMsgStats::Trace(ns3::Ptr<const ns3::Application> app, uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType, bool rx) [member function]
    cls.add_method('Trace', 
                   'void', 
                   [param('ns3::Ptr< ns3::Application const >', 'app'), param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType'), param('bool', 'rx')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipant_methods(root_module, cls):
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant::McpttOffNetworkFloorParticipant(ns3::psc::McpttOffNetworkFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'arg0')])
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipant::McpttOffNetworkFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ClearCandidateSsrc() [member function]
    cls.add_method('ClearCandidateSsrc', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ClearCurrentSsrc() [member function]
    cls.add_method('ClearCurrentSsrc', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC201() const [member function]
    cls.add_method('GetC201', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC204() const [member function]
    cls.add_method('GetC204', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOffNetworkFloorParticipant::GetC205() const [member function]
    cls.add_method('GetC205', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOffNetworkFloorParticipant::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOffNetworkFloorParticipant::GetCallTypeId() const [member function]
    cls.add_method('GetCallTypeId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetCandidateSsrc() const [member function]
    cls.add_method('GetCandidateSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetCurrentSsrc() const [member function]
    cls.add_method('GetCurrentSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOffNetworkFloorParticipant::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOffNetworkFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgGranted ns3::psc::McpttOffNetworkFloorParticipant::GetLastGrantMsg() const [member function]
    cls.add_method('GetLastGrantMsg', 
                   'ns3::psc::McpttFloorMsgGranted', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::GetOriginator() const [member function]
    cls.add_method('GetOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOffNetworkFloorParticipant::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorQueue> ns3::psc::McpttOffNetworkFloorParticipant::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::psc::McpttFloorQueue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Time ns3::psc::McpttOffNetworkFloorParticipant::GetSetupDelayStartTime() const [member function]
    cls.add_method('GetSetupDelayStartTime', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::GetStarted() const [member function]
    cls.add_method('GetStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> ns3::psc::McpttOffNetworkFloorParticipant::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT201() const [member function]
    cls.add_method('GetT201', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT203() const [member function]
    cls.add_method('GetT203', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT204() const [member function]
    cls.add_method('GetT204', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT205() const [member function]
    cls.add_method('GetT205', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT206() const [member function]
    cls.add_method('GetT206', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT207() const [member function]
    cls.add_method('GetT207', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT230() const [member function]
    cls.add_method('GetT230', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOffNetworkFloorParticipant::GetT233() const [member function]
    cls.add_method('GetT233', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOffNetworkFloorParticipant::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOffNetworkFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasCandidateSsrc() const [member function]
    cls.add_method('HasCandidateSsrc', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasCurrentSsrc() const [member function]
    cls.add_method('HasCurrentSsrc', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::NotifyFloorGranted() [member function]
    cls.add_method('NotifyFloorGranted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ResetCounters() [member function]
    cls.add_method('ResetCounters', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC201(ns3::Ptr<ns3::psc::McpttCounter> c201) [member function]
    cls.add_method('SetC201', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC204(ns3::Ptr<ns3::psc::McpttCounter> c204) [member function]
    cls.add_method('SetC204', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetC205(ns3::Ptr<ns3::psc::McpttCounter> c205) [member function]
    cls.add_method('SetC205', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCounter >', 'c205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCandidateSsrc(uint32_t candidateSsrc) [member function]
    cls.add_method('SetCandidateSsrc', 
                   'void', 
                   [param('uint32_t', 'candidateSsrc')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetCurrentSsrc(uint32_t currentSsrc) [member function]
    cls.add_method('SetCurrentSsrc', 
                   'void', 
                   [param('uint32_t', 'currentSsrc')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT201(ns3::Time const & delayT201) [member function]
    cls.add_method('SetDelayT201', 
                   'void', 
                   [param('ns3::Time const &', 'delayT201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT203(ns3::Time const & delayT203) [member function]
    cls.add_method('SetDelayT203', 
                   'void', 
                   [param('ns3::Time const &', 'delayT203')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT204(ns3::Time const & delayT204) [member function]
    cls.add_method('SetDelayT204', 
                   'void', 
                   [param('ns3::Time const &', 'delayT204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT205(ns3::Time const & delayT205) [member function]
    cls.add_method('SetDelayT205', 
                   'void', 
                   [param('ns3::Time const &', 'delayT205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT206(ns3::Time const & delayT206) [member function]
    cls.add_method('SetDelayT206', 
                   'void', 
                   [param('ns3::Time const &', 'delayT206')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT207(ns3::Time const & delayT207) [member function]
    cls.add_method('SetDelayT207', 
                   'void', 
                   [param('ns3::Time const &', 'delayT207')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT230(ns3::Time const & delayT230) [member function]
    cls.add_method('SetDelayT230', 
                   'void', 
                   [param('ns3::Time const &', 'delayT230')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetDelayT233(ns3::Time const & delayT233) [member function]
    cls.add_method('SetDelayT233', 
                   'void', 
                   [param('ns3::Time const &', 'delayT233')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLastGrantMsg(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('SetLastGrantMsg', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC201(uint32_t limitC201) [member function]
    cls.add_method('SetLimitC201', 
                   'void', 
                   [param('uint32_t', 'limitC201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC204(uint32_t limitC204) [member function]
    cls.add_method('SetLimitC204', 
                   'void', 
                   [param('uint32_t', 'limitC204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetLimitC205(uint32_t limitC205) [member function]
    cls.add_method('SetLimitC205', 
                   'void', 
                   [param('uint32_t', 'limitC205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetQueue(ns3::Ptr<ns3::psc::McpttFloorQueue> queue) [member function]
    cls.add_method('SetQueue', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttFloorQueue >', 'queue')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetSetupDelayCb(ns3::Callback<void, const ns3::Time &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const setupDelayCb) [member function]
    cls.add_method('SetSetupDelayCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Time const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'setupDelayCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetSetupDelayStartTime(ns3::Time const & startTime) [member function]
    cls.add_method('SetSetupDelayStartTime', 
                   'void', 
                   [param('ns3::Time const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetState(ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT201(ns3::Ptr<ns3::psc::McpttTimer> t201) [member function]
    cls.add_method('SetT201', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't201')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT203(ns3::Ptr<ns3::psc::McpttTimer> t203) [member function]
    cls.add_method('SetT203', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't203')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT204(ns3::Ptr<ns3::psc::McpttTimer> t204) [member function]
    cls.add_method('SetT204', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't204')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT205(ns3::Ptr<ns3::psc::McpttTimer> t205) [member function]
    cls.add_method('SetT205', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't205')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT206(ns3::Ptr<ns3::psc::McpttTimer> t206) [member function]
    cls.add_method('SetT206', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't206')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT207(ns3::Ptr<ns3::psc::McpttTimer> t207) [member function]
    cls.add_method('SetT207', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't207')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT230(ns3::Ptr<ns3::psc::McpttTimer> t230) [member function]
    cls.add_method('SetT230', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't230')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetT233(ns3::Ptr<ns3::psc::McpttTimer> t233) [member function]
    cls.add_method('SetT233', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttTimer >', 't233')], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipant::ShouldGenMedia() const [member function]
    cls.add_method('ShouldGenMedia', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::StopTimers() [member function]
    cls.add_method('StopTimers', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT201() [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT203() [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT204() [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT205() [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT206() [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT207() [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT230() [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::ExpiryOfT233() [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-off-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipant::SetStarted(bool const & started) [member function]
    cls.add_method('SetStarted', 
                   'void', 
                   [param('bool const &', 'started')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState::McpttOffNetworkFloorParticipantState(ns3::psc::McpttOffNetworkFloorParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantState const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::AcceptGrant(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT201(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT204(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT205(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT206(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT207(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT230(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantState::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::MediaReady(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveCallRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReceiveCallRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::ReleaseRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::SendFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Start(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Stop(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Stop', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantState::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantState::McpttOffNetworkFloorParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateHasPerm_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::McpttOffNetworkFloorParticipantStateHasPerm(ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::McpttOffNetworkFloorParticipantStateHasPerm() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ExpiryOfT206(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT206', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ExpiryOfT207(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT207', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm> ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::MediaReady(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateHasPerm::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateNoPerm_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::McpttOffNetworkFloorParticipantStateNoPerm(ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::McpttOffNetworkFloorParticipantStateNoPerm() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm> ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateNoPerm::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStatePendGrant_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::McpttOffNetworkFloorParticipantStatePendGrant(ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::McpttOffNetworkFloorParticipantStatePendGrant() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ExpiryOfT205(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT205', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant> ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::HasFloor(ns3::psc::McpttOffNetworkFloorParticipant const & floorMachine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant const &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveFloorRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendGrant::Unselected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStatePendReq_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::McpttOffNetworkFloorParticipantStatePendReq(ns3::psc::McpttOffNetworkFloorParticipantStatePendReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStatePendReq const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::McpttOffNetworkFloorParticipantStatePendReq() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ExpiryOfT201(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT201', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStatePendReq> ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStatePendReq >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::PttRelease(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStatePendReq::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateQueued_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued::McpttOffNetworkFloorParticipantStateQueued(ns3::psc::McpttOffNetworkFloorParticipantStateQueued const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateQueued const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateQueued::McpttOffNetworkFloorParticipantStateQueued() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::AcceptGrant(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT203(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT203', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT204(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT204', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ExpiryOfT233(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT233', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateQueued> ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateQueued >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateQueued::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorDeny(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::ReleaseRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateQueued::SendFloorQueuePositionRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateSilence_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence::McpttOffNetworkFloorParticipantStateSilence(ns3::psc::McpttOffNetworkFloorParticipantStateSilence const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateSilence const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateSilence::McpttOffNetworkFloorParticipantStateSilence() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ExpiryOfT230(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('ExpiryOfT230', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateSilence> ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateSilence >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateSilence::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorRequest(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateSilence::Selected(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOffNetworkFloorParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::McpttOffNetworkFloorParticipantStateStartStop(ns3::psc::McpttOffNetworkFloorParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOffNetworkFloorParticipantStateStartStop const &', 'arg0')])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::McpttOffNetworkFloorParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOffNetworkFloorParticipantStateStartStop> ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOffNetworkFloorParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::PttPush(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveFloorGranted(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveFloorTaken(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::ReceiveMedia(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-off-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOffNetworkFloorParticipantStateStartStop::Start(ns3::psc::McpttOffNetworkFloorParticipant & floorMachine) const [member function]
    cls.add_method('Start', 
                   'void', 
                   [param('ns3::psc::McpttOffNetworkFloorParticipant &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClient_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient::McpttOnNetworkCallMachineClient(ns3::psc::McpttOnNetworkCallMachineClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'arg0')])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClient::McpttOnNetworkCallMachineClient() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): int64_t ns3::psc::McpttOnNetworkCallMachineClient::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetByePayloadSize() [member function]
    cls.add_method('GetByePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOnNetworkCallMachineClient::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttOnNetworkCallMachineClient::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttOnNetworkCallMachineClient::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttOnNetworkCallMachineClient::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkCallMachineClient::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetInvitePayloadSize() [member function]
    cls.add_method('GetInvitePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkCallMachineClient::GetResponsePayloadSize() [member function]
    cls.add_method('GetResponsePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientState> ns3::psc::McpttOnNetworkCallMachineClient::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClient::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkCallMachineClient::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClient::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Receive(ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Send(ns3::psc::McpttCallMsg const & hdr) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttCallMsg const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClient::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState::McpttOnNetworkCallMachineClientState(ns3::psc::McpttOnNetworkCallMachineClientState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientState const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::InitiateCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClientState::IsCallOngoing(ns3::psc::McpttOnNetworkCallMachineClient const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientState::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientState::McpttOnNetworkCallMachineClientState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS1_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1::McpttOnNetworkCallMachineClientStateS1(ns3::psc::McpttOnNetworkCallMachineClientStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS1 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS1::McpttOnNetworkCallMachineClientStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS1> ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS1::InitiateCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS1::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS2_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2::McpttOnNetworkCallMachineClientStateS2(ns3::psc::McpttOnNetworkCallMachineClientStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS2 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS2::McpttOnNetworkCallMachineClientStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS2> ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveInvite(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS2::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS3_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3::McpttOnNetworkCallMachineClientStateS3(ns3::psc::McpttOnNetworkCallMachineClientStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS3 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS3::McpttOnNetworkCallMachineClientStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS3> ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkCallMachineClientStateS3::IsCallOngoing(ns3::psc::McpttOnNetworkCallMachineClient const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS3::ReleaseCall(ns3::psc::McpttOnNetworkCallMachineClient & machine) [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkCallMachineClientStateS4_methods(root_module, cls):
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4::McpttOnNetworkCallMachineClientStateS4(ns3::psc::McpttOnNetworkCallMachineClientStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkCallMachineClientStateS4 const &', 'arg0')])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttOnNetworkCallMachineClientStateS4::McpttOnNetworkCallMachineClientStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkCallMachineClientStateS4> ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkCallMachineClientStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkCallMachineClientStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS4::ReceiveBye(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-on-network-call-machine-client-state.h (module 'psc'): void ns3::psc::McpttOnNetworkCallMachineClientStateS4::ReceiveResponse(ns3::psc::McpttOnNetworkCallMachineClient & machine, uint32_t from, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkCallMachineClient &', 'machine'), param('uint32_t', 'from'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitrator_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator::McpttOnNetworkFloorArbitrator(ns3::psc::McpttOnNetworkFloorArbitrator const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitrator const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitrator::McpttOnNetworkFloorArbitrator() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::AddParticipant(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) [member function]
    cls.add_method('AddParticipant', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant, bool implicitRequest) [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant'), param('bool', 'implicitRequest')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorArbitrator::GetC20() const [member function]
    cls.add_method('GetC20', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorArbitrator::GetC7() const [member function]
    cls.add_method('GetC7', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControl> ns3::psc::McpttOnNetworkFloorArbitrator::GetDualControl() const [member function]
    cls.add_method('GetDualControl', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControl >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOnNetworkFloorArbitrator::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorArbitrator::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetNParticipants() const [member function]
    cls.add_method('GetNParticipants', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetOriginatingParticipant() const [member function]
    cls.add_method('GetOriginatingParticipant', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttOnNetworkFloorArbitrator::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipant(uint32_t index) const [member function]
    cls.add_method('GetParticipant', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t', 'index')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipantBySsrc(uint32_t const ssrc) const [member function]
    cls.add_method('GetParticipantBySsrc', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t const', 'ssrc')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> ns3::psc::McpttOnNetworkFloorArbitrator::GetParticipantByUserId(uint32_t userId) const [member function]
    cls.add_method('GetParticipantByUserId', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 
                   [param('uint32_t', 'userId')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttFloorQueue> ns3::psc::McpttOnNetworkFloorArbitrator::GetQueue() const [member function]
    cls.add_method('GetQueue', 
                   'ns3::Ptr< ns3::psc::McpttFloorQueue >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorArbitrator::GetRejectCause() const [member function]
    cls.add_method('GetRejectCause', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitrator::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorArbitrator::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT1() const [member function]
    cls.add_method('GetT1', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT2() const [member function]
    cls.add_method('GetT2', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT20() const [member function]
    cls.add_method('GetT20', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT3() const [member function]
    cls.add_method('GetT3', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT4() const [member function]
    cls.add_method('GetT4', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorArbitrator::GetT7() const [member function]
    cls.add_method('GetT7', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorArbitrator::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorArbitrator::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorArbitrator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsAckRequired() const [member function]
    cls.add_method('IsAckRequired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsAudioCutIn() const [member function]
    cls.add_method('IsAudioCutIn', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsDualFloorSupported() const [member function]
    cls.add_method('IsDualFloorSupported', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsPreemptive(ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('IsPreemptive', 
                   'bool', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsQueueingSupported() const [member function]
    cls.add_method('IsQueueingSupported', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitrator::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorArbitrator::NextSeqNum() [member function]
    cls.add_method('NextSeqNum', 
                   'uint16_t', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendTo(ns3::psc::McpttMsg & msg, uint32_t const ssrc) [member function]
    cls.add_method('SendTo', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg'), param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendToAll(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('SendToAll', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SendToAllExcept(ns3::psc::McpttMsg & msg, uint32_t const ssrc) [member function]
    cls.add_method('SendToAllExcept', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg'), param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT1(ns3::Time const & delayT1) [member function]
    cls.add_method('SetDelayT1', 
                   'void', 
                   [param('ns3::Time const &', 'delayT1')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT2(ns3::Time const & delayT2) [member function]
    cls.add_method('SetDelayT2', 
                   'void', 
                   [param('ns3::Time const &', 'delayT2')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT20(ns3::Time const & delayT20) [member function]
    cls.add_method('SetDelayT20', 
                   'void', 
                   [param('ns3::Time const &', 'delayT20')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT3(ns3::Time const & delayT3) [member function]
    cls.add_method('SetDelayT3', 
                   'void', 
                   [param('ns3::Time const &', 'delayT3')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT4(ns3::Time const & delayT4) [member function]
    cls.add_method('SetDelayT4', 
                   'void', 
                   [param('ns3::Time const &', 'delayT4')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDelayT7(ns3::Time const & delayT7) [member function]
    cls.add_method('SetDelayT7', 
                   'void', 
                   [param('ns3::Time const &', 'delayT7')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetDualControl(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControl> const dualControl) [member function]
    cls.add_method('SetDualControl', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControl > const', 'dualControl')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetLimitC20(uint32_t limitC20) [member function]
    cls.add_method('SetLimitC20', 
                   'void', 
                   [param('uint32_t', 'limitC20')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetLimitC7(uint32_t limitC7) [member function]
    cls.add_method('SetLimitC7', 
                   'void', 
                   [param('uint32_t', 'limitC7')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetOwner(ns3::Ptr<ns3::psc::McpttServerCall> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetRejectCause(uint16_t const rejectCause) [member function]
    cls.add_method('SetRejectCause', 
                   'void', 
                   [param('uint16_t const', 'rejectCause')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT1() [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT2() [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT20() [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT3() [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT4() [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-arbitrator.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitrator::ExpiryOfT7() [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState::McpttOnNetworkFloorArbitratorState(ns3::psc::McpttOnNetworkFloorArbitratorState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorState const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallRelease1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT20(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT3(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT4(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ExpiryOfT7(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorState::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Selected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorState::Unselected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorState::McpttOnNetworkFloorArbitratorState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateIdle_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::McpttOnNetworkFloorArbitratorStateIdle(ns3::psc::McpttOnNetworkFloorArbitratorStateIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateIdle const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::McpttOnNetworkFloorArbitratorStateIdle() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ExpiryOfT4(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT4', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ExpiryOfT7(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT7', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateIdle> ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateIdle >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateIdle::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateInitialising_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::McpttOnNetworkFloorArbitratorStateInitialising(ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::McpttOnNetworkFloorArbitratorStateInitialising() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising> ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateInitialising::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::McpttOnNetworkFloorArbitratorStateReleasing(ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::McpttOnNetworkFloorArbitratorStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing> ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateRevoke_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::McpttOnNetworkFloorArbitratorStateRevoke(ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::McpttOnNetworkFloorArbitratorStateRevoke() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ExpiryOfT3(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT3', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke> ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateRevoke::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::McpttOnNetworkFloorArbitratorStateStartStop(ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::McpttOnNetworkFloorArbitratorStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> participant) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'participant')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop> ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorArbitratorStateTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::McpttOnNetworkFloorArbitratorStateTaken(ns3::psc::McpttOnNetworkFloorArbitratorStateTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorArbitratorStateTaken const &', 'arg0')])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::McpttOnNetworkFloorArbitratorStateTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ExpiryOfT20(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine) const [member function]
    cls.add_method('ExpiryOfT20', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitratorStateTaken> ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitratorStateTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::IsFloorOccupied() const [member function]
    cls.add_method('IsFloorOccupied', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-arbitrator-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorArbitratorStateTaken::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControl_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl::McpttOnNetworkFloorDualControl(ns3::psc::McpttOnNetworkFloorDualControl const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControl const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControl::McpttOnNetworkFloorDualControl() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorDualControl::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttOnNetworkFloorDualControl::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControl::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorDualControl::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorDualControl::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorDualControl::GetT11() const [member function]
    cls.add_method('GetT11', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorDualControl::GetT12() const [member function]
    cls.add_method('GetT12', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorDualControl::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorDualControl::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorDualControl::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ReceivePreemptiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetDelayT11(ns3::Time const & delayT11) [member function]
    cls.add_method('SetDelayT11', 
                   'void', 
                   [param('ns3::Time const &', 'delayT11')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetDelayT12(ns3::Time const & delayT12) [member function]
    cls.add_method('SetDelayT12', 
                   'void', 
                   [param('ns3::Time const &', 'delayT12')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetOwner(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::Terminate() [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ExpiryOfT11() [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-dual-control.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControl::ExpiryOfT12() [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState::McpttOnNetworkFloorDualControlState(ns3::psc::McpttOnNetworkFloorDualControlState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlState const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::CallRelease1(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::CallRelease2(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ClientRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Enter(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ExpiryOfT11(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ExpiryOfT12(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveFloorRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceiveMedia(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::ReceivePreemptiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Selected(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Terminate(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlState::Unselected(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlState::McpttOnNetworkFloorDualControlState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::McpttOnNetworkFloorDualControlStateReleasing(ns3::psc::McpttOnNetworkFloorDualControlStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::McpttOnNetworkFloorDualControlStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::CallRelease2(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateReleasing> ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::McpttOnNetworkFloorDualControlStateStartStop(ns3::psc::McpttOnNetworkFloorDualControlStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::McpttOnNetworkFloorDualControlStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateStartStop> ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateStartStop::ReceivePreemptiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceivePreemptiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorDualControlStateTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken::McpttOnNetworkFloorDualControlStateTaken(ns3::psc::McpttOnNetworkFloorDualControlStateTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorDualControlStateTaken const &', 'arg0')])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorDualControlStateTaken::McpttOnNetworkFloorDualControlStateTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ClientRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::Enter(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ExpiryOfT11(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT11', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ExpiryOfT12(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('ExpiryOfT12', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorDualControlStateTaken> ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorDualControlStateTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorDualControlStateTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveFloorRelease(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveFloorRequest(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::ReceiveMedia(ns3::psc::McpttOnNetworkFloorDualControl & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-dual-control-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorDualControlStateTaken::Terminate(ns3::psc::McpttOnNetworkFloorDualControl & machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorDualControl &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipant_methods(root_module, cls):
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant::McpttOnNetworkFloorParticipant(ns3::psc::McpttOnNetworkFloorParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'arg0')])
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipant::McpttOnNetworkFloorParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::AcceptGrant() [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallEstablished(ns3::psc::McpttSdpFmtpHeader const & sdpHeader) [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttSdpFmtpHeader const &', 'sdpHeader')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallInitiated() [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::FloorGranted() [member function]
    cls.add_method('FloorGranted', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC100() const [member function]
    cls.add_method('GetC100', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC101() const [member function]
    cls.add_method('GetC101', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCounter> ns3::psc::McpttOnNetworkFloorParticipant::GetC104() const [member function]
    cls.add_method('GetC104', 
                   'ns3::Ptr< ns3::psc::McpttCounter >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttOnNetworkFloorParticipant::GetCall() const [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorParticipant::GetCallTypeId() const [member function]
    cls.add_method('GetCallTypeId', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttOnNetworkFloorParticipant::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorParticipant::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> ns3::psc::McpttOnNetworkFloorParticipant::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::Packet> ns3::psc::McpttOnNetworkFloorParticipant::GetStoredMsgs() const [member function]
    cls.add_method('GetStoredMsgs', 
                   'ns3::Ptr< ns3::Packet >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT100() const [member function]
    cls.add_method('GetT100', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT101() const [member function]
    cls.add_method('GetT101', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT103() const [member function]
    cls.add_method('GetT103', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT104() const [member function]
    cls.add_method('GetT104', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorParticipant::GetT132() const [member function]
    cls.add_method('GetT132', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorParticipant::GetTxSsrc() const [member function]
    cls.add_method('GetTxSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::HasFloor() const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsAckRequired() const [member function]
    cls.add_method('IsAckRequired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsGranted() const [member function]
    cls.add_method('IsGranted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsImplicitRequest() const [member function]
    cls.add_method('IsImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOverridden() const [member function]
    cls.add_method('IsOverridden', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsOverriding() const [member function]
    cls.add_method('IsOverriding', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::MediaReady(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorAck(ns3::psc::McpttFloorMsgAck const & msg) [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorDeny(ns3::psc::McpttFloorMsgDeny const & msg) [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorGranted(ns3::psc::McpttFloorMsgGranted const & msg) [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorIdle(ns3::psc::McpttFloorMsgIdle const & msg) [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorRevoke(ns3::psc::McpttFloorMsgRevoke const & msg) [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveFloorTaken(ns3::psc::McpttFloorMsgTaken const & msg) [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ReportEvent(char const * reason) const [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('char const *', 'reason')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Send(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SendFloorQueuePositionRequest() [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('SetCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT100(ns3::Time const & delayT100) [member function]
    cls.add_method('SetDelayT100', 
                   'void', 
                   [param('ns3::Time const &', 'delayT100')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT101(ns3::Time const & delayT101) [member function]
    cls.add_method('SetDelayT101', 
                   'void', 
                   [param('ns3::Time const &', 'delayT101')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT103(ns3::Time const & delayT103) [member function]
    cls.add_method('SetDelayT103', 
                   'void', 
                   [param('ns3::Time const &', 'delayT103')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT104(ns3::Time const & delayT104) [member function]
    cls.add_method('SetDelayT104', 
                   'void', 
                   [param('ns3::Time const &', 'delayT104')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDelayT132(ns3::Time const & delayT132) [member function]
    cls.add_method('SetDelayT132', 
                   'void', 
                   [param('ns3::Time const &', 'delayT132')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetDualFloor(bool const & dualFloor) [member function]
    cls.add_method('SetDualFloor', 
                   'void', 
                   [param('bool const &', 'dualFloor')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC100(uint32_t limitC100) [member function]
    cls.add_method('SetLimitC100', 
                   'void', 
                   [param('uint32_t', 'limitC100')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC101(uint32_t limitC101) [member function]
    cls.add_method('SetLimitC101', 
                   'void', 
                   [param('uint32_t', 'limitC101')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetLimitC104(uint32_t limitC104) [member function]
    cls.add_method('SetLimitC104', 
                   'void', 
                   [param('uint32_t', 'limitC104')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOriginator(bool const & originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const &', 'originator')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOverridden(bool const & overridden) [member function]
    cls.add_method('SetOverridden', 
                   'void', 
                   [param('bool const &', 'overridden')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetOverriding(bool const & overriding) [member function]
    cls.add_method('SetOverriding', 
                   'void', 
                   [param('bool const &', 'overriding')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetPriority(uint8_t priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('uint8_t', 'priority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipant::ShouldGenMedia() const [member function]
    cls.add_method('ShouldGenMedia', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT100() [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT101() [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT103() [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT104() [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipant::ExpiryOfT132() [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState::McpttOnNetworkFloorParticipantState(ns3::psc::McpttOnNetworkFloorParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantState const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::AcceptGrant(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallEstablished(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallInitiated(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallRelease1(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::CallRelease2(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT100(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT101(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT103(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT104(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ExpiryOfT132(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): std::string ns3::psc::McpttOnNetworkFloorParticipantState::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipantState::HasFloor(ns3::psc::McpttOnNetworkFloorParticipant const & machine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::MediaReady(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorAck(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgAck const & msg) const [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::ReleaseRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::SendFloorQueuePositionRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantState::Unselected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantState::McpttOnNetworkFloorParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateHasNoPermission_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::McpttOnNetworkFloorParticipantStateHasNoPermission(ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::McpttOnNetworkFloorParticipantStateHasNoPermission() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ExpiryOfT103(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT103', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission> ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasNoPermission::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateHasPermission_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::McpttOnNetworkFloorParticipantStateHasPermission(ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::McpttOnNetworkFloorParticipantStateHasPermission() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission> ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::HasFloor(ns3::psc::McpttOnNetworkFloorParticipant const & machine) const [member function]
    cls.add_method('HasFloor', 
                   'bool', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::MediaReady(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('MediaReady', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateHasPermission::Unselected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRelease_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::McpttOnNetworkFloorParticipantStatePendingRelease(ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::McpttOnNetworkFloorParticipantStatePendingRelease() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ExpiryOfT100(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT100', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease> ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRelease::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStatePendingRequest_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::McpttOnNetworkFloorParticipantStatePendingRequest(ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::McpttOnNetworkFloorParticipantStatePendingRequest() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ExpiryOfT101(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT101', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest> ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStatePendingRequest::Selected(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateQueued_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued::McpttOnNetworkFloorParticipantStateQueued(ns3::psc::McpttOnNetworkFloorParticipantStateQueued const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateQueued const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateQueued::McpttOnNetworkFloorParticipantStateQueued() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::AcceptGrant(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('AcceptGrant', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ExpiryOfT104(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT104', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ExpiryOfT132(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('ExpiryOfT132', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateQueued> ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateQueued >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateQueued::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::PttRelease(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateQueued::SendFloorQueuePositionRequest(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('SendFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::McpttOnNetworkFloorParticipantStateReleasing(ns3::psc::McpttOnNetworkFloorParticipantStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::McpttOnNetworkFloorParticipantStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::CallRelease2(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateReleasing> ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::McpttOnNetworkFloorParticipantStateStartStop(ns3::psc::McpttOnNetworkFloorParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorParticipantStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::McpttOnNetworkFloorParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::CallEstablished(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallEstablished', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::CallInitiated(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('CallInitiated', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorParticipantStateStartStop> ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::PttPush(ns3::psc::McpttOnNetworkFloorParticipant & machine) const [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorAck(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgAck const & msg) const [member function]
    cls.add_method('ReceiveFloorAck', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgAck const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorDeny(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgDeny const & msg) const [member function]
    cls.add_method('ReceiveFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgDeny const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorGranted(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgGranted const & msg) const [member function]
    cls.add_method('ReceiveFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgGranted const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorIdle(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgIdle const & msg) const [member function]
    cls.add_method('ReceiveFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgIdle const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorQueuePositionInfo(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgQueuePositionInfo const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorRevoke(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgRevoke const & msg) const [member function]
    cls.add_method('ReceiveFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgRevoke const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveFloorTaken(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttFloorMsgTaken const & msg) const [member function]
    cls.add_method('ReceiveFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttFloorMsgTaken const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorParticipantStateStartStop::ReceiveMedia(ns3::psc::McpttOnNetworkFloorParticipant & machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttOnNetworkFloorParticipant &', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipant_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant::McpttOnNetworkFloorTowardsParticipant(ns3::psc::McpttOnNetworkFloorTowardsParticipant const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipant const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipant::McpttOnNetworkFloorTowardsParticipant() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallInitialized(bool implicitRequest) [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('bool', 'implicitRequest')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallRelease1() [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::CallRelease2() [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ChangeState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> state) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ClientRelease() [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::DoSend(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('DoSend', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetFloorChannel() const [member function]
    cls.add_method('GetFloorChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetFloorPort() const [member function]
    cls.add_method('GetFloorPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::TypeId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetMediaChannel() const [member function]
    cls.add_method('GetMediaChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint16_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetMediaPort() const [member function]
    cls.add_method('GetMediaPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Address ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetPeerAddress() const [member function]
    cls.add_method('GetPeerAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetPeerUserId() const [member function]
    cls.add_method('GetPeerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetRevokeMsg() const [member function]
    cls.add_method('GetRevokeMsg', 
                   'ns3::psc::McpttFloorMsgRevoke', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint8_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStoredPriority() const [member function]
    cls.add_method('GetStoredPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): uint32_t ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetStoredSsrc() const [member function]
    cls.add_method('GetStoredSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::Ptr<ns3::psc::McpttTimer> ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetT8() const [member function]
    cls.add_method('GetT8', 
                   'ns3::Ptr< ns3::psc::McpttTimer >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): static ns3::TypeId ns3::psc::McpttOnNetworkFloorTowardsParticipant::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsDualFloor() const [member function]
    cls.add_method('IsDualFloor', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsImplicitRequest() const [member function]
    cls.add_method('IsImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOriginator() const [member function]
    cls.add_method('IsOriginator', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOverridden() const [member function]
    cls.add_method('IsOverridden', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsOverriding() const [member function]
    cls.add_method('IsOverriding', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsQueueing() const [member function]
    cls.add_method('IsQueueing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsReceiveOnly() const [member function]
    cls.add_method('IsReceiveOnly', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): bool ns3::psc::McpttOnNetworkFloorTowardsParticipant::IsStarted() const [member function]
    cls.add_method('IsStarted', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Receive(ns3::psc::McpttFloorMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorRelease(ns3::psc::McpttFloorMsgRelease const & msg) [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorRequest(ns3::psc::McpttFloorMsgRequest const & msg) [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveMedia(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Send(ns3::psc::McpttMsg & msg) [member function]
    cls.add_method('Send', 
                   'void', 
                   [param('ns3::psc::McpttMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetDelayT8(ns3::Time const & delayT8) [member function]
    cls.add_method('SetDelayT8', 
                   'void', 
                   [param('ns3::Time const &', 'delayT8')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetDualFloor(bool const dualFloor) [member function]
    cls.add_method('SetDualFloor', 
                   'void', 
                   [param('bool const', 'dualFloor')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetFloorChannel(ns3::Ptr<ns3::psc::McpttChannel> const floorChannel) [member function]
    cls.add_method('SetFloorChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel > const', 'floorChannel')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetFloorPort(uint16_t const floorPort) [member function]
    cls.add_method('SetFloorPort', 
                   'void', 
                   [param('uint16_t const', 'floorPort')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetMediaChannel(ns3::Ptr<ns3::psc::McpttChannel> const mediaChannel) [member function]
    cls.add_method('SetMediaChannel', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttChannel > const', 'mediaChannel')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetMediaPort(uint16_t const mediaPort) [member function]
    cls.add_method('SetMediaPort', 
                   'void', 
                   [param('uint16_t const', 'mediaPort')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOriginator(bool const originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('bool const', 'originator')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOverridden(bool const overridden) [member function]
    cls.add_method('SetOverridden', 
                   'void', 
                   [param('bool const', 'overridden')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOverriding(bool const overriding) [member function]
    cls.add_method('SetOverriding', 
                   'void', 
                   [param('bool const', 'overriding')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetOwner(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'owner')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetPeerAddress(ns3::Address const & peerAddress) [member function]
    cls.add_method('SetPeerAddress', 
                   'void', 
                   [param('ns3::Address const &', 'peerAddress')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetPeerUserId(uint32_t userId) [member function]
    cls.add_method('SetPeerUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetRevokeMsg(ns3::psc::McpttFloorMsgRevoke const & revokeMsg) [member function]
    cls.add_method('SetRevokeMsg', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke const &', 'revokeMsg')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetState(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantState >', 'state')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStoredPriority(uint8_t storedPriority) [member function]
    cls.add_method('SetStoredPriority', 
                   'void', 
                   [param('uint8_t', 'storedPriority')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetStoredSsrc(uint32_t const storedSsrc) [member function]
    cls.add_method('SetStoredSsrc', 
                   'void', 
                   [param('uint32_t const', 'storedSsrc')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::Terminate() [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ExpiryOfT8() [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveFloorPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveFloorPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::ReceiveMediaPkt(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveMediaPkt', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorDeny(ns3::psc::McpttFloorMsgDeny & msg) [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorGranted(ns3::psc::McpttFloorMsgGranted & msg) [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorIdle(ns3::psc::McpttFloorMsgIdle & msg) [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorRevoke(ns3::psc::McpttFloorMsgRevoke & msg) [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendFloorTaken(ns3::psc::McpttFloorMsgTaken & msg) [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-on-network-floor-towards-participant.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipant::SendMedia(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState::McpttOnNetworkFloorTowardsParticipantState(ns3::psc::McpttOnNetworkFloorTowardsParticipantState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantState const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallRelease1(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease1', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ClientRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ClientRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorQueuePositionRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Selected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Selected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorDeny(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgDeny & msg) const [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorRevoke(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRevoke & msg) const [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::SendMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Terminate(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Terminate', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantState::Unselected(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Unselected', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantState::McpttOnNetworkFloorTowardsParticipantState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorDeny(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgDeny & msg) const [member function]
    cls.add_method('SendFloorDeny', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgDeny &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedIdle::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedInitiating::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedMedia::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorQueuePositionRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgQueuePositionRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorQueuePositionRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorGranted(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgGranted & msg) const [member function]
    cls.add_method('SendFloorGranted', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgGranted &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateNotPermittedTaken::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePendingRevoke_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke(ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ExpiryOfT8(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('ExpiryOfT8', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke> ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePendingRevoke::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStatePermitted_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::McpttOnNetworkFloorTowardsParticipantStatePermitted(ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::McpttOnNetworkFloorTowardsParticipantStatePermitted() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::Enter(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('Enter', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted> ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveFloorRelease(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRelease const & msg) const [member function]
    cls.add_method('ReceiveFloorRelease', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRelease const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveFloorRequest(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRequest const & msg) const [member function]
    cls.add_method('ReceiveFloorRequest', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRequest const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::ReceiveMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg const & msg) const [member function]
    cls.add_method('ReceiveMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorIdle(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgIdle & msg) const [member function]
    cls.add_method('SendFloorIdle', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgIdle &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorRevoke(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgRevoke & msg) const [member function]
    cls.add_method('SendFloorRevoke', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgRevoke &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendFloorTaken(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttFloorMsgTaken & msg) const [member function]
    cls.add_method('SendFloorTaken', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttFloorMsgTaken &', 'msg')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStatePermitted::SendMedia(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine, ns3::psc::McpttMediaMsg & msg) const [member function]
    cls.add_method('SendMedia', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine'), param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateReleasing_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::McpttOnNetworkFloorTowardsParticipantStateReleasing(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::McpttOnNetworkFloorTowardsParticipantStateReleasing() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::CallRelease2(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallRelease2', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateReleasing::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttOnNetworkFloorTowardsParticipantStateStartStop_methods(root_module, cls):
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::McpttOnNetworkFloorTowardsParticipantStateStartStop(ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop const &', 'arg0')])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::McpttOnNetworkFloorTowardsParticipantStateStartStop() [constructor]
    cls.add_constructor([])
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): void ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::CallInitialized(ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipant> machine) const [member function]
    cls.add_method('CallInitialized', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipant >', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop> ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop >', 
                   [], 
                   is_static=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-on-network-floor-towards-participant-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttOnNetworkFloorTowardsParticipantStateStartStop::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    return

def register_Ns3PscMcpttPttApp_methods(root_module, cls):
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::McpttPttApp(ns3::psc::McpttPttApp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPttApp const &', 'arg0')])
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::McpttPttApp() [constructor]
    cls.add_constructor([])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AcceptFloorGrant() [member function]
    cls.add_method('AcceptFloorGrant', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::AddCall(ns3::Ptr<ns3::psc::McpttCall> call) [member function]
    cls.add_method('AddCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttCall >', 'call')])
    ## mcptt-ptt-app.h (module 'psc'): static uint16_t ns3::psc::McpttPttApp::AllocateNextPortNumber() [member function]
    cls.add_method('AllocateNextPortNumber', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::CloseCallChannel(uint16_t port, ns3::Ptr<ns3::psc::McpttCall> call, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('CloseCallChannel', 
                   'void', 
                   [param('uint16_t', 'port'), param('ns3::Ptr< ns3::psc::McpttCall >', 'call'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::CreateCall(ns3::ObjectFactory & callFac, ns3::ObjectFactory & floorFac, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('CreateCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [param('ns3::ObjectFactory &', 'callFac'), param('ns3::ObjectFactory &', 'floorFac'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::CreateCall(ns3::ObjectFactory & callFac, ns3::ObjectFactory & floorFac, ns3::psc::McpttCall::NetworkCallType callType, uint16_t callId) [member function]
    cls.add_method('CreateCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [param('ns3::ObjectFactory &', 'callFac'), param('ns3::ObjectFactory &', 'floorFac'), param('ns3::psc::McpttCall::NetworkCallType', 'callType'), param('uint16_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttChannel> ns3::psc::McpttPttApp::GetCallChannel(uint16_t port) const [member function]
    cls.add_method('GetCallChannel', 
                   'ns3::Ptr< ns3::psc::McpttChannel >', 
                   [param('uint16_t', 'port')], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): std::map<unsigned short, ns3::Ptr<ns3::psc::McpttCall>, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Ptr<ns3::psc::McpttCall> > > > ns3::psc::McpttPttApp::GetCalls() const [member function]
    cls.add_method('GetCalls', 
                   'std::map< unsigned short, ns3::Ptr< ns3::psc::McpttCall > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): static uint16_t ns3::psc::McpttPttApp::GetCurrentPortNumber() [member function]
    cls.add_method('GetCurrentPortNumber', 
                   'uint16_t', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Address ns3::psc::McpttPttApp::GetLocalAddress() const [member function]
    cls.add_method('GetLocalAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttMediaSrc> ns3::psc::McpttPttApp::GetMediaSrc() const [member function]
    cls.add_method('GetMediaSrc', 
                   'ns3::Ptr< ns3::psc::McpttMediaSrc >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Vector ns3::psc::McpttPttApp::GetNodeLoc() const [member function]
    cls.add_method('GetNodeLoc', 
                   'ns3::Vector', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusher> ns3::psc::McpttPttApp::GetPusher() const [member function]
    cls.add_method('GetPusher', 
                   'ns3::Ptr< ns3::psc::McpttPusher >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttCall> ns3::psc::McpttPttApp::GetSelectedCall() const [member function]
    cls.add_method('GetSelectedCall', 
                   'ns3::Ptr< ns3::psc::McpttCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::Ptr<ns3::sip::SipAgent> ns3::psc::McpttPttApp::GetSipAgent() const [member function]
    cls.add_method('GetSipAgent', 
                   'ns3::Ptr< ns3::sip::SipAgent >', 
                   [], 
                   is_const=True)
    ## mcptt-ptt-app.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPttApp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-ptt-app.h (module 'psc'): uint32_t ns3::psc::McpttPttApp::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::HasGrpCallFor(uint32_t grpId) [member function]
    cls.add_method('HasGrpCallFor', 
                   'bool', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::HasPrivateCallFor(uint32_t userId) [member function]
    cls.add_method('HasPrivateCallFor', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::InitiateCall() [member function]
    cls.add_method('InitiateCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::IsPushed() const [member function]
    cls.add_method('IsPushed', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NotifyPushed() [member function]
    cls.add_method('NotifyPushed', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NotifyReleased() [member function]
    cls.add_method('NotifyReleased', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::OpenCallChannel(uint16_t port, ns3::Ptr<ns3::psc::McpttCall> call, ns3::psc::McpttCall::NetworkCallType callType) [member function]
    cls.add_method('OpenCallChannel', 
                   'void', 
                   [param('uint16_t', 'port'), param('ns3::Ptr< ns3::psc::McpttCall >', 'call'), param('ns3::psc::McpttCall::NetworkCallType', 'callType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseCall() [member function]
    cls.add_method('ReleaseCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseCallByCallId(uint32_t callId) [member function]
    cls.add_method('ReleaseCallByCallId', 
                   'void', 
                   [param('uint32_t', 'callId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReleaseRequest() [member function]
    cls.add_method('ReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReportEvent(uint16_t callId, char const * reason) [member function]
    cls.add_method('ReportEvent', 
                   'void', 
                   [param('uint16_t', 'callId'), param('char const *', 'reason')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SelectCall(uint32_t callId, bool pushOnSelect=false) [member function]
    cls.add_method('SelectCall', 
                   'void', 
                   [param('uint32_t', 'callId'), param('bool', 'pushOnSelect', default_value='false')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SessionInitiateRequest() [member function]
    cls.add_method('SessionInitiateRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SessionReleaseRequest() [member function]
    cls.add_method('SessionReleaseRequest', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetFloorGrantedCb(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const floorGrantedCb) [member function]
    cls.add_method('SetFloorGrantedCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'floorGrantedCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetLocalAddress(ns3::Address const & localAddress) [member function]
    cls.add_method('SetLocalAddress', 
                   'void', 
                   [param('ns3::Address const &', 'localAddress')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetMediaSrc(ns3::Ptr<ns3::psc::McpttMediaSrc> mediaSrc) [member function]
    cls.add_method('SetMediaSrc', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttMediaSrc >', 'mediaSrc')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('SetPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetSelectedCallChangeCb(ns3::Callback<void, ns3::Ptr<ns3::psc::McpttCall>, ns3::Ptr<ns3::psc::McpttCall>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const selectedCallChangeCb) [member function]
    cls.add_method('SetSelectedCallChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::psc::McpttCall >, ns3::Ptr< ns3::psc::McpttCall >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'selectedCallChangeCb')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TakePushNotification() [member function]
    cls.add_method('TakePushNotification', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TakeReleaseNotification() [member function]
    cls.add_method('TakeReleaseNotification', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): bool ns3::psc::McpttPttApp::TakeSendReq(ns3::psc::McpttMediaMsg & msg) [member function]
    cls.add_method('TakeSendReq', 
                   'bool', 
                   [param('ns3::psc::McpttMediaMsg &', 'msg')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TraceMessageReceive(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageReceive', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::TraceMessageSend(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageSend', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-ptt-app.h (module 'psc'): ns3::psc::McpttPttApp::CALL_SELECTED [variable]
    cls.add_static_attribute('CALL_SELECTED', 'char const * const', is_const=True)
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::FloorGrantedCb() [member function]
    cls.add_method('FloorGrantedCb', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::NewCallCb(uint16_t callId) [member function]
    cls.add_method('NewCallCb', 
                   'void', 
                   [param('uint16_t', 'callId')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::Receive(ns3::Ptr<ns3::Packet> pkt, ns3::psc::McpttCallMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::psc::McpttCallMsg const &', 'msg')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::ReceiveOffNetworkCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address from) [member function]
    cls.add_method('ReceiveOffNetworkCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address', 'from')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-ptt-app.h (module 'psc'): void ns3::psc::McpttPttApp::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusher_methods(root_module, cls):
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher::McpttPusher(ns3::psc::McpttPusher const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusher const &', 'arg0')])
    ## mcptt-pusher.h (module 'psc'): ns3::psc::McpttPusher::McpttPusher() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::CancelPush() [member function]
    cls.add_method('CancelPush', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::CancelRelease() [member function]
    cls.add_method('CancelRelease', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPttApp> ns3::psc::McpttPusher::GetPttApp() const [member function]
    cls.add_method('GetPttApp', 
                   'ns3::Ptr< ns3::psc::McpttPttApp >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusher::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::IsPushing() const [member function]
    cls.add_method('IsPushing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::NotifyPushed() [member function]
    cls.add_method('NotifyPushed', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::NotifyReleased() [member function]
    cls.add_method('NotifyReleased', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Push() [member function]
    cls.add_method('Push', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Release() [member function]
    cls.add_method('Release', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::SchedulePush() [member function]
    cls.add_method('SchedulePush', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::SchedulePush(ns3::Time const & delay) [member function]
    cls.add_method('SchedulePush', 
                   'bool', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::ScheduleRelease() [member function]
    cls.add_method('ScheduleRelease', 
                   'bool', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): bool ns3::psc::McpttPusher::ScheduleRelease(ns3::Time const & delay) [member function]
    cls.add_method('ScheduleRelease', 
                   'bool', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::SetPttApp(ns3::Ptr<ns3::psc::McpttPttApp> pttApp) [member function]
    cls.add_method('SetPttApp', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPttApp >', 'pttApp')], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::CancelEvents() [member function]
    cls.add_method('CancelEvents', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher.h (module 'psc'): void ns3::psc::McpttPusher::SetPushing(bool pushing) [member function]
    cls.add_method('SetPushing', 
                   'void', 
                   [param('bool', 'pushing')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorInterface_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface::McpttPusherOrchestratorInterface(ns3::psc::McpttPusherOrchestratorInterface const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorInterface const &', 'arg0')])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::psc::McpttPusherOrchestratorInterface::McpttPusherOrchestratorInterface() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorInterface::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorInterface::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorInterface::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorInterface::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorInterface::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorInterface::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::StartAt(ns3::Time const & t) [member function]
    cls.add_method('StartAt', 
                   'void', 
                   [param('ns3::Time const &', 't')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::StopAt(ns3::Time const & t) [member function]
    cls.add_method('StopAt', 
                   'void', 
                   [param('ns3::Time const &', 't')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::TracePttDuration(uint32_t const userId, ns3::Time const & duration) [member function]
    cls.add_method('TracePttDuration', 
                   'void', 
                   [param('uint32_t const', 'userId'), param('ns3::Time const &', 'duration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-interface.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorInterface::TracePttIat(uint32_t const userId, ns3::Time const & iat) [member function]
    cls.add_method('TracePttIat', 
                   'void', 
                   [param('uint32_t const', 'userId'), param('ns3::Time const &', 'iat')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorSessionCdf_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::McpttPusherOrchestratorSessionCdf(ns3::psc::McpttPusherOrchestratorSessionCdf const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorSessionCdf const &', 'arg0')])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::McpttPusherOrchestratorSessionCdf() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorSessionCdf::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::ChangeCdf(ns3::Ptr<ns3::EmpiricalRandomVariable> sessionDurationVariable, double avgSessionDuration) [member function]
    cls.add_method('ChangeCdf', 
                   'void', 
                   [param('ns3::Ptr< ns3::EmpiricalRandomVariable >', 'sessionDurationVariable'), param('double', 'avgSessionDuration')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorSessionCdf::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): double ns3::psc::McpttPusherOrchestratorSessionCdf::GetActivityFactor() const [member function]
    cls.add_method('GetActivityFactor', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> ns3::psc::McpttPusherOrchestratorSessionCdf::GetOrchestrator() const [member function]
    cls.add_method('GetOrchestrator', 
                   'ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorSessionCdf::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorSessionCdf::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSessionCdf::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSessionCdf::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::SetActivityFactor(double af) [member function]
    cls.add_method('SetActivityFactor', 
                   'void', 
                   [param('double', 'af')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::SetOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator) [member function]
    cls.add_method('SetOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::CDF_POINTS [variable]
    cls.add_static_attribute('CDF_POINTS', 'std::vector< std::pair< double, double > > const', is_const=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSessionCdf::CDF_POINTS_AVG [variable]
    cls.add_static_attribute('CDF_POINTS_AVG', 'double const', is_const=True)
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::StartSession() [member function]
    cls.add_method('StartSession', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::StopSession() [member function]
    cls.add_method('StopSession', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-session-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSessionCdf::UpdateSessionIatVariable() [member function]
    cls.add_method('UpdateSessionIatVariable', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorSpurtCdf_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::McpttPusherOrchestratorSpurtCdf(ns3::psc::McpttPusherOrchestratorSpurtCdf const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorSpurtCdf const &', 'arg0')])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::McpttPusherOrchestratorSpurtCdf() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorSpurtCdf::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::ChangeCdf(ns3::Ptr<ns3::EmpiricalRandomVariable> pttDurationVariable, double avgPttDuration) [member function]
    cls.add_method('ChangeCdf', 
                   'void', 
                   [param('ns3::Ptr< ns3::EmpiricalRandomVariable >', 'pttDurationVariable'), param('double', 'avgPttDuration')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorSpurtCdf::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): double ns3::psc::McpttPusherOrchestratorSpurtCdf::GetActivityFactor() const [member function]
    cls.add_method('GetActivityFactor', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorSpurtCdf::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorSpurtCdf::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSpurtCdf::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorSpurtCdf::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::SetActivityFactor(double af) [member function]
    cls.add_method('SetActivityFactor', 
                   'void', 
                   [param('double', 'af')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::CDF_POINTS [variable]
    cls.add_static_attribute('CDF_POINTS', 'std::vector< std::pair< double, double > > const', is_const=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): ns3::psc::McpttPusherOrchestratorSpurtCdf::CDF_POINTS_AVG [variable]
    cls.add_static_attribute('CDF_POINTS_AVG', 'double const', is_const=True)
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::PttDurationTrace(uint32_t userId, ns3::Time duration) [member function]
    cls.add_method('PttDurationTrace', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'duration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::PttIatTrace(uint32_t userId, ns3::Time iat) [member function]
    cls.add_method('PttIatTrace', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'iat')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-spurt-cdf.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorSpurtCdf::UpdatePttIatVariable() [member function]
    cls.add_method('UpdatePttIatVariable', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttQueuedUserInfo_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo(ns3::psc::McpttQueuedUserInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttQueuedUserInfo const &', 'arg0')])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo() [constructor]
    cls.add_constructor([])
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttQueuedUserInfo::McpttQueuedUserInfo(uint32_t ssrc, ns3::psc::McpttFloorMsgFieldQueuedUserId const & userId, ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & info) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc'), param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'userId'), param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'info')])
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo ns3::psc::McpttQueuedUserInfo::GetInfo() const [member function]
    cls.add_method('GetInfo', 
                   'ns3::psc::McpttFloorMsgFieldQueuePositionInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::TypeId ns3::psc::McpttQueuedUserInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): uint32_t ns3::psc::McpttQueuedUserInfo::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): static ns3::TypeId ns3::psc::McpttQueuedUserInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-queued-user-info.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId ns3::psc::McpttQueuedUserInfo::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldQueuedUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & info) [member function]
    cls.add_method('SetInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'info')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-queued-user-info.h (module 'psc'): void ns3::psc::McpttQueuedUserInfo::SetUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'userId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttRtpHeader_methods(root_module, cls):
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(ns3::psc::McpttRtpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'arg0')])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader() [constructor]
    cls.add_constructor([])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(uint32_t ssrc) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc')])
    ## mcptt-rtp-header.h (module 'psc'): ns3::psc::McpttRtpHeader::McpttRtpHeader(uint32_t ssrc, uint8_t payloadType) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc'), param('uint8_t', 'payloadType')])
    ## mcptt-rtp-header.h (module 'psc'): bool ns3::psc::McpttRtpHeader::AddCsrc(uint32_t csrc) [member function]
    cls.add_method('AddCsrc', 
                   'bool', 
                   [param('uint32_t', 'csrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::ClearCsrcs() [member function]
    cls.add_method('ClearCsrcs', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetCsrcCount() const [member function]
    cls.add_method('GetCsrcCount', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int> > ns3::psc::McpttRtpHeader::GetCsrcs() const [member function]
    cls.add_method('GetCsrcs', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetExtension() const [member function]
    cls.add_method('GetExtension', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): ns3::TypeId ns3::psc::McpttRtpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetMarker() const [member function]
    cls.add_method('GetMarker', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetPadding() const [member function]
    cls.add_method('GetPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetPayloadType() const [member function]
    cls.add_method('GetPayloadType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint16_t ns3::psc::McpttRtpHeader::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): uint32_t ns3::psc::McpttRtpHeader::GetTimestamp() const [member function]
    cls.add_method('GetTimestamp', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): static ns3::TypeId ns3::psc::McpttRtpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-rtp-header.h (module 'psc'): uint8_t ns3::psc::McpttRtpHeader::GetVersion() const [member function]
    cls.add_method('GetVersion', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): bool ns3::psc::McpttRtpHeader::RemoveCsrc(uint32_t csrc) [member function]
    cls.add_method('RemoveCsrc', 
                   'bool', 
                   [param('uint32_t', 'csrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetExtension(uint8_t extension) [member function]
    cls.add_method('SetExtension', 
                   'void', 
                   [param('uint8_t', 'extension')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetMarker(uint8_t marker) [member function]
    cls.add_method('SetMarker', 
                   'void', 
                   [param('uint8_t', 'marker')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetPadding(uint8_t padding) [member function]
    cls.add_method('SetPadding', 
                   'void', 
                   [param('uint8_t', 'padding')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetPayloadType(uint8_t payloadType) [member function]
    cls.add_method('SetPayloadType', 
                   'void', 
                   [param('uint8_t', 'payloadType')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetSeqNum(uint16_t seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('uint16_t', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetTimestamp(uint32_t timestamp) [member function]
    cls.add_method('SetTimestamp', 
                   'void', 
                   [param('uint32_t', 'timestamp')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetVersion(uint8_t version) [member function]
    cls.add_method('SetVersion', 
                   'void', 
                   [param('uint8_t', 'version')], 
                   is_virtual=True)
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetCsrcCount(uint8_t csrcCount) [member function]
    cls.add_method('SetCsrcCount', 
                   'void', 
                   [param('uint8_t', 'csrcCount')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-rtp-header.h (module 'psc'): void ns3::psc::McpttRtpHeader::SetCsrcs(std::vector<unsigned int, std::allocator<unsigned int> > const csrcs) [member function]
    cls.add_method('SetCsrcs', 
                   'void', 
                   [param('std::vector< unsigned int > const', 'csrcs')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttSdpFmtpHeader_methods(root_module, cls):
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader::McpttSdpFmtpHeader(ns3::psc::McpttSdpFmtpHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttSdpFmtpHeader const &', 'arg0')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::psc::McpttSdpFmtpHeader::McpttSdpFmtpHeader() [constructor]
    cls.add_constructor([])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint32_t ns3::psc::McpttSdpFmtpHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): ns3::TypeId ns3::psc::McpttSdpFmtpHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcGranted() const [member function]
    cls.add_method('GetMcGranted', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcImplicitRequest() const [member function]
    cls.add_method('GetMcImplicitRequest', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint8_t ns3::psc::McpttSdpFmtpHeader::GetMcPriority() const [member function]
    cls.add_method('GetMcPriority', 
                   'uint8_t', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): bool ns3::psc::McpttSdpFmtpHeader::GetMcQueueing() const [member function]
    cls.add_method('GetMcQueueing', 
                   'bool', 
                   [], 
                   is_const=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): uint32_t ns3::psc::McpttSdpFmtpHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): static ns3::TypeId ns3::psc::McpttSdpFmtpHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcGranted(bool mcGranted) [member function]
    cls.add_method('SetMcGranted', 
                   'void', 
                   [param('bool', 'mcGranted')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcImplicitRequest(bool mcImplicitRequest) [member function]
    cls.add_method('SetMcImplicitRequest', 
                   'void', 
                   [param('bool', 'mcImplicitRequest')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcPriority(uint8_t mcPriority) [member function]
    cls.add_method('SetMcPriority', 
                   'void', 
                   [param('uint8_t', 'mcPriority')])
    ## mcptt-sdp-fmtp-header.h (module 'psc'): void ns3::psc::McpttSdpFmtpHeader::SetMcQueueing(bool mcQueueing) [member function]
    cls.add_method('SetMcQueueing', 
                   'void', 
                   [param('bool', 'mcQueueing')])
    return

def register_Ns3PscMcpttServerApp_methods(root_module, cls):
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp::McpttServerApp(ns3::psc::McpttServerApp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerApp const &', 'arg0')])
    ## mcptt-server-app.h (module 'psc'): ns3::psc::McpttServerApp::McpttServerApp() [constructor]
    cls.add_constructor([])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::AddCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('AddCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')])
    ## mcptt-server-app.h (module 'psc'): uint16_t ns3::psc::McpttServerApp::AllocateCallId() [member function]
    cls.add_method('AllocateCallId', 
                   'uint16_t', 
                   [])
    ## mcptt-server-app.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerApp::GetCall(uint16_t callId) [member function]
    cls.add_method('GetCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [param('uint16_t', 'callId')])
    ## mcptt-server-app.h (module 'psc'): ns3::Address ns3::psc::McpttServerApp::GetLocalAddress() const [member function]
    cls.add_method('GetLocalAddress', 
                   'ns3::Address', 
                   [], 
                   is_const=True)
    ## mcptt-server-app.h (module 'psc'): ns3::Ptr<ns3::sip::SipProxy> ns3::psc::McpttServerApp::GetSipProxy() const [member function]
    cls.add_method('GetSipProxy', 
                   'ns3::Ptr< ns3::sip::SipProxy >', 
                   [], 
                   is_const=True)
    ## mcptt-server-app.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerApp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-app.h (module 'psc'): bool ns3::psc::McpttServerApp::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::SendCallControlPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & toAddr) [member function]
    cls.add_method('SendCallControlPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'toAddr')], 
                   is_virtual=True)
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::SetLocalAddress(ns3::Address const & localAddress) [member function]
    cls.add_method('SetLocalAddress', 
                   'void', 
                   [param('ns3::Address const &', 'localAddress')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::TraceMessageReceive(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageReceive', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::TraceMessageSend(uint16_t callId, ns3::Ptr<const ns3::Packet> pkt, ns3::TypeId const & headerType) [member function]
    cls.add_method('TraceMessageSend', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::TypeId const &', 'headerType')])
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-server-app.h (module 'psc'): void ns3::psc::McpttServerApp::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCall_methods(root_module, cls):
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall::McpttServerCall(ns3::psc::McpttServerCall const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCall const &', 'arg0')])
    ## mcptt-server-call.h (module 'psc'): ns3::psc::McpttServerCall::McpttServerCall() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> ns3::psc::McpttServerCall::GetArbitrator() const [member function]
    cls.add_method('GetArbitrator', 
                   'ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): uint16_t ns3::psc::McpttServerCall::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCallMachine> ns3::psc::McpttServerCall::GetCallMachine() const [member function]
    cls.add_method('GetCallMachine', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachine >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): std::vector<unsigned int, std::allocator<unsigned int> > ns3::psc::McpttServerCall::GetClientUserIds() const [member function]
    cls.add_method('GetClientUserIds', 
                   'std::vector< unsigned int >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): uint32_t ns3::psc::McpttServerCall::GetOriginator() const [member function]
    cls.add_method('GetOriginator', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerCall::GetOwner() const [member function]
    cls.add_method('GetOwner', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [], 
                   is_const=True)
    ## mcptt-server-call.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCall::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call.h (module 'psc'): bool ns3::psc::McpttServerCall::IsAmbientListening() const [member function]
    cls.add_method('IsAmbientListening', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): bool ns3::psc::McpttServerCall::IsTemporaryGroup() const [member function]
    cls.add_method('IsTemporaryGroup', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::ReceiveSipEvent(char const * event, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipEvent', 
                   'void', 
                   [param('char const *', 'event'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::ReceiveSipMessage(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('ReceiveSipMessage', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SendCallControlPacket(ns3::Ptr<ns3::Packet> pkt, ns3::Address const & toAddr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendCallControlPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::Address const &', 'toAddr'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetArbitrator(ns3::Ptr<ns3::psc::McpttOnNetworkFloorArbitrator> arbitrator) [member function]
    cls.add_method('SetArbitrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttOnNetworkFloorArbitrator >', 'arbitrator')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetCallMachine(ns3::Ptr<ns3::psc::McpttServerCallMachine> callMachine) [member function]
    cls.add_method('SetCallMachine', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCallMachine >', 'callMachine')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetClientUserIds(std::vector<unsigned int, std::allocator<unsigned int> > clientUserIds) [member function]
    cls.add_method('SetClientUserIds', 
                   'void', 
                   [param('std::vector< unsigned int >', 'clientUserIds')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetOriginator(uint32_t originator) [member function]
    cls.add_method('SetOriginator', 
                   'void', 
                   [param('uint32_t', 'originator')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::SetOwner(ns3::Ptr<ns3::psc::McpttServerApp> owner) [member function]
    cls.add_method('SetOwner', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerApp >', 'owner')])
    ## mcptt-server-call.h (module 'psc'): void ns3::psc::McpttServerCall::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachine_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine::McpttServerCallMachine(ns3::psc::McpttServerCallMachine const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachine const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachine::McpttServerCallMachine() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachine::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachine::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachine::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachine::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachine::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachine::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachine::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachine::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachine::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachine::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedState_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState::McpttServerCallMachineGroupPrearrangedState(ns3::psc::McpttServerCallMachineGroupPrearrangedState const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedState const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedState::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearrangedState::IsCallOngoing(ns3::McpttServerCallMachineGroupPrearranged const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveBye(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveInvite(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedState::ReceiveResponse(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedState::McpttServerCallMachineGroupPrearrangedState() [constructor]
    cls.add_constructor([], 
                        visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS1_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::McpttServerCallMachineGroupPrearrangedStateS1(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::McpttServerCallMachineGroupPrearrangedStateS1() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS1::ReceiveInvite(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS2_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::McpttServerCallMachineGroupPrearrangedStateS2(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::McpttServerCallMachineGroupPrearrangedStateS2() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveBye(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveInvite(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveInvite', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS2::ReceiveResponse(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS3_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::McpttServerCallMachineGroupPrearrangedStateS3(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::McpttServerCallMachineGroupPrearrangedStateS3() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::IsCallOngoing(ns3::McpttServerCallMachineGroupPrearranged const & machine) const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged const &', 'machine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::ReceiveBye(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS3::ReceiveResponse(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearrangedStateS4_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::McpttServerCallMachineGroupPrearrangedStateS4(ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::McpttServerCallMachineGroupPrearrangedStateS4() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4> ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetInstance() [member function]
    cls.add_method('GetInstance', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4 >', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetInstanceStateId() const [member function]
    cls.add_method('GetInstanceStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::GetStateId() [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::ReceiveBye(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveBye', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged-state.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearrangedStateS4::ReceiveResponse(ns3::McpttServerCallMachineGroupPrearranged & machine, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveResponse', 
                   'void', 
                   [param('ns3::McpttServerCallMachineGroupPrearranged &', 'machine'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineGrp_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp::McpttServerCallMachineGrp(ns3::psc::McpttServerCallMachineGrp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGrp const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineGrp::McpttServerCallMachineGrp() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttServerCallMachineGrp::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_pure_virtual=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineGrp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineGrp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGrp::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGrp::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineGrp::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_pure_virtual=True, is_virtual=True)
    return

def register_Ns3PscMcpttServerCallMachineNull_methods(root_module, cls):
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull::McpttServerCallMachineNull(ns3::psc::McpttServerCallMachineNull const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineNull const &', 'arg0')])
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttServerCallMachineNull::McpttServerCallMachineNull() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachineNull::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachineNull::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineNull::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineNull::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineNull::GetNullStateId() [member function]
    cls.add_method('GetNullStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachineNull::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineNull::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineNull::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineNull::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): bool ns3::psc::McpttServerCallMachineNull::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-server-call-machine.h (module 'psc'): void ns3::psc::McpttServerCallMachineNull::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerHelper_methods(root_module, cls):
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper::McpttServerHelper(ns3::psc::McpttServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerHelper const &', 'arg0')])
    ## mcptt-server-helper.h (module 'psc'): ns3::psc::McpttServerHelper::McpttServerHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('Install', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::Install(std::string const & nodeName) [member function]
    cls.add_method('Install', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('std::string const &', 'nodeName')])
    ## mcptt-server-helper.h (module 'psc'): void ns3::psc::McpttServerHelper::SetServerAttributes(std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetServerAttributes', 
                   'void', 
                   [param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    ## mcptt-server-helper.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerApp> ns3::psc::McpttServerHelper::InstallPriv(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('InstallPriv', 
                   'ns3::Ptr< ns3::psc::McpttServerApp >', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   visibility='protected')
    return

def register_Ns3PscMcpttStateMachineStats_methods(root_module, cls):
    ## mcptt-state-machine-stats.h (module 'psc'): static ns3::TypeId ns3::psc::McpttStateMachineStats::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::psc::McpttStateMachineStats::McpttStateMachineStats() [constructor]
    cls.add_constructor([])
    ## mcptt-state-machine-stats.h (module 'psc'): ns3::TypeId ns3::psc::McpttStateMachineStats::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-state-machine-stats.h (module 'psc'): void ns3::psc::McpttStateMachineStats::StateChangeCb(uint32_t userId, uint16_t callId, std::string const & selected, std::string const & typeId, std::string const & oldStateName, std::string const & newStateName) [member function]
    cls.add_method('StateChangeCb', 
                   'void', 
                   [param('uint32_t', 'userId'), param('uint16_t', 'callId'), param('std::string const &', 'selected'), param('std::string const &', 'typeId'), param('std::string const &', 'oldStateName'), param('std::string const &', 'newStateName')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttTimer_methods(root_module, cls):
    cls.add_output_stream_operator()
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer(ns3::psc::McpttTimer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttTimer const &', 'arg0')])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer() [constructor]
    cls.add_constructor([])
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttTimer::McpttTimer(ns3::psc::McpttEntityId const & id) [constructor]
    cls.add_constructor([param('ns3::psc::McpttEntityId const &', 'id')])
    ## mcptt-timer.h (module 'psc'): ns3::Time ns3::psc::McpttTimer::GetDelay() const [member function]
    cls.add_method('GetDelay', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttTimer::GetId() const [member function]
    cls.add_method('GetId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::TypeId ns3::psc::McpttTimer::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::Timer * ns3::psc::McpttTimer::GetRawTimer() const [member function]
    cls.add_method('GetRawTimer', 
                   'ns3::Timer *', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): ns3::Time ns3::psc::McpttTimer::GetTimeLeft() const [member function]
    cls.add_method('GetTimeLeft', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): static ns3::TypeId ns3::psc::McpttTimer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-timer.h (module 'psc'): bool ns3::psc::McpttTimer::IsExpired() const [member function]
    cls.add_method('IsExpired', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): bool ns3::psc::McpttTimer::IsRunning() const [member function]
    cls.add_method('IsRunning', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Restart() [member function]
    cls.add_method('Restart', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetDelay(ns3::Time const & delay) [member function]
    cls.add_method('SetDelay', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetId(ns3::psc::McpttEntityId const & id) [member function]
    cls.add_method('SetId', 
                   'void', 
                   [param('ns3::psc::McpttEntityId const &', 'id')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::SetRawTimer(ns3::Timer * const & rawTimer) [member function]
    cls.add_method('SetRawTimer', 
                   'void', 
                   [param('ns3::Timer * const &', 'rawTimer')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::StartWith(ns3::Time const & delay) [member function]
    cls.add_method('StartWith', 
                   'void', 
                   [param('ns3::Time const &', 'delay')], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-timer.h (module 'psc'): void ns3::psc::McpttTimer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttTraceHelper_methods(root_module, cls):
    ## mcptt-trace-helper.h (module 'psc'): ns3::psc::McpttTraceHelper::McpttTraceHelper() [constructor]
    cls.add_constructor([])
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableMsgTraces() [member function]
    cls.add_method('EnableMsgTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableMsgTraces() [member function]
    cls.add_method('DisableMsgTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableStateMachineTraces() [member function]
    cls.add_method('EnableStateMachineTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableStateMachineTraces() [member function]
    cls.add_method('DisableStateMachineTraces', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableAccessTimeTrace(std::string filename) [member function]
    cls.add_method('EnableAccessTimeTrace', 
                   'void', 
                   [param('std::string', 'filename')], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableAccessTimeTrace() [member function]
    cls.add_method('DisableAccessTimeTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::EnableMouthToEarLatencyTrace(std::string filename) [member function]
    cls.add_method('EnableMouthToEarLatencyTrace', 
                   'void', 
                   [param('std::string', 'filename')], 
                   is_virtual=True)
    ## mcptt-trace-helper.h (module 'psc'): void ns3::psc::McpttTraceHelper::DisableMouthToEarLatencyTrace() [member function]
    cls.add_method('DisableMouthToEarLatencyTrace', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscPscVideoStreaming_methods(root_module, cls):
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming::PscVideoStreaming(ns3::psc::PscVideoStreaming const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscVideoStreaming const &', 'arg0')])
    ## psc-video-streaming.h (module 'psc'): ns3::psc::PscVideoStreaming::PscVideoStreaming() [constructor]
    cls.add_constructor([])
    ## psc-video-streaming.h (module 'psc'): static ns3::TypeId ns3::psc::PscVideoStreaming::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::LoadCdfs() [member function]
    cls.add_method('LoadCdfs', 
                   'void', 
                   [])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::ReadCustomDistribution(std::string sizeCdfFilePath, std::string intervalCdfFilePath) [member function]
    cls.add_method('ReadCustomDistribution', 
                   'void', 
                   [param('std::string', 'sizeCdfFilePath'), param('std::string', 'intervalCdfFilePath')])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::SetReceiver(ns3::Address recvAddress, uint16_t recvPort) [member function]
    cls.add_method('SetReceiver', 
                   'void', 
                   [param('ns3::Address', 'recvAddress'), param('uint16_t', 'recvPort')])
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## psc-video-streaming.h (module 'psc'): void ns3::psc::PscVideoStreaming::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscPscVideoStreamingDistributions_methods(root_module, cls):
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions::PscVideoStreamingDistributions() [constructor]
    cls.add_constructor([])
    ## psc-video-streaming-distributions.h (module 'psc'): ns3::psc::PscVideoStreamingDistributions::PscVideoStreamingDistributions(ns3::psc::PscVideoStreamingDistributions const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::PscVideoStreamingDistributions const &', 'arg0')])
    ## psc-video-streaming-distributions.h (module 'psc'): static std::map<double, double, std::less<double>, std::allocator<std::pair<const double, double> > > ns3::psc::PscVideoStreamingDistributions::GetIntervalDistribution(std::string distributionName) [member function]
    cls.add_method('GetIntervalDistribution', 
                   'std::map< double, double >', 
                   [param('std::string', 'distributionName')], 
                   is_static=True)
    ## psc-video-streaming-distributions.h (module 'psc'): static std::map<double, unsigned int, std::less<double>, std::allocator<std::pair<const double, unsigned int> > > ns3::psc::PscVideoStreamingDistributions::GetSizeDistribution(std::string distributionName) [member function]
    cls.add_method('GetSizeDistribution', 
                   'std::map< double, unsigned int >', 
                   [param('std::string', 'distributionName')], 
                   is_static=True)
    return

def register_Ns3PscUavMobilityEnergyModel_methods(root_module, cls):
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::UavMobilityEnergyModel(ns3::psc::UavMobilityEnergyModel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UavMobilityEnergyModel const &', 'arg0')])
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::UavMobilityEnergyModel() [constructor]
    cls.add_constructor([])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Ascend(double speed) [member function]
    cls.add_method('Ascend', 
                   'void', 
                   [param('double', 'speed')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::ChangeState(int newState) [member function]
    cls.add_method('ChangeState', 
                   'void', 
                   [param('int', 'newState')], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::ConnectMobility(ns3::Ptr<ns3::Node> node) [member function]
    cls.add_method('ConnectMobility', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Descend(double speed) [member function]
    cls.add_method('Descend', 
                   'void', 
                   [param('double', 'speed')])
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetAscendEnergyConversionFactor() const [member function]
    cls.add_method('GetAscendEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetDescendEnergyConversionFactor() const [member function]
    cls.add_method('GetDescendEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): ns3::Ptr<ns3::EnergySource> ns3::psc::UavMobilityEnergyModel::GetEnergySource() const [member function]
    cls.add_method('GetEnergySource', 
                   'ns3::Ptr< ns3::EnergySource >', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetHoverCurrent() const [member function]
    cls.add_method('GetHoverCurrent', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetMoveEnergyConversionFactor() const [member function]
    cls.add_method('GetMoveEnergyConversionFactor', 
                   'double', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): ns3::psc::UavMobilityEnergyModel::State ns3::psc::UavMobilityEnergyModel::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::psc::UavMobilityEnergyModel::State', 
                   [], 
                   is_const=True)
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::GetTotalEnergyConsumption() const [member function]
    cls.add_method('GetTotalEnergyConsumption', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): static ns3::TypeId ns3::psc::UavMobilityEnergyModel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyChanged() [member function]
    cls.add_method('HandleEnergyChanged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyDepletion() [member function]
    cls.add_method('HandleEnergyDepletion', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::HandleEnergyRecharged() [member function]
    cls.add_method('HandleEnergyRecharged', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Hover() [member function]
    cls.add_method('Hover', 
                   'void', 
                   [])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Init(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::EnergySource> energySource) [member function]
    cls.add_method('Init', 
                   'void', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::EnergySource >', 'energySource')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Move(ns3::Vector const & velocity) [member function]
    cls.add_method('Move', 
                   'void', 
                   [param('ns3::Vector const &', 'velocity')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetAscendEnergyConversionFactor(double ascendEnergyConversionFactor) [member function]
    cls.add_method('SetAscendEnergyConversionFactor', 
                   'void', 
                   [param('double', 'ascendEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetDescendEnergyConversionFactor(double descendEnergyConversionFactor) [member function]
    cls.add_method('SetDescendEnergyConversionFactor', 
                   'void', 
                   [param('double', 'descendEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetEnergySource(ns3::Ptr<ns3::EnergySource> source) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_virtual=True)
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetHoverCurrent(double hoverEnergyCurrent) [member function]
    cls.add_method('SetHoverCurrent', 
                   'void', 
                   [param('double', 'hoverEnergyCurrent')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::SetMoveEnergyConversionFactor(double moveEnergyConversionFactor) [member function]
    cls.add_method('SetMoveEnergyConversionFactor', 
                   'void', 
                   [param('double', 'moveEnergyConversionFactor')])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [])
    ## uav-mobility-energy-model.h (module 'psc'): void ns3::psc::UavMobilityEnergyModel::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## uav-mobility-energy-model.h (module 'psc'): double ns3::psc::UavMobilityEnergyModel::DoGetCurrentA() const [member function]
    cls.add_method('DoGetCurrentA', 
                   'double', 
                   [], 
                   is_const=True, is_virtual=True, visibility='private')
    return

def register_Ns3PscUavMobilityEnergyModelHelper_methods(root_module, cls):
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper::UavMobilityEnergyModelHelper(ns3::psc::UavMobilityEnergyModelHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UavMobilityEnergyModelHelper const &', 'arg0')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::psc::UavMobilityEnergyModelHelper::UavMobilityEnergyModelHelper() [constructor]
    cls.add_constructor([])
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::EnergySource> source) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::EnergySource >', 'source')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::NodeContainer & nodes) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NodeContainer &', 'nodes')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): ns3::DeviceEnergyModelContainer ns3::psc::UavMobilityEnergyModelHelper::Install(ns3::NodeContainer & nodes, ns3::EnergySourceContainer & sources) const [member function]
    cls.add_method('Install', 
                   'ns3::DeviceEnergyModelContainer', 
                   [param('ns3::NodeContainer &', 'nodes'), param('ns3::EnergySourceContainer &', 'sources')], 
                   is_const=True)
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::Set(std::string const & name, ns3::AttributeValue const & v) [member function]
    cls.add_method('Set', 
                   'void', 
                   [param('std::string const &', 'name'), param('ns3::AttributeValue const &', 'v')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::SetEnergySource(std::string name, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetEnergySource', 
                   'void', 
                   [param('std::string', 'name'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    ## uav-mobility-energy-model-helper.h (module 'psc'): void ns3::psc::UavMobilityEnergyModelHelper::SetMobilityModel(std::string name, std::string n0="", ns3::AttributeValue const & v0=ns3::EmptyAttributeValue(), std::string n1="", ns3::AttributeValue const & v1=ns3::EmptyAttributeValue(), std::string n2="", ns3::AttributeValue const & v2=ns3::EmptyAttributeValue(), std::string n3="", ns3::AttributeValue const & v3=ns3::EmptyAttributeValue(), std::string n4="", ns3::AttributeValue const & v4=ns3::EmptyAttributeValue(), std::string n5="", ns3::AttributeValue const & v5=ns3::EmptyAttributeValue(), std::string n6="", ns3::AttributeValue const & v6=ns3::EmptyAttributeValue(), std::string n7="", ns3::AttributeValue const & v7=ns3::EmptyAttributeValue()) [member function]
    cls.add_method('SetMobilityModel', 
                   'void', 
                   [param('std::string', 'name'), param('std::string', 'n0', default_value='""'), param('ns3::AttributeValue const &', 'v0', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n1', default_value='""'), param('ns3::AttributeValue const &', 'v1', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n2', default_value='""'), param('ns3::AttributeValue const &', 'v2', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n3', default_value='""'), param('ns3::AttributeValue const &', 'v3', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n4', default_value='""'), param('ns3::AttributeValue const &', 'v4', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n5', default_value='""'), param('ns3::AttributeValue const &', 'v5', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n6', default_value='""'), param('ns3::AttributeValue const &', 'v6', default_value='ns3::EmptyAttributeValue()'), param('std::string', 'n7', default_value='""'), param('ns3::AttributeValue const &', 'v7', default_value='ns3::EmptyAttributeValue()')])
    return

def register_Ns3PscUdpGroupEchoClient_methods(root_module, cls):
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::UdpGroupEchoClient() [constructor]
    cls.add_constructor([])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::UdpGroupEchoClient(ns3::psc::UdpGroupEchoClient const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoClient const &', 'arg0')])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_address [variable]
    cls.add_instance_attribute('m_address', 'ns3::Address', is_const=False)
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_echo_address [variable]
    cls.add_instance_attribute('m_echo_address', 'ns3::Address', is_const=False)
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoClient::m_timestamp [variable]
    cls.add_instance_attribute('m_timestamp', 'ns3::Time', is_const=False)
    return

def register_Ns3PscUdpGroupEchoServer_methods(root_module, cls):
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::UdpGroupEchoServer(ns3::psc::UdpGroupEchoServer const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoServer const &', 'arg0')])
    ## udp-group-echo-server.h (module 'psc'): ns3::psc::UdpGroupEchoServer::UdpGroupEchoServer() [constructor]
    cls.add_constructor([])
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::AddClient(ns3::Address const & client) [member function]
    cls.add_method('AddClient', 
                   'void', 
                   [param('ns3::Address const &', 'client')], 
                   is_virtual=True)
    ## udp-group-echo-server.h (module 'psc'): static ns3::TypeId ns3::psc::UdpGroupEchoServer::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::StartApplication() [member function]
    cls.add_method('StartApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    ## udp-group-echo-server.h (module 'psc'): void ns3::psc::UdpGroupEchoServer::StopApplication() [member function]
    cls.add_method('StopApplication', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='private')
    return

def register_Ns3PscUdpGroupEchoServerHelper_methods(root_module, cls):
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(ns3::psc::UdpGroupEchoServerHelper const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::UdpGroupEchoServerHelper const &', 'arg0')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port) [constructor]
    cls.add_constructor([param('uint16_t', 'port')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port, ns3::Time expirationTime) [constructor]
    cls.add_constructor([param('uint16_t', 'port'), param('ns3::Time', 'expirationTime')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::psc::UdpGroupEchoServerHelper::UdpGroupEchoServerHelper(uint16_t port, ns3::Time expirationTime, ns3::psc::UdpGroupEchoServer::Mode_t mode, bool echoClient) [constructor]
    cls.add_constructor([param('uint16_t', 'port'), param('ns3::Time', 'expirationTime'), param('ns3::psc::UdpGroupEchoServer::Mode_t', 'mode'), param('bool', 'echoClient')])
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(ns3::Ptr<ns3::Node> node) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::Ptr< ns3::Node >', 'node')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(std::string nodeName) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('std::string', 'nodeName')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): ns3::ApplicationContainer ns3::psc::UdpGroupEchoServerHelper::Install(ns3::NodeContainer c) const [member function]
    cls.add_method('Install', 
                   'ns3::ApplicationContainer', 
                   [param('ns3::NodeContainer', 'c')], 
                   is_const=True)
    ## udp-group-echo-helper.h (module 'psc'): void ns3::psc::UdpGroupEchoServerHelper::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
    cls.add_method('SetAttribute', 
                   'void', 
                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
    return

def register_Ns3PscMcpttCallMsg_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg(ns3::psc::McpttCallMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsg const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsg::McpttCallMsg(ns3::psc::McpttCallMsgFieldMsgType const & msgType) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldMsgType const &', 'msgType')])
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldMsgType ns3::psc::McpttCallMsg::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'ns3::psc::McpttCallMsgFieldMsgType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::SetMsgType(ns3::psc::McpttCallMsgFieldMsgType const & msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldMsgType const &', 'msgType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsg::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsg::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldGrpId_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId(ns3::psc::McpttCallMsgFieldGrpId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldGrpId const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId::McpttCallMsgFieldGrpId(uint32_t grpId) [constructor]
    cls.add_constructor([param('uint32_t', 'grpId')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldGrpId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldGrpId::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldGrpId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldGrpId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldGrpId::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgFieldOrgName_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName(ns3::psc::McpttCallMsgFieldOrgName const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldOrgName const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName::McpttCallMsgFieldOrgName(std::string const & name) [constructor]
    cls.add_constructor([param('std::string const &', 'name')])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldOrgName::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldOrgName::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): std::string ns3::psc::McpttCallMsgFieldOrgName::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldOrgName::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldOrgName::UpdateName(std::string const & orgName) [member function]
    cls.add_method('UpdateName', 
                   'void', 
                   [param('std::string const &', 'orgName')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgFieldSdp_methods(root_module, cls):
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp::McpttCallMsgFieldSdp(ns3::psc::McpttCallMsgFieldSdp const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgFieldSdp const &', 'arg0')])
    ## mcptt-call-msg-field.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp::McpttCallMsgFieldSdp() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgFieldSdp::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::FromStr(std::string const & strRep) [member function]
    cls.add_method('FromStr', 
                   'void', 
                   [param('std::string const &', 'strRep')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldSdp::GetFloorPort() const [member function]
    cls.add_method('GetFloorPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Address ns3::psc::McpttCallMsgFieldSdp::GetGrpAddr() const [member function]
    cls.add_method('GetGrpAddr', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgFieldSdp::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): ns3::Address ns3::psc::McpttCallMsgFieldSdp::GetOrigAddr() const [member function]
    cls.add_method('GetOrigAddr', 
                   'ns3::Address', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): uint16_t ns3::psc::McpttCallMsgFieldSdp::GetSpeechPort() const [member function]
    cls.add_method('GetSpeechPort', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgFieldSdp::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetFloorPort(uint16_t floorPort) [member function]
    cls.add_method('SetFloorPort', 
                   'void', 
                   [param('uint16_t', 'floorPort')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetGrpAddr(ns3::Address const & grpAddr) [member function]
    cls.add_method('SetGrpAddr', 
                   'void', 
                   [param('ns3::Address const &', 'grpAddr')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetOrigAddr(ns3::Address const & origAddr) [member function]
    cls.add_method('SetOrigAddr', 
                   'void', 
                   [param('ns3::Address const &', 'origAddr')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::SetSpeechPort(uint16_t speechPort) [member function]
    cls.add_method('SetSpeechPort', 
                   'void', 
                   [param('uint16_t', 'speechPort')], 
                   is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): std::string ns3::psc::McpttCallMsgFieldSdp::ToStr() const [member function]
    cls.add_method('ToStr', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg-field.h (module 'psc'): void ns3::psc::McpttCallMsgFieldSdp::UpdateLength() [member function]
    cls.add_method('UpdateLength', 
                   'void', 
                   [], 
                   is_virtual=True)
    return

def register_Ns3PscMcpttCallMsgGrpAccept_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::McpttCallMsgGrpAccept(ns3::psc::McpttCallMsgGrpAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpAccept const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::McpttCallMsgGrpAccept() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpAccept::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpAccept::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpAccept::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAccept::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAccept::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAccept::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAccept::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpAnnoun_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::McpttCallMsgGrpAnnoun(ns3::psc::McpttCallMsgGrpAnnoun const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpAnnoun const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::McpttCallMsgGrpAnnoun() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpAnnoun::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpAnnoun::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::GetConfirmMode() const [member function]
    cls.add_method('GetConfirmMode', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpAnnoun::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpAnnoun::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpAnnoun::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAnnoun::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpAnnoun::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::GetProbeResp() const [member function]
    cls.add_method('GetProbeResp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldRefreshInterval ns3::psc::McpttCallMsgGrpAnnoun::GetRefInt() const [member function]
    cls.add_method('GetRefInt', 
                   'ns3::psc::McpttCallMsgFieldRefreshInterval', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgGrpAnnoun::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAnnoun::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldStartTime ns3::psc::McpttCallMsgGrpAnnoun::GetStartTime() const [member function]
    cls.add_method('GetStartTime', 
                   'ns3::psc::McpttCallMsgFieldStartTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpAnnoun::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::IsConfirmModeIndicated() const [member function]
    cls.add_method('IsConfirmModeIndicated', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): bool ns3::psc::McpttCallMsgGrpAnnoun::IsProbeResp() const [member function]
    cls.add_method('IsProbeResp', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetConfirmMode(bool const & confirmMode) [member function]
    cls.add_method('SetConfirmMode', 
                   'void', 
                   [param('bool const &', 'confirmMode')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetProbeResp(bool const & probeResp) [member function]
    cls.add_method('SetProbeResp', 
                   'void', 
                   [param('bool const &', 'probeResp')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetRefInt(ns3::psc::McpttCallMsgFieldRefreshInterval const & refInt) [member function]
    cls.add_method('SetRefInt', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldRefreshInterval const &', 'refInt')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::SetStartTime(ns3::psc::McpttCallMsgFieldStartTime const & startTime) [member function]
    cls.add_method('SetStartTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldStartTime const &', 'startTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpAnnoun::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpAnnoun::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpAnnoun::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpBroadcast_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::McpttCallMsgGrpBroadcast(ns3::psc::McpttCallMsgGrpBroadcast const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpBroadcast const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::McpttCallMsgGrpBroadcast() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpBroadcast::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgGrpBroadcast::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpBroadcast::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcast::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpBroadcast::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgGrpBroadcast::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcast::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcast::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callType) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callType')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcast::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcast::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcast::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpBroadcastEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::McpttCallMsgGrpBroadcastEnd(ns3::psc::McpttCallMsgGrpBroadcastEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpBroadcastEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::McpttCallMsgGrpBroadcastEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcastEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpBroadcastEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origUserId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::Visit(ns3::psc::McpttCallMachineGrpBroadcast & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBroadcast &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpBroadcastEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpBroadcastEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpBroadcastEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlert_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::McpttCallMsgGrpEmergAlert(ns3::psc::McpttCallMsgGrpEmergAlert const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlert const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::McpttCallMsgGrpEmergAlert() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlert::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlert::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldOrgName ns3::psc::McpttCallMsgGrpEmergAlert::GetOrgName() const [member function]
    cls.add_method('GetOrgName', 
                   'ns3::psc::McpttCallMsgFieldOrgName', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlert::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlert::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlert::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc ns3::psc::McpttCallMsgGrpEmergAlert::GetUserLoc() const [member function]
    cls.add_method('GetUserLoc', 
                   'ns3::psc::McpttCallMsgFieldUserLoc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetOrgName(ns3::psc::McpttCallMsgFieldOrgName const & orgName) [member function]
    cls.add_method('SetOrgName', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldOrgName const &', 'orgName')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::SetUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & userLoc) [member function]
    cls.add_method('SetUserLoc', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'userLoc')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlert::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlert::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlert::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::McpttCallMsgGrpEmergAlertAck(ns3::psc::McpttCallMsgGrpEmergAlertAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::McpttCallMsgGrpEmergAlertAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertCancel_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::McpttCallMsgGrpEmergAlertCancel(ns3::psc::McpttCallMsgGrpEmergAlertCancel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertCancel const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::McpttCallMsgGrpEmergAlertCancel() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancel::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancel::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancel::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergAlertCancelAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::McpttCallMsgGrpEmergAlertCancelAck(ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergAlertCancelAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::McpttCallMsgGrpEmergAlertCancelAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetOrigId() const [member function]
    cls.add_method('GetOrigId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetSendingId() const [member function]
    cls.add_method('GetSendingId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetOrigId(ns3::psc::McpttCallMsgFieldUserId const & origId) [member function]
    cls.add_method('SetOrigId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'origId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::SetSendingId(ns3::psc::McpttCallMsgFieldUserId const & sendingId) [member function]
    cls.add_method('SetSendingId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'sendingId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergAlertCancelAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpEmergEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::McpttCallMsgGrpEmergEnd(ns3::psc::McpttCallMsgGrpEmergEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpEmergEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::McpttCallMsgGrpEmergEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpEmergEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpEmergEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpEmergEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpEmergEnd::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergEnd::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpEmergEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpEmergEnd::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpEmergEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpEmergEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpEmergEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpImmPerilEnd_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::McpttCallMsgGrpImmPerilEnd(ns3::psc::McpttCallMsgGrpImmPerilEnd const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpImmPerilEnd const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::McpttCallMsgGrpImmPerilEnd() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldLastChgTime ns3::psc::McpttCallMsgGrpImmPerilEnd::GetLastChgTime() const [member function]
    cls.add_method('GetLastChgTime', 
                   'ns3::psc::McpttCallMsgFieldLastChgTime', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetLastChgUserId() const [member function]
    cls.add_method('GetLastChgUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpImmPerilEnd::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgGrpImmPerilEnd::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetLastChgTime(ns3::psc::McpttCallMsgFieldLastChgTime const & lastChgTime) [member function]
    cls.add_method('SetLastChgTime', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldLastChgTime const &', 'lastChgTime')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetLastChgUserId(ns3::psc::McpttCallMsgFieldUserId const & lastChgUserId) [member function]
    cls.add_method('SetLastChgUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'lastChgUserId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::SetUserId(ns3::psc::McpttCallMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpImmPerilEnd::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpImmPerilEnd::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpImmPerilEnd::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgGrpProbe_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::McpttCallMsgGrpProbe(ns3::psc::McpttCallMsgGrpProbe const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgGrpProbe const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::McpttCallMsgGrpProbe() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttCallMsgGrpProbe::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgGrpProbe::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpProbe::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgGrpProbe::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::SetGrpId(ns3::psc::McpttCallMsgFieldGrpId const & grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldGrpId const &', 'grpId')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::Visit(ns3::psc::McpttCallMachineGrpBasic & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachineGrpBasic &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgGrpProbe::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgGrpProbe::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgGrpProbe::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateAccept_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::McpttCallMsgPrivateAccept(ns3::psc::McpttCallMsgPrivateAccept const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateAccept const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::McpttCallMsgPrivateAccept() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateAccept::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAccept::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAccept::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateAccept::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgPrivateAccept::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAccept::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateAccept::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAccept::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAccept::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAccept::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateAcceptAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::McpttCallMsgPrivateAcceptAck(ns3::psc::McpttCallMsgPrivateAcceptAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateAcceptAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::McpttCallMsgPrivateAcceptAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateAcceptAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateAcceptAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAcceptAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateAcceptAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateAcceptAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateAcceptAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateAcceptAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateEmergCancel_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::McpttCallMsgPrivateEmergCancel(ns3::psc::McpttCallMsgPrivateEmergCancel const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateEmergCancel const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::McpttCallMsgPrivateEmergCancel() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancel::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancel::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancel::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancel::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancel::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancel::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancel::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateEmergCancelAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::McpttCallMsgPrivateEmergCancelAck(ns3::psc::McpttCallMsgPrivateEmergCancelAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateEmergCancelAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::McpttCallMsgPrivateEmergCancelAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateEmergCancelAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateEmergCancelAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateEmergCancelAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateEmergCancelAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateReject_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::McpttCallMsgPrivateReject(ns3::psc::McpttCallMsgPrivateReject const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateReject const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::McpttCallMsgPrivateReject() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateReject::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReject::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReject::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateReject::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldReason ns3::psc::McpttCallMsgPrivateReject::GetReason() const [member function]
    cls.add_method('GetReason', 
                   'ns3::psc::McpttCallMsgFieldReason', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReject::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateReject::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::SetReason(ns3::psc::McpttCallMsgFieldReason const & reasonField) [member function]
    cls.add_method('SetReason', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldReason const &', 'reasonField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReject::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReject::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReject::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateRelease_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::McpttCallMsgPrivateRelease(ns3::psc::McpttCallMsgPrivateRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateRelease const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::McpttCallMsgPrivateRelease() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateRelease::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRelease::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRelease::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateRelease::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRelease::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateRelease::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRelease::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRelease::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRelease::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateReleaseAck_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::McpttCallMsgPrivateReleaseAck(ns3::psc::McpttCallMsgPrivateReleaseAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateReleaseAck const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::McpttCallMsgPrivateReleaseAck() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateReleaseAck::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateReleaseAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReleaseAck::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateReleaseAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateReleaseAck::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateReleaseAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateReleaseAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateRinging_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::McpttCallMsgPrivateRinging(ns3::psc::McpttCallMsgPrivateRinging const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateRinging const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::McpttCallMsgPrivateRinging() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateRinging::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRinging::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateRinging::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateRinging::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRinging::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateRinging::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateRinging::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateRinging::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateRinging::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttCallMsgPrivateSetupReq_methods(root_module, cls):
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::McpttCallMsgPrivateSetupReq(ns3::psc::McpttCallMsgPrivateSetupReq const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttCallMsgPrivateSetupReq const &', 'arg0')])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::McpttCallMsgPrivateSetupReq() [constructor]
    cls.add_constructor([])
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttCallMsgPrivateSetupReq::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttCallMsgPrivateSetupReq::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateSetupReq::GetCalleeId() const [member function]
    cls.add_method('GetCalleeId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserId ns3::psc::McpttCallMsgPrivateSetupReq::GetCallerId() const [member function]
    cls.add_method('GetCallerId', 
                   'ns3::psc::McpttCallMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldCommMode ns3::psc::McpttCallMsgPrivateSetupReq::GetCommMode() const [member function]
    cls.add_method('GetCommMode', 
                   'ns3::psc::McpttCallMsgFieldCommMode', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttCallMsgPrivateSetupReq::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldSdp ns3::psc::McpttCallMsgPrivateSetupReq::GetSdp() const [member function]
    cls.add_method('GetSdp', 
                   'ns3::psc::McpttCallMsgFieldSdp', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateSetupReq::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttCallMsgPrivateSetupReq::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgFieldUserLoc ns3::psc::McpttCallMsgPrivateSetupReq::GetUserLoc() const [member function]
    cls.add_method('GetUserLoc', 
                   'ns3::psc::McpttCallMsgFieldUserLoc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callIdField) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallType(ns3::psc::McpttCallMsgFieldCallType const & callTypeField) [member function]
    cls.add_method('SetCallType', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallType const &', 'callTypeField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCalleeId(ns3::psc::McpttCallMsgFieldUserId const & calleeIdField) [member function]
    cls.add_method('SetCalleeId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'calleeIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCallerId(ns3::psc::McpttCallMsgFieldUserId const & callerIdField) [member function]
    cls.add_method('SetCallerId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserId const &', 'callerIdField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetCommMode(ns3::psc::McpttCallMsgFieldCommMode const & commModeField) [member function]
    cls.add_method('SetCommMode', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCommMode const &', 'commModeField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetSdp(ns3::psc::McpttCallMsgFieldSdp const & sdpField) [member function]
    cls.add_method('SetSdp', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldSdp const &', 'sdpField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::SetUserLoc(ns3::psc::McpttCallMsgFieldUserLoc const & userLocField) [member function]
    cls.add_method('SetUserLoc', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldUserLoc const &', 'userLocField')], 
                   is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-call-msg.h (module 'psc'): ns3::psc::McpttCallMsgPrivateSetupReq::CODE [variable]
    cls.add_static_attribute('CODE', 'uint8_t const', is_const=True)
    ## mcptt-call-msg.h (module 'psc'): uint32_t ns3::psc::McpttCallMsgPrivateSetupReq::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-call-msg.h (module 'psc'): void ns3::psc::McpttCallMsgPrivateSetupReq::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsg_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(ns3::psc::McpttFloorMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsg const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(uint8_t subtype, uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint8_t', 'subtype'), param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsg::McpttFloorMsg(std::string const & name, uint8_t payloadType, uint8_t subtype, uint32_t ssrc) [constructor]
    cls.add_constructor([param('std::string const &', 'name'), param('uint8_t', 'payloadType'), param('uint8_t', 'subtype'), param('uint32_t', 'ssrc')])
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint16_t ns3::psc::McpttFloorMsg::GetLength() const [member function]
    cls.add_method('GetLength', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): std::string ns3::psc::McpttFloorMsg::GetName() const [member function]
    cls.add_method('GetName', 
                   'std::string', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetPadding() const [member function]
    cls.add_method('GetPadding', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetPayloadType() const [member function]
    cls.add_method('GetPayloadType', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetSubtype() const [member function]
    cls.add_method('GetSubtype', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): uint8_t ns3::psc::McpttFloorMsg::GetVersion() const [member function]
    cls.add_method('GetVersion', 
                   'uint8_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetLength(uint16_t length) [member function]
    cls.add_method('SetLength', 
                   'void', 
                   [param('uint16_t', 'length')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetName(std::string const & name) [member function]
    cls.add_method('SetName', 
                   'void', 
                   [param('std::string const &', 'name')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetPadding(uint8_t paddingBit) [member function]
    cls.add_method('SetPadding', 
                   'void', 
                   [param('uint8_t', 'paddingBit')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetPayloadType(uint8_t payloadType) [member function]
    cls.add_method('SetPayloadType', 
                   'void', 
                   [param('uint8_t', 'payloadType')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetSsrc(uint32_t ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetSubtype(uint8_t subtype) [member function]
    cls.add_method('SetSubtype', 
                   'void', 
                   [param('uint8_t', 'subtype')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::SetVersion(uint8_t version) [member function]
    cls.add_method('SetVersion', 
                   'void', 
                   [param('uint8_t', 'version')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsg::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::UpdateLength(ns3::psc::McpttFloorMsgField const & currField, ns3::psc::McpttFloorMsgField const & newField) [member function]
    cls.add_method('UpdateLength', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgField const &', 'currField'), param('ns3::psc::McpttFloorMsgField const &', 'newField')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsg::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgAck_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::McpttFloorMsgAck(ns3::psc::McpttFloorMsgAck const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgAck const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::McpttFloorMsgAck(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgAck::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldType ns3::psc::McpttFloorMsgAck::GetMsgType() const [member function]
    cls.add_method('GetMsgType', 
                   'ns3::psc::McpttFloorMsgFieldType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSource ns3::psc::McpttFloorMsgAck::GetSource() const [member function]
    cls.add_method('GetSource', 
                   'ns3::psc::McpttFloorMsgFieldSource', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgAck::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgAck::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgAck::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetMsgType(ns3::psc::McpttFloorMsgFieldType const & msgType) [member function]
    cls.add_method('SetMsgType', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldType const &', 'msgType')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetSource(ns3::psc::McpttFloorMsgFieldSource const & source) [member function]
    cls.add_method('SetSource', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSource const &', 'source')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgAck::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgAck::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgDeny_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::McpttFloorMsgDeny(ns3::psc::McpttFloorMsgDeny const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgDeny const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::McpttFloorMsgDeny(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgDeny::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgDeny::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause ns3::psc::McpttFloorMsgDeny::GetRejCause() const [member function]
    cls.add_method('GetRejCause', 
                   'ns3::psc::McpttFloorMsgFieldRejectCause', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgDeny::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgDeny::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgDeny::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgDeny::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetRejCause(ns3::psc::McpttFloorMsgFieldRejectCause const & rejCause) [member function]
    cls.add_method('SetRejCause', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'rejCause')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgDeny::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgDeny::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgFieldQueuedUserId_methods(root_module, cls):
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'arg0')])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId() [constructor]
    cls.add_constructor([])
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId::McpttFloorMsgFieldQueuedUserId(uint32_t userId) [constructor]
    cls.add_constructor([param('uint32_t', 'userId')])
    ## mcptt-floor-msg-field.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgFieldQueuedUserId::Deserialize(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuedUserId::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgFieldQueuedUserId::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuedUserId::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg-field.h (module 'psc'): void ns3::psc::McpttFloorMsgFieldQueuedUserId::Serialize(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttFloorMsgGranted_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::McpttFloorMsgGranted(ns3::psc::McpttFloorMsgGranted const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgGranted const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::McpttFloorMsgGranted(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::AddUserInfo(ns3::psc::McpttQueuedUserInfo const & userInfo) [member function]
    cls.add_method('AddUserInfo', 
                   'void', 
                   [param('ns3::psc::McpttQueuedUserInfo const &', 'userInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::ClearUserInfo() [member function]
    cls.add_method('ClearUserInfo', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldDuration ns3::psc::McpttFloorMsgGranted::GetDuration() const [member function]
    cls.add_method('GetDuration', 
                   'ns3::psc::McpttFloorMsgFieldDuration', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSsrc ns3::psc::McpttFloorMsgGranted::GetGrantedSsrc() const [member function]
    cls.add_method('GetGrantedSsrc', 
                   'ns3::psc::McpttFloorMsgFieldSsrc', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgGranted::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgGranted::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority ns3::psc::McpttFloorMsgGranted::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'ns3::psc::McpttFloorMsgFieldPriority', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueueSize ns3::psc::McpttFloorMsgGranted::GetQueueSize() const [member function]
    cls.add_method('GetQueueSize', 
                   'ns3::psc::McpttFloorMsgFieldQueueSize', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgGranted::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgGranted::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgGranted::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > ns3::psc::McpttFloorMsgGranted::GetUsers() const [member function]
    cls.add_method('GetUsers', 
                   'std::list< ns3::psc::McpttQueuedUserInfo >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgGranted::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetDuration(ns3::psc::McpttFloorMsgFieldDuration const & duration) [member function]
    cls.add_method('SetDuration', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldDuration const &', 'duration')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetGrantedSsrc(ns3::psc::McpttFloorMsgFieldSsrc grantedSsrc) [member function]
    cls.add_method('SetGrantedSsrc', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSsrc', 'grantedSsrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetPriority(ns3::psc::McpttFloorMsgFieldPriority const & priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPriority const &', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > const & users) [member function]
    cls.add_method('SetUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::UpdateUsers(std::list<ns3::psc::McpttQueuedUserInfo, std::allocator<ns3::psc::McpttQueuedUserInfo> > const & users) [member function]
    cls.add_method('UpdateUsers', 
                   'void', 
                   [param('std::list< ns3::psc::McpttQueuedUserInfo > const &', 'users')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgGranted::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetQueueSize(ns3::psc::McpttFloorMsgFieldQueueSize const & queueSize) [member function]
    cls.add_method('SetQueueSize', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueueSize const &', 'queueSize')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgGranted::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgIdle_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::McpttFloorMsgIdle(ns3::psc::McpttFloorMsgIdle const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgIdle const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::McpttFloorMsgIdle(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgIdle::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgIdle::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum ns3::psc::McpttFloorMsgIdle::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'ns3::psc::McpttFloorMsgFieldSeqNum', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgIdle::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgIdle::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgIdle::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgIdle::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgIdle::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgQueuePositionInfo_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::McpttFloorMsgQueuePositionInfo(ns3::psc::McpttFloorMsgQueuePositionInfo const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgQueuePositionInfo const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::McpttFloorMsgQueuePositionInfo(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgQueuePositionInfo::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionInfo::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuePositionInfo ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuePositionInfo() const [member function]
    cls.add_method('GetQueuePositionInfo', 
                   'ns3::psc::McpttFloorMsgFieldQueuePositionInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuedSsrc() const [member function]
    cls.add_method('GetQueuedSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldQueuedUserId ns3::psc::McpttFloorMsgQueuePositionInfo::GetQueuedUserId() const [member function]
    cls.add_method('GetQueuedUserId', 
                   'ns3::psc::McpttFloorMsgFieldQueuedUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgQueuePositionInfo::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionInfo::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgQueuePositionInfo::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionInfo::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuePositionInfo(ns3::psc::McpttFloorMsgFieldQueuePositionInfo const & queueInfo) [member function]
    cls.add_method('SetQueuePositionInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuePositionInfo const &', 'queueInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuedSsrc(uint32_t queuedSsrc) [member function]
    cls.add_method('SetQueuedSsrc', 
                   'void', 
                   [param('uint32_t', 'queuedSsrc')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetQueuedUserId(ns3::psc::McpttFloorMsgFieldQueuedUserId const & queuedUserId) [member function]
    cls.add_method('SetQueuedUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldQueuedUserId const &', 'queuedUserId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionInfo::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionInfo::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgQueuePositionRequest_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::McpttFloorMsgQueuePositionRequest(ns3::psc::McpttFloorMsgQueuePositionRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgQueuePositionRequest const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::McpttFloorMsgQueuePositionRequest(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgQueuePositionRequest::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgQueuePositionRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgQueuePositionRequest::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgQueuePositionRequest::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgQueuePositionRequest::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgQueuePositionRequest::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRelease_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::McpttFloorMsgRelease(ns3::psc::McpttFloorMsgRelease const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRelease const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::McpttFloorMsgRelease(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRelease::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRelease::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRelease::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRelease::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgRelease::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRelease::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRelease::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRelease::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRequest_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::McpttFloorMsgRequest(ns3::psc::McpttFloorMsgRequest const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRequest const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::McpttFloorMsgRequest(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRequest::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRequest::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPriority ns3::psc::McpttFloorMsgRequest::GetPriority() const [member function]
    cls.add_method('GetPriority', 
                   'ns3::psc::McpttFloorMsgFieldPriority', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRequest::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRequest::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgRequest::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRequest::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetPriority(ns3::psc::McpttFloorMsgFieldPriority const & priority) [member function]
    cls.add_method('SetPriority', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPriority const &', 'priority')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRequest::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRequest::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgRevoke_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::McpttFloorMsgRevoke(ns3::psc::McpttFloorMsgRevoke const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgRevoke const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::McpttFloorMsgRevoke(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgRevoke::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgRevoke::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldRejectCause ns3::psc::McpttFloorMsgRevoke::GetRejCause() const [member function]
    cls.add_method('GetRejCause', 
                   'ns3::psc::McpttFloorMsgFieldRejectCause', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgRevoke::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgRevoke::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgRevoke::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetRejCause(ns3::psc::McpttFloorMsgFieldRejectCause const & rejCause) [member function]
    cls.add_method('SetRejCause', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldRejectCause const &', 'rejCause')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgRevoke::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgRevoke::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttFloorMsgTaken_methods(root_module, cls):
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::McpttFloorMsgTaken(ns3::psc::McpttFloorMsgTaken const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttFloorMsgTaken const &', 'arg0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::McpttFloorMsgTaken(uint32_t ssrc=0) [constructor]
    cls.add_constructor([param('uint32_t', 'ssrc', default_value='0')])
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldIndic ns3::psc::McpttFloorMsgTaken::GetIndicator() const [member function]
    cls.add_method('GetIndicator', 
                   'ns3::psc::McpttFloorMsgFieldIndic', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttFloorMsgTaken::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldGrantedPartyId ns3::psc::McpttFloorMsgTaken::GetPartyId() const [member function]
    cls.add_method('GetPartyId', 
                   'ns3::psc::McpttFloorMsgFieldGrantedPartyId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldPermToReq ns3::psc::McpttFloorMsgTaken::GetPermission() const [member function]
    cls.add_method('GetPermission', 
                   'ns3::psc::McpttFloorMsgFieldPermToReq', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldSeqNum ns3::psc::McpttFloorMsgTaken::GetSeqNum() const [member function]
    cls.add_method('GetSeqNum', 
                   'ns3::psc::McpttFloorMsgFieldSeqNum', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldTrackInfo ns3::psc::McpttFloorMsgTaken::GetTrackInfo() const [member function]
    cls.add_method('GetTrackInfo', 
                   'ns3::psc::McpttFloorMsgFieldTrackInfo', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttFloorMsgTaken::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgFieldUserId ns3::psc::McpttFloorMsgTaken::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'ns3::psc::McpttFloorMsgFieldUserId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): uint32_t ns3::psc::McpttFloorMsgTaken::ReadData(ns3::Buffer::Iterator & buff) [member function]
    cls.add_method('ReadData', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetIndicator(ns3::psc::McpttFloorMsgFieldIndic const & indicator) [member function]
    cls.add_method('SetIndicator', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldIndic const &', 'indicator')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetPartyId(ns3::psc::McpttFloorMsgFieldGrantedPartyId const & partyId) [member function]
    cls.add_method('SetPartyId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldGrantedPartyId const &', 'partyId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetPermission(ns3::psc::McpttFloorMsgFieldPermToReq const & permission) [member function]
    cls.add_method('SetPermission', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldPermToReq const &', 'permission')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetSeqNum(ns3::psc::McpttFloorMsgFieldSeqNum const & seqNum) [member function]
    cls.add_method('SetSeqNum', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldSeqNum const &', 'seqNum')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetUserId(ns3::psc::McpttFloorMsgFieldUserId const & userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldUserId const &', 'userId')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::UpdateTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('UpdateTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::Visit(ns3::psc::McpttFloorMsgSink & floorMsgSink) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMsgSink')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::WriteData(ns3::Buffer::Iterator & buff) const [member function]
    cls.add_method('WriteData', 
                   'void', 
                   [param('ns3::Buffer::Iterator &', 'buff')], 
                   is_const=True, is_virtual=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::SUBTYPE [variable]
    cls.add_static_attribute('SUBTYPE', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): ns3::psc::McpttFloorMsgTaken::SUBTYPE_ACK [variable]
    cls.add_static_attribute('SUBTYPE_ACK', 'uint8_t const', is_const=True)
    ## mcptt-floor-msg.h (module 'psc'): void ns3::psc::McpttFloorMsgTaken::SetTrackInfo(ns3::psc::McpttFloorMsgFieldTrackInfo const & trackInfo) [member function]
    cls.add_method('SetTrackInfo', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgFieldTrackInfo const &', 'trackInfo')], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttMediaMsg_methods(root_module, cls):
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttMediaMsg const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttMediaMsg const &', 'arg0')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg() [constructor]
    cls.add_constructor([])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(uint16_t payloadSize) [constructor]
    cls.add_constructor([param('uint16_t', 'payloadSize')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header, uint16_t payloadSize) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header'), param('uint16_t', 'payloadSize')])
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttMediaMsg::McpttMediaMsg(ns3::psc::McpttRtpHeader const & header, uint16_t payloadSize, ns3::Time talkSpurtStart) [constructor]
    cls.add_constructor([param('ns3::psc::McpttRtpHeader const &', 'header'), param('uint16_t', 'payloadSize'), param('ns3::Time', 'talkSpurtStart')])
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::psc::McpttRtpHeader ns3::psc::McpttMediaMsg::GetHeader() const [member function]
    cls.add_method('GetHeader', 
                   'ns3::psc::McpttRtpHeader', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::TypeId ns3::psc::McpttMediaMsg::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint16_t ns3::psc::McpttMediaMsg::GetPayloadSize() const [member function]
    cls.add_method('GetPayloadSize', 
                   'uint16_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): uint32_t ns3::psc::McpttMediaMsg::GetSsrc() const [member function]
    cls.add_method('GetSsrc', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): ns3::Time ns3::psc::McpttMediaMsg::GetTalkSpurtStart() const [member function]
    cls.add_method('GetTalkSpurtStart', 
                   'ns3::Time', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): static ns3::TypeId ns3::psc::McpttMediaMsg::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetHeader(ns3::psc::McpttRtpHeader const & header) [member function]
    cls.add_method('SetHeader', 
                   'void', 
                   [param('ns3::psc::McpttRtpHeader const &', 'header')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetPayloadSize(uint16_t payloadSize) [member function]
    cls.add_method('SetPayloadSize', 
                   'void', 
                   [param('uint16_t', 'payloadSize')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetSsrc(uint32_t const ssrc) [member function]
    cls.add_method('SetSsrc', 
                   'void', 
                   [param('uint32_t const', 'ssrc')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::SetTalkSpurtStart(ns3::Time talkSpurtStart) [member function]
    cls.add_method('SetTalkSpurtStart', 
                   'void', 
                   [param('ns3::Time', 'talkSpurtStart')], 
                   is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Visit(ns3::psc::McpttCallMachinePrivate & callMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttCallMachinePrivate &', 'callMachine')], 
                   is_const=True, is_virtual=True)
    ## mcptt-media-msg.h (module 'psc'): void ns3::psc::McpttMediaMsg::Visit(ns3::psc::McpttFloorMsgSink & floorMachine) const [member function]
    cls.add_method('Visit', 
                   'void', 
                   [param('ns3::psc::McpttFloorMsgSink &', 'floorMachine')], 
                   is_const=True, is_virtual=True)
    return

def register_Ns3PscMcpttPusherOrchestrator_methods(root_module, cls):
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator::McpttPusherOrchestrator(ns3::psc::McpttPusherOrchestrator const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestrator const &', 'arg0')])
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::psc::McpttPusherOrchestrator::McpttPusherOrchestrator() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestrator::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestrator::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestrator::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestrator::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): bool ns3::psc::McpttPusherOrchestrator::IsActive() const [member function]
    cls.add_method('IsActive', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestrator::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestrator::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::ActivatePusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('ActivatePusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::DeactivatePusher() [member function]
    cls.add_method('DeactivatePusher', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator.h (module 'psc'): void ns3::psc::McpttPusherOrchestrator::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttPusherOrchestratorContention_methods(root_module, cls):
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention::McpttPusherOrchestratorContention(ns3::psc::McpttPusherOrchestratorContention const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttPusherOrchestratorContention const &', 'arg0')])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::psc::McpttPusherOrchestratorContention::McpttPusherOrchestratorContention() [constructor]
    cls.add_constructor([])
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::AddPusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('AddPusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): int64_t ns3::psc::McpttPusherOrchestratorContention::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorContention::GetActivePushers() const [member function]
    cls.add_method('GetActivePushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> ns3::psc::McpttPusherOrchestratorContention::GetOrchestrator() const [member function]
    cls.add_method('GetOrchestrator', 
                   'ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): std::vector<ns3::Ptr<ns3::psc::McpttPusher>, std::allocator<ns3::Ptr<ns3::psc::McpttPusher> > > ns3::psc::McpttPusherOrchestratorContention::GetPushers() const [member function]
    cls.add_method('GetPushers', 
                   'std::vector< ns3::Ptr< ns3::psc::McpttPusher > >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): static ns3::TypeId ns3::psc::McpttPusherOrchestratorContention::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorContention::NextPttDuration() [member function]
    cls.add_method('NextPttDuration', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): ns3::Time ns3::psc::McpttPusherOrchestratorContention::NextPttIat() [member function]
    cls.add_method('NextPttIat', 
                   'ns3::Time', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::SetOrchestrator(ns3::Ptr<ns3::psc::McpttPusherOrchestratorInterface> orchestrator) [member function]
    cls.add_method('SetOrchestrator', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusherOrchestratorInterface >', 'orchestrator')], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::ActivatePusher(ns3::Ptr<ns3::psc::McpttPusher> pusher) [member function]
    cls.add_method('ActivatePusher', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttPusher >', 'pusher')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::DeactivatePusher() [member function]
    cls.add_method('DeactivatePusher', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttDurationTraceCallback(uint32_t userId, ns3::Time pttDuration) [member function]
    cls.add_method('PttDurationTraceCallback', 
                   'void', 
                   [param('uint32_t', 'userId'), param('ns3::Time', 'pttDuration')], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttPush() [member function]
    cls.add_method('PttPush', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## mcptt-pusher-orchestrator-contention.h (module 'psc'): void ns3::psc::McpttPusherOrchestratorContention::PttRelease() [member function]
    cls.add_method('PttRelease', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3PscMcpttServerCallMachineGroupPrearranged_methods(root_module, cls):
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged::McpttServerCallMachineGroupPrearranged(ns3::psc::McpttServerCallMachineGroupPrearranged const & arg0) [constructor]
    cls.add_constructor([param('ns3::psc::McpttServerCallMachineGroupPrearranged const &', 'arg0')])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttServerCallMachineGroupPrearranged::McpttServerCallMachineGroupPrearranged() [constructor]
    cls.add_constructor([])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::AcceptCall() [member function]
    cls.add_method('AcceptCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): int64_t ns3::psc::McpttServerCallMachineGroupPrearranged::AssignStreams(int64_t stream) [member function]
    cls.add_method('AssignStreams', 
                   'int64_t', 
                   [param('int64_t', 'stream')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::BeginEmergAlert() [member function]
    cls.add_method('BeginEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::CancelEmergAlert() [member function]
    cls.add_method('CancelEmergAlert', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::DowngradeCallType() [member function]
    cls.add_method('DowngradeCallType', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetByePayloadSize() [member function]
    cls.add_method('GetByePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallId ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'ns3::psc::McpttCallMsgFieldCallId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldCallType ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallType() const [member function]
    cls.add_method('GetCallType', 
                   'ns3::psc::McpttCallMsgFieldCallType', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetCallerUserId() const [member function]
    cls.add_method('GetCallerUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttCallMsgFieldGrpId ns3::psc::McpttServerCallMachineGroupPrearranged::GetGrpId() const [member function]
    cls.add_method('GetGrpId', 
                   'ns3::psc::McpttCallMsgFieldGrpId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::TypeId ns3::psc::McpttServerCallMachineGroupPrearranged::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetInvitePayloadSize() [member function]
    cls.add_method('GetInvitePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetNPendingTransactions() const [member function]
    cls.add_method('GetNPendingTransactions', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetResponsePayloadSize() [member function]
    cls.add_method('GetResponsePayloadSize', 
                   'uint32_t', 
                   [])
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCall> ns3::psc::McpttServerCallMachineGroupPrearranged::GetServerCall() const [member function]
    cls.add_method('GetServerCall', 
                   'ns3::Ptr< ns3::psc::McpttServerCall >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedState> ns3::psc::McpttServerCallMachineGroupPrearranged::GetState() const [member function]
    cls.add_method('GetState', 
                   'ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedState >', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): ns3::psc::McpttEntityId ns3::psc::McpttServerCallMachineGroupPrearranged::GetStateId() const [member function]
    cls.add_method('GetStateId', 
                   'ns3::psc::McpttEntityId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): static ns3::TypeId ns3::psc::McpttServerCallMachineGroupPrearranged::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): uint32_t ns3::psc::McpttServerCallMachineGroupPrearranged::GetUserId() const [member function]
    cls.add_method('GetUserId', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsCallOngoing() const [member function]
    cls.add_method('IsCallOngoing', 
                   'bool', 
                   [], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsGrpCall(uint32_t grpId=0) const [member function]
    cls.add_method('IsGrpCall', 
                   'bool', 
                   [param('uint32_t', 'grpId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::IsPrivateCall(uint32_t userId=0) const [member function]
    cls.add_method('IsPrivateCall', 
                   'bool', 
                   [param('uint32_t', 'userId', default_value='0')], 
                   is_const=True, is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Receive(ns3::psc::McpttMediaMsg const & msg) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::psc::McpttMediaMsg const &', 'msg')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::ReceiveCallPacket(ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('ReceiveCallPacket', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::RejectCall() [member function]
    cls.add_method('RejectCall', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): bool ns3::psc::McpttServerCallMachineGroupPrearranged::RemoveFromPending(uint32_t userId) [member function]
    cls.add_method('RemoveFromPending', 
                   'bool', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SendSipRequest(uint32_t from, uint32_t to, ns3::Ptr<ns3::Packet> pkt, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipRequest', 
                   'void', 
                   [param('uint32_t', 'from'), param('uint32_t', 'to'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SendSipResponse(uint32_t from, uint32_t to, ns3::Ptr<ns3::Packet> pkt, uint16_t statusCode, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('SendSipResponse', 
                   'void', 
                   [param('uint32_t', 'from'), param('uint32_t', 'to'), param('ns3::Ptr< ns3::Packet >', 'pkt'), param('uint16_t', 'statusCode'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetCallId(ns3::psc::McpttCallMsgFieldCallId const & callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('ns3::psc::McpttCallMsgFieldCallId const &', 'callId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetGrpId(uint32_t grpId) [member function]
    cls.add_method('SetGrpId', 
                   'void', 
                   [param('uint32_t', 'grpId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetNewCallCb(ns3::Callback<void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const newCallCb) [member function]
    cls.add_method('SetNewCallCb', 
                   'void', 
                   [param('ns3::Callback< void, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'newCallCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetPendingTransactionList(std::vector<unsigned int, std::allocator<unsigned int> > pending) [member function]
    cls.add_method('SetPendingTransactionList', 
                   'void', 
                   [param('std::vector< unsigned int >', 'pending')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetServerCall(ns3::Ptr<ns3::psc::McpttServerCall> call) [member function]
    cls.add_method('SetServerCall', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCall >', 'call')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetState(ns3::Ptr<ns3::psc::McpttServerCallMachineGroupPrearrangedState> state) [member function]
    cls.add_method('SetState', 
                   'void', 
                   [param('ns3::Ptr< ns3::psc::McpttServerCallMachineGroupPrearrangedState >', 'state')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetStateChangeCb(ns3::Callback<void, const ns3::psc::McpttEntityId &, const ns3::psc::McpttEntityId &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const stateChangeCb) [member function]
    cls.add_method('SetStateChangeCb', 
                   'void', 
                   [param('ns3::Callback< void, ns3::psc::McpttEntityId const &, ns3::psc::McpttEntityId const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const', 'stateChangeCb')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::SetUserId(uint32_t userId) [member function]
    cls.add_method('SetUserId', 
                   'void', 
                   [param('uint32_t', 'userId')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Start() [member function]
    cls.add_method('Start', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::Stop() [member function]
    cls.add_method('Stop', 
                   'void', 
                   [], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::UpgradeCallType(uint8_t callType) [member function]
    cls.add_method('UpgradeCallType', 
                   'void', 
                   [param('uint8_t', 'callType')], 
                   is_virtual=True)
    ## mcptt-server-call-machine-group-prearranged.h (module 'psc'): void ns3::psc::McpttServerCallMachineGroupPrearranged::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3SipSipElement_methods(root_module, cls):
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::SipElement(ns3::sip::SipElement const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipElement const &', 'arg0')])
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::SipElement() [constructor]
    cls.add_constructor([])
    ## sip-element.h (module 'sip'): static std::string ns3::sip::SipElement::DialogStateToString(ns3::sip::SipElement::DialogState state) [member function]
    cls.add_method('DialogStateToString', 
                   'std::string', 
                   [param('ns3::sip::SipElement::DialogState', 'state')], 
                   is_static=True)
    ## sip-element.h (module 'sip'): static ns3::TypeId ns3::sip::SipElement::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::Receive(ns3::Ptr<ns3::Packet> p, ns3::Address from) [member function]
    cls.add_method('Receive', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address', 'from')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendBye(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint32_t requestUri, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendBye', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint32_t', 'requestUri'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendInvite(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint32_t requestUri, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendInvite', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint32_t', 'requestUri'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SendResponse(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t statusCode, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendResponse', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'statusCode'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   is_virtual=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetCallbacks(uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receiveCallback, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> eventCallback) [member function]
    cls.add_method('SetCallbacks', 
                   'void', 
                   [param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receiveCallback'), param('ns3::Callback< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'eventCallback')])
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetDefaultSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SetDefaultSendCallback', 
                   'void', 
                   [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')])
    ## sip-element.h (module 'sip'): static std::string ns3::sip::SipElement::TransactionStateToString(ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('TransactionStateToString', 
                   'std::string', 
                   [param('ns3::sip::SipElement::TransactionState', 'state')], 
                   is_static=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::ACK_RECEIVED [variable]
    cls.add_static_attribute('ACK_RECEIVED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::REQUEST_TIMEOUT [variable]
    cls.add_static_attribute('REQUEST_TIMEOUT', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_A_EXPIRED [variable]
    cls.add_static_attribute('TIMER_A_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_B_EXPIRED [variable]
    cls.add_static_attribute('TIMER_B_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_C_EXPIRED [variable]
    cls.add_static_attribute('TIMER_C_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_E_EXPIRED [variable]
    cls.add_static_attribute('TIMER_E_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_F_EXPIRED [variable]
    cls.add_static_attribute('TIMER_F_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_I_EXPIRED [variable]
    cls.add_static_attribute('TIMER_I_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_J_EXPIRED [variable]
    cls.add_static_attribute('TIMER_J_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TIMER_K_EXPIRED [variable]
    cls.add_static_attribute('TIMER_K_EXPIRED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TRYING_RECEIVED [variable]
    cls.add_static_attribute('TRYING_RECEIVED', 'char const * const', is_const=True)
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CacheTransactionPacket(ns3::sip::SipElement::TransactionId id, ns3::Ptr<const ns3::Packet> pkt, ns3::Address const & addr, ns3::sip::SipHeader const & hdr) [member function]
    cls.add_method('CacheTransactionPacket', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Ptr< ns3::Packet const >', 'pkt'), param('ns3::Address const &', 'addr'), param('ns3::sip::SipHeader const &', 'hdr')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerA(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerE(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CancelTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CreateDialog(ns3::sip::SipElement::DialogId id, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('CreateDialog', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::CreateTransaction(ns3::sip::SipElement::TransactionId id, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('CreateTransaction', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): bool ns3::sip::SipElement::DialogExists(ns3::sip::SipElement::DialogId id) const [member function]
    cls.add_method('DialogExists', 
                   'bool', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::string ns3::sip::SipElement::DialogIdToString(ns3::sip::SipElement::DialogId id) const [member function]
    cls.add_method('DialogIdToString', 
                   'std::string', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::FreeTransactionPacket(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('FreeTransactionPacket', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::DialogId ns3::sip::SipElement::GetDialogId(uint16_t callId, uint32_t uriA, uint32_t uriB) const [member function]
    cls.add_method('GetDialogId', 
                   'ns3::sip::SipElement::DialogId', 
                   [param('uint16_t', 'callId'), param('uint32_t', 'uriA'), param('uint32_t', 'uriB')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Dialog, ns3::sip::SipElement::TupleHash, std::equal_to<std::tuple<unsigned short, unsigned int, unsigned int> >, std::allocator<std::pair<const std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Dialog> > > & ns3::sip::SipElement::GetDialogs() [member function]
    cls.add_method('GetDialogs', 
                   'std::unordered_map< std::tuple< unsigned short, unsigned int, unsigned int >, ns3::sip::SipElement::Dialog, ns3::sip::SipElement::TupleHash, std::equal_to< std::tuple< unsigned short, unsigned int, unsigned int > >, std::allocator< std::pair< std::tuple< unsigned short, unsigned int, unsigned int > const, ns3::sip::SipElement::Dialog > > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<unsigned short, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Callback<void, const char *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> > > > & ns3::sip::SipElement::GetEventCallbacks() [member function]
    cls.add_method('GetEventCallbacks', 
                   'std::unordered_map< unsigned short, ns3::Callback< void, char const *, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<unsigned short, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::sip::SipHeader &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> > > > & ns3::sip::SipElement::GetReceiveCallbacks() [member function]
    cls.add_method('GetReceiveCallbacks', 
                   'std::unordered_map< unsigned short, ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::sip::SipHeader const &, ns3::sip::SipElement::TransactionState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): ns3::sip::SipElement::TransactionId ns3::sip::SipElement::GetTransactionId(uint16_t callId, uint32_t from, uint32_t to) const [member function]
    cls.add_method('GetTransactionId', 
                   'ns3::sip::SipElement::TransactionId', 
                   [param('uint16_t', 'callId'), param('uint32_t', 'from'), param('uint32_t', 'to')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): ns3::Ptr<const ns3::Packet> ns3::sip::SipElement::GetTransactionPacket(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('GetTransactionPacket', 
                   'ns3::Ptr< ns3::Packet const >', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): std::unordered_map<std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Transaction, ns3::sip::SipElement::TupleHash, std::equal_to<std::tuple<unsigned short, unsigned int, unsigned int> >, std::allocator<std::pair<const std::tuple<unsigned short, unsigned int, unsigned int>, ns3::sip::SipElement::Transaction> > > & ns3::sip::SipElement::GetTransactions() [member function]
    cls.add_method('GetTransactions', 
                   'std::unordered_map< std::tuple< unsigned short, unsigned int, unsigned int >, ns3::sip::SipElement::Transaction, ns3::sip::SipElement::TupleHash, std::equal_to< std::tuple< unsigned short, unsigned int, unsigned int > >, std::allocator< std::pair< std::tuple< unsigned short, unsigned int, unsigned int > const, ns3::sip::SipElement::Transaction > > > &', 
                   [], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerA(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('HandleTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerE(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('HandleTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerI(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerI', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerJ(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerJ', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::HandleTimerK(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerK', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerA(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('ScheduleTimerA', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerB(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerB', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerE(ns3::sip::SipElement::TransactionId id, uint32_t backoff) [member function]
    cls.add_method('ScheduleTimerE', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('uint32_t', 'backoff')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerF(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerF', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerI(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerI', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerJ(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerJ', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::ScheduleTimerK(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerK', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetDialogState(ns3::sip::SipElement::DialogId id, ns3::sip::SipElement::DialogState state) [member function]
    cls.add_method('SetDialogState', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::sip::SipElement::DialogState', 'state')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): void ns3::sip::SipElement::SetTransactionState(ns3::sip::SipElement::TransactionId id, ns3::sip::SipElement::TransactionState state) [member function]
    cls.add_method('SetTransactionState', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id'), param('ns3::sip::SipElement::TransactionState', 'state')], 
                   visibility='protected')
    ## sip-element.h (module 'sip'): bool ns3::sip::SipElement::TransactionExists(ns3::sip::SipElement::TransactionId id) const [member function]
    cls.add_method('TransactionExists', 
                   'bool', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    ## sip-element.h (module 'sip'): std::string ns3::sip::SipElement::TransactionIdToString(ns3::sip::SipElement::TransactionId id) const [member function]
    cls.add_method('TransactionIdToString', 
                   'std::string', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_const=True, visibility='protected')
    return

def register_Ns3SipSipHeader_methods(root_module, cls):
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipHeader(ns3::sip::SipHeader const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipHeader const &', 'arg0')])
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipHeader() [constructor]
    cls.add_constructor([])
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::Deserialize(ns3::Buffer::Iterator start) [member function]
    cls.add_method('Deserialize', 
                   'uint32_t', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_virtual=True)
    ## sip-header.h (module 'sip'): uint16_t ns3::sip::SipHeader::GetCallId() const [member function]
    cls.add_method('GetCallId', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetFrom() const [member function]
    cls.add_method('GetFrom', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): ns3::TypeId ns3::sip::SipHeader::GetInstanceTypeId() const [member function]
    cls.add_method('GetInstanceTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMessageType ns3::sip::SipHeader::GetMessageType() const [member function]
    cls.add_method('GetMessageType', 
                   'ns3::sip::SipHeader::SipMessageType', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): std::string ns3::sip::SipHeader::GetMessageTypeName() const [member function]
    cls.add_method('GetMessageTypeName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): ns3::sip::SipHeader::SipMethod ns3::sip::SipHeader::GetMethod() const [member function]
    cls.add_method('GetMethod', 
                   'ns3::sip::SipHeader::SipMethod', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): std::string ns3::sip::SipHeader::GetMethodName() const [member function]
    cls.add_method('GetMethodName', 
                   'std::string', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetRequestUri() const [member function]
    cls.add_method('GetRequestUri', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetSerializedSize() const [member function]
    cls.add_method('GetSerializedSize', 
                   'uint32_t', 
                   [], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): uint16_t ns3::sip::SipHeader::GetStatusCode() const [member function]
    cls.add_method('GetStatusCode', 
                   'uint16_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): uint32_t ns3::sip::SipHeader::GetTo() const [member function]
    cls.add_method('GetTo', 
                   'uint32_t', 
                   [], 
                   is_const=True)
    ## sip-header.h (module 'sip'): static ns3::TypeId ns3::sip::SipHeader::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::Print(std::ostream & os) const [member function]
    cls.add_method('Print', 
                   'void', 
                   [param('std::ostream &', 'os')], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::Serialize(ns3::Buffer::Iterator start) const [member function]
    cls.add_method('Serialize', 
                   'void', 
                   [param('ns3::Buffer::Iterator', 'start')], 
                   is_const=True, is_virtual=True)
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetCallId(uint16_t callId) [member function]
    cls.add_method('SetCallId', 
                   'void', 
                   [param('uint16_t', 'callId')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetFrom(uint32_t from) [member function]
    cls.add_method('SetFrom', 
                   'void', 
                   [param('uint32_t', 'from')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetMessageType(ns3::sip::SipHeader::SipMessageType messageType) [member function]
    cls.add_method('SetMessageType', 
                   'void', 
                   [param('ns3::sip::SipHeader::SipMessageType', 'messageType')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetMethod(ns3::sip::SipHeader::SipMethod method) [member function]
    cls.add_method('SetMethod', 
                   'void', 
                   [param('ns3::sip::SipHeader::SipMethod', 'method')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetRequestUri(uint32_t requestUri) [member function]
    cls.add_method('SetRequestUri', 
                   'void', 
                   [param('uint32_t', 'requestUri')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetStatusCode(uint16_t statusCode) [member function]
    cls.add_method('SetStatusCode', 
                   'void', 
                   [param('uint16_t', 'statusCode')])
    ## sip-header.h (module 'sip'): void ns3::sip::SipHeader::SetTo(uint32_t from) [member function]
    cls.add_method('SetTo', 
                   'void', 
                   [param('uint32_t', 'from')])
    return

def register_Ns3SipSipProxy_methods(root_module, cls):
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy::SipProxy(ns3::sip::SipProxy const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipProxy const &', 'arg0')])
    ## sip-proxy.h (module 'sip'): ns3::sip::SipProxy::SipProxy() [constructor]
    cls.add_constructor([])
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::CancelTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('CancelTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): static ns3::TypeId ns3::sip::SipProxy::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::HandleTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('HandleTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::ScheduleTimerC(ns3::sip::SipElement::TransactionId id) [member function]
    cls.add_method('ScheduleTimerC', 
                   'void', 
                   [param('std::tuple< unsigned short, unsigned int, unsigned int >', 'id')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::SendResponse(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t statusCode, uint32_t from, uint32_t to, uint16_t callId, ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::Address &, const ns3::sip::SipHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCallback) [member function]
    cls.add_method('SendResponse', 
                   'void', 
                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'statusCode'), param('uint32_t', 'from'), param('uint32_t', 'to'), param('uint16_t', 'callId'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Address const &, ns3::sip::SipHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCallback')], 
                   is_virtual=True)
    ## sip-proxy.h (module 'sip'): void ns3::sip::SipProxy::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_Ns3SipSipAgent_methods(root_module, cls):
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent::SipAgent(ns3::sip::SipAgent const & arg0) [constructor]
    cls.add_constructor([param('ns3::sip::SipAgent const &', 'arg0')])
    ## sip-agent.h (module 'sip'): ns3::sip::SipAgent::SipAgent() [constructor]
    cls.add_constructor([])
    ## sip-agent.h (module 'sip'): static ns3::TypeId ns3::sip::SipAgent::GetTypeId() [member function]
    cls.add_method('GetTypeId', 
                   'ns3::TypeId', 
                   [], 
                   is_static=True)
    ## sip-agent.h (module 'sip'): void ns3::sip::SipAgent::DoDispose() [member function]
    cls.add_method('DoDispose', 
                   'void', 
                   [], 
                   is_virtual=True, visibility='protected')
    return

def register_functions(root_module):
    module = root_module
    register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
    register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
    register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
    register_functions_ns3_internal(module.add_cpp_namespace('internal'), root_module)
    register_functions_ns3_psc(module.add_cpp_namespace('psc'), root_module)
    register_functions_ns3_sip(module.add_cpp_namespace('sip'), root_module)
    return

def register_functions_ns3_FatalImpl(module, root_module):
    return

def register_functions_ns3_Hash(module, root_module):
    register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
    return

def register_functions_ns3_Hash_Function(module, root_module):
    return

def register_functions_ns3_TracedValueCallback(module, root_module):
    return

def register_functions_ns3_internal(module, root_module):
    return

def register_functions_ns3_psc(module, root_module):
    return

def register_functions_ns3_sip(module, root_module):
    return

def main():
    out = FileCodeSink(sys.stdout)
    root_module = module_init()
    register_types(root_module)
    register_methods(root_module)
    register_functions(root_module)
    root_module.generate(out)

if __name__ == '__main__':
    main()

